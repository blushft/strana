// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/blushft/strana/platform/store/loader/ent/rawevent"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/google/uuid"
)

// RawEventCreate is the builder for creating a RawEvent entity.
type RawEventCreate struct {
	config
	mutation *RawEventMutation
	hooks    []Hook
}

// SetTrackingID sets the tracking_id field.
func (rec *RawEventCreate) SetTrackingID(u uuid.UUID) *RawEventCreate {
	rec.mutation.SetTrackingID(u)
	return rec
}

// SetUserID sets the user_id field.
func (rec *RawEventCreate) SetUserID(s string) *RawEventCreate {
	rec.mutation.SetUserID(s)
	return rec
}

// SetAnonymous sets the anonymous field.
func (rec *RawEventCreate) SetAnonymous(b bool) *RawEventCreate {
	rec.mutation.SetAnonymous(b)
	return rec
}

// SetGroupID sets the group_id field.
func (rec *RawEventCreate) SetGroupID(s string) *RawEventCreate {
	rec.mutation.SetGroupID(s)
	return rec
}

// SetNillableGroupID sets the group_id field if the given value is not nil.
func (rec *RawEventCreate) SetNillableGroupID(s *string) *RawEventCreate {
	if s != nil {
		rec.SetGroupID(*s)
	}
	return rec
}

// SetSessionID sets the session_id field.
func (rec *RawEventCreate) SetSessionID(s string) *RawEventCreate {
	rec.mutation.SetSessionID(s)
	return rec
}

// SetNillableSessionID sets the session_id field if the given value is not nil.
func (rec *RawEventCreate) SetNillableSessionID(s *string) *RawEventCreate {
	if s != nil {
		rec.SetSessionID(*s)
	}
	return rec
}

// SetDeviceID sets the device_id field.
func (rec *RawEventCreate) SetDeviceID(s string) *RawEventCreate {
	rec.mutation.SetDeviceID(s)
	return rec
}

// SetNillableDeviceID sets the device_id field if the given value is not nil.
func (rec *RawEventCreate) SetNillableDeviceID(s *string) *RawEventCreate {
	if s != nil {
		rec.SetDeviceID(*s)
	}
	return rec
}

// SetEvent sets the event field.
func (rec *RawEventCreate) SetEvent(s string) *RawEventCreate {
	rec.mutation.SetEvent(s)
	return rec
}

// SetNonInteractive sets the non_interactive field.
func (rec *RawEventCreate) SetNonInteractive(b bool) *RawEventCreate {
	rec.mutation.SetNonInteractive(b)
	return rec
}

// SetChannel sets the channel field.
func (rec *RawEventCreate) SetChannel(s string) *RawEventCreate {
	rec.mutation.SetChannel(s)
	return rec
}

// SetNillableChannel sets the channel field if the given value is not nil.
func (rec *RawEventCreate) SetNillableChannel(s *string) *RawEventCreate {
	if s != nil {
		rec.SetChannel(*s)
	}
	return rec
}

// SetPlatform sets the platform field.
func (rec *RawEventCreate) SetPlatform(s string) *RawEventCreate {
	rec.mutation.SetPlatform(s)
	return rec
}

// SetNillablePlatform sets the platform field if the given value is not nil.
func (rec *RawEventCreate) SetNillablePlatform(s *string) *RawEventCreate {
	if s != nil {
		rec.SetPlatform(*s)
	}
	return rec
}

// SetTimestamp sets the timestamp field.
func (rec *RawEventCreate) SetTimestamp(t time.Time) *RawEventCreate {
	rec.mutation.SetTimestamp(t)
	return rec
}

// SetContext sets the context field.
func (rec *RawEventCreate) SetContext(m map[string]interface{}) *RawEventCreate {
	rec.mutation.SetContext(m)
	return rec
}

// SetID sets the id field.
func (rec *RawEventCreate) SetID(u uuid.UUID) *RawEventCreate {
	rec.mutation.SetID(u)
	return rec
}

// Mutation returns the RawEventMutation object of the builder.
func (rec *RawEventCreate) Mutation() *RawEventMutation {
	return rec.mutation
}

// Save creates the RawEvent in the database.
func (rec *RawEventCreate) Save(ctx context.Context) (*RawEvent, error) {
	if err := rec.preSave(); err != nil {
		return nil, err
	}
	var (
		err  error
		node *RawEvent
	)
	if len(rec.hooks) == 0 {
		node, err = rec.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RawEventMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rec.mutation = mutation
			node, err = rec.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rec.hooks) - 1; i >= 0; i-- {
			mut = rec.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rec.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rec *RawEventCreate) SaveX(ctx context.Context) *RawEvent {
	v, err := rec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (rec *RawEventCreate) preSave() error {
	if _, ok := rec.mutation.TrackingID(); !ok {
		return &ValidationError{Name: "tracking_id", err: errors.New("ent: missing required field \"tracking_id\"")}
	}
	if _, ok := rec.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New("ent: missing required field \"user_id\"")}
	}
	if _, ok := rec.mutation.Anonymous(); !ok {
		return &ValidationError{Name: "anonymous", err: errors.New("ent: missing required field \"anonymous\"")}
	}
	if _, ok := rec.mutation.Event(); !ok {
		return &ValidationError{Name: "event", err: errors.New("ent: missing required field \"event\"")}
	}
	if _, ok := rec.mutation.NonInteractive(); !ok {
		return &ValidationError{Name: "non_interactive", err: errors.New("ent: missing required field \"non_interactive\"")}
	}
	if _, ok := rec.mutation.Timestamp(); !ok {
		return &ValidationError{Name: "timestamp", err: errors.New("ent: missing required field \"timestamp\"")}
	}
	if _, ok := rec.mutation.Context(); !ok {
		return &ValidationError{Name: "context", err: errors.New("ent: missing required field \"context\"")}
	}
	if _, ok := rec.mutation.ID(); !ok {
		v := rawevent.DefaultID()
		rec.mutation.SetID(v)
	}
	return nil
}

func (rec *RawEventCreate) sqlSave(ctx context.Context) (*RawEvent, error) {
	re, _spec := rec.createSpec()
	if err := sqlgraph.CreateNode(ctx, rec.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return re, nil
}

func (rec *RawEventCreate) createSpec() (*RawEvent, *sqlgraph.CreateSpec) {
	var (
		re    = &RawEvent{config: rec.config}
		_spec = &sqlgraph.CreateSpec{
			Table: rawevent.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: rawevent.FieldID,
			},
		}
	)
	if id, ok := rec.mutation.ID(); ok {
		re.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rec.mutation.TrackingID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: rawevent.FieldTrackingID,
		})
		re.TrackingID = value
	}
	if value, ok := rec.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rawevent.FieldUserID,
		})
		re.UserID = value
	}
	if value, ok := rec.mutation.Anonymous(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: rawevent.FieldAnonymous,
		})
		re.Anonymous = value
	}
	if value, ok := rec.mutation.GroupID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rawevent.FieldGroupID,
		})
		re.GroupID = value
	}
	if value, ok := rec.mutation.SessionID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rawevent.FieldSessionID,
		})
		re.SessionID = value
	}
	if value, ok := rec.mutation.DeviceID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rawevent.FieldDeviceID,
		})
		re.DeviceID = value
	}
	if value, ok := rec.mutation.Event(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rawevent.FieldEvent,
		})
		re.Event = value
	}
	if value, ok := rec.mutation.NonInteractive(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: rawevent.FieldNonInteractive,
		})
		re.NonInteractive = value
	}
	if value, ok := rec.mutation.Channel(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rawevent.FieldChannel,
		})
		re.Channel = value
	}
	if value, ok := rec.mutation.Platform(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rawevent.FieldPlatform,
		})
		re.Platform = value
	}
	if value, ok := rec.mutation.Timestamp(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: rawevent.FieldTimestamp,
		})
		re.Timestamp = value
	}
	if value, ok := rec.mutation.Context(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: rawevent.FieldContext,
		})
		re.Context = value
	}
	return re, _spec
}

// RawEventCreateBulk is the builder for creating a bulk of RawEvent entities.
type RawEventCreateBulk struct {
	config
	builders []*RawEventCreate
}

// Save creates the RawEvent entities in the database.
func (recb *RawEventCreateBulk) Save(ctx context.Context) ([]*RawEvent, error) {
	specs := make([]*sqlgraph.CreateSpec, len(recb.builders))
	nodes := make([]*RawEvent, len(recb.builders))
	mutators := make([]Mutator, len(recb.builders))
	for i := range recb.builders {
		func(i int, root context.Context) {
			builder := recb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				if err := builder.preSave(); err != nil {
					return nil, err
				}
				mutation, ok := m.(*RawEventMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, recb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, recb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, recb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (recb *RawEventCreateBulk) SaveX(ctx context.Context) []*RawEvent {
	v, err := recb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
