// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"github.com/blushft/strana/platform/store/loader/ent/rawevent"
	"github.com/facebook/ent/dialect/sql"
	"github.com/google/uuid"
)

// RawEvent is the model entity for the RawEvent schema.
type RawEvent struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// TrackingID holds the value of the "tracking_id" field.
	TrackingID uuid.UUID `json:"tracking_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id,omitempty"`
	// Anonymous holds the value of the "anonymous" field.
	Anonymous bool `json:"anonymous,omitempty"`
	// GroupID holds the value of the "group_id" field.
	GroupID string `json:"group_id,omitempty"`
	// SessionID holds the value of the "session_id" field.
	SessionID string `json:"session_id,omitempty"`
	// DeviceID holds the value of the "device_id" field.
	DeviceID string `json:"device_id,omitempty"`
	// Event holds the value of the "event" field.
	Event string `json:"event,omitempty"`
	// NonInteractive holds the value of the "non_interactive" field.
	NonInteractive bool `json:"non_interactive,omitempty"`
	// Channel holds the value of the "channel" field.
	Channel string `json:"channel,omitempty"`
	// Platform holds the value of the "platform" field.
	Platform string `json:"platform,omitempty"`
	// Timestamp holds the value of the "timestamp" field.
	Timestamp time.Time `json:"timestamp,omitempty"`
	// Context holds the value of the "context" field.
	Context map[string]interface{} `json:"context,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RawEvent) scanValues() []interface{} {
	return []interface{}{
		&uuid.UUID{},      // id
		&uuid.UUID{},      // tracking_id
		&sql.NullString{}, // user_id
		&sql.NullBool{},   // anonymous
		&sql.NullString{}, // group_id
		&sql.NullString{}, // session_id
		&sql.NullString{}, // device_id
		&sql.NullString{}, // event
		&sql.NullBool{},   // non_interactive
		&sql.NullString{}, // channel
		&sql.NullString{}, // platform
		&sql.NullTime{},   // timestamp
		&[]byte{},         // context
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RawEvent fields.
func (re *RawEvent) assignValues(values ...interface{}) error {
	if m, n := len(values), len(rawevent.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	if value, ok := values[0].(*uuid.UUID); !ok {
		return fmt.Errorf("unexpected type %T for field id", values[0])
	} else if value != nil {
		re.ID = *value
	}
	values = values[1:]
	if value, ok := values[0].(*uuid.UUID); !ok {
		return fmt.Errorf("unexpected type %T for field tracking_id", values[0])
	} else if value != nil {
		re.TrackingID = *value
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field user_id", values[1])
	} else if value.Valid {
		re.UserID = value.String
	}
	if value, ok := values[2].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field anonymous", values[2])
	} else if value.Valid {
		re.Anonymous = value.Bool
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field group_id", values[3])
	} else if value.Valid {
		re.GroupID = value.String
	}
	if value, ok := values[4].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field session_id", values[4])
	} else if value.Valid {
		re.SessionID = value.String
	}
	if value, ok := values[5].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field device_id", values[5])
	} else if value.Valid {
		re.DeviceID = value.String
	}
	if value, ok := values[6].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field event", values[6])
	} else if value.Valid {
		re.Event = value.String
	}
	if value, ok := values[7].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field non_interactive", values[7])
	} else if value.Valid {
		re.NonInteractive = value.Bool
	}
	if value, ok := values[8].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field channel", values[8])
	} else if value.Valid {
		re.Channel = value.String
	}
	if value, ok := values[9].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field platform", values[9])
	} else if value.Valid {
		re.Platform = value.String
	}
	if value, ok := values[10].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field timestamp", values[10])
	} else if value.Valid {
		re.Timestamp = value.Time
	}

	if value, ok := values[11].(*[]byte); !ok {
		return fmt.Errorf("unexpected type %T for field context", values[11])
	} else if value != nil && len(*value) > 0 {
		if err := json.Unmarshal(*value, &re.Context); err != nil {
			return fmt.Errorf("unmarshal field context: %v", err)
		}
	}
	return nil
}

// Update returns a builder for updating this RawEvent.
// Note that, you need to call RawEvent.Unwrap() before calling this method, if this RawEvent
// was returned from a transaction, and the transaction was committed or rolled back.
func (re *RawEvent) Update() *RawEventUpdateOne {
	return (&RawEventClient{config: re.config}).UpdateOne(re)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (re *RawEvent) Unwrap() *RawEvent {
	tx, ok := re.config.driver.(*txDriver)
	if !ok {
		panic("ent: RawEvent is not a transactional entity")
	}
	re.config.driver = tx.drv
	return re
}

// String implements the fmt.Stringer.
func (re *RawEvent) String() string {
	var builder strings.Builder
	builder.WriteString("RawEvent(")
	builder.WriteString(fmt.Sprintf("id=%v", re.ID))
	builder.WriteString(", tracking_id=")
	builder.WriteString(fmt.Sprintf("%v", re.TrackingID))
	builder.WriteString(", user_id=")
	builder.WriteString(re.UserID)
	builder.WriteString(", anonymous=")
	builder.WriteString(fmt.Sprintf("%v", re.Anonymous))
	builder.WriteString(", group_id=")
	builder.WriteString(re.GroupID)
	builder.WriteString(", session_id=")
	builder.WriteString(re.SessionID)
	builder.WriteString(", device_id=")
	builder.WriteString(re.DeviceID)
	builder.WriteString(", event=")
	builder.WriteString(re.Event)
	builder.WriteString(", non_interactive=")
	builder.WriteString(fmt.Sprintf("%v", re.NonInteractive))
	builder.WriteString(", channel=")
	builder.WriteString(re.Channel)
	builder.WriteString(", platform=")
	builder.WriteString(re.Platform)
	builder.WriteString(", timestamp=")
	builder.WriteString(re.Timestamp.Format(time.ANSIC))
	builder.WriteString(", context=")
	builder.WriteString(fmt.Sprintf("%v", re.Context))
	builder.WriteByte(')')
	return builder.String()
}

// RawEvents is a parsable slice of RawEvent.
type RawEvents []*RawEvent

func (re RawEvents) config(cfg config) {
	for _i := range re {
		re[_i].config = cfg
	}
}
