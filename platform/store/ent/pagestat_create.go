// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/blushft/strana/platform/store/ent/app"
	"github.com/blushft/strana/platform/store/ent/hostname"
	"github.com/blushft/strana/platform/store/ent/pagestat"
	"github.com/blushft/strana/platform/store/ent/pathname"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// PageStatCreate is the builder for creating a PageStat entity.
type PageStatCreate struct {
	config
	mutation *PageStatMutation
	hooks    []Hook
}

// SetPageviews sets the pageviews field.
func (psc *PageStatCreate) SetPageviews(i int) *PageStatCreate {
	psc.mutation.SetPageviews(i)
	return psc
}

// SetVisitors sets the visitors field.
func (psc *PageStatCreate) SetVisitors(i int) *PageStatCreate {
	psc.mutation.SetVisitors(i)
	return psc
}

// SetEntries sets the entries field.
func (psc *PageStatCreate) SetEntries(i int) *PageStatCreate {
	psc.mutation.SetEntries(i)
	return psc
}

// SetBounceRate sets the bounce_rate field.
func (psc *PageStatCreate) SetBounceRate(f float64) *PageStatCreate {
	psc.mutation.SetBounceRate(f)
	return psc
}

// SetKnownDurations sets the known_durations field.
func (psc *PageStatCreate) SetKnownDurations(i int) *PageStatCreate {
	psc.mutation.SetKnownDurations(i)
	return psc
}

// SetNillableKnownDurations sets the known_durations field if the given value is not nil.
func (psc *PageStatCreate) SetNillableKnownDurations(i *int) *PageStatCreate {
	if i != nil {
		psc.SetKnownDurations(*i)
	}
	return psc
}

// SetAvgDuration sets the avg_duration field.
func (psc *PageStatCreate) SetAvgDuration(f float64) *PageStatCreate {
	psc.mutation.SetAvgDuration(f)
	return psc
}

// SetDate sets the date field.
func (psc *PageStatCreate) SetDate(t time.Time) *PageStatCreate {
	psc.mutation.SetDate(t)
	return psc
}

// SetAppID sets the app edge to App by id.
func (psc *PageStatCreate) SetAppID(id int) *PageStatCreate {
	psc.mutation.SetAppID(id)
	return psc
}

// SetApp sets the app edge to App.
func (psc *PageStatCreate) SetApp(a *App) *PageStatCreate {
	return psc.SetAppID(a.ID)
}

// SetHostnameID sets the hostname edge to Hostname by id.
func (psc *PageStatCreate) SetHostnameID(id int) *PageStatCreate {
	psc.mutation.SetHostnameID(id)
	return psc
}

// SetHostname sets the hostname edge to Hostname.
func (psc *PageStatCreate) SetHostname(h *Hostname) *PageStatCreate {
	return psc.SetHostnameID(h.ID)
}

// SetPathnameID sets the pathname edge to Pathname by id.
func (psc *PageStatCreate) SetPathnameID(id int) *PageStatCreate {
	psc.mutation.SetPathnameID(id)
	return psc
}

// SetPathname sets the pathname edge to Pathname.
func (psc *PageStatCreate) SetPathname(p *Pathname) *PageStatCreate {
	return psc.SetPathnameID(p.ID)
}

// Mutation returns the PageStatMutation object of the builder.
func (psc *PageStatCreate) Mutation() *PageStatMutation {
	return psc.mutation
}

// Save creates the PageStat in the database.
func (psc *PageStatCreate) Save(ctx context.Context) (*PageStat, error) {
	if _, ok := psc.mutation.Pageviews(); !ok {
		return nil, &ValidationError{Name: "pageviews", err: errors.New("ent: missing required field \"pageviews\"")}
	}
	if _, ok := psc.mutation.Visitors(); !ok {
		return nil, &ValidationError{Name: "visitors", err: errors.New("ent: missing required field \"visitors\"")}
	}
	if _, ok := psc.mutation.Entries(); !ok {
		return nil, &ValidationError{Name: "entries", err: errors.New("ent: missing required field \"entries\"")}
	}
	if _, ok := psc.mutation.BounceRate(); !ok {
		return nil, &ValidationError{Name: "bounce_rate", err: errors.New("ent: missing required field \"bounce_rate\"")}
	}
	if _, ok := psc.mutation.KnownDurations(); !ok {
		v := pagestat.DefaultKnownDurations
		psc.mutation.SetKnownDurations(v)
	}
	if _, ok := psc.mutation.AvgDuration(); !ok {
		return nil, &ValidationError{Name: "avg_duration", err: errors.New("ent: missing required field \"avg_duration\"")}
	}
	if _, ok := psc.mutation.Date(); !ok {
		return nil, &ValidationError{Name: "date", err: errors.New("ent: missing required field \"date\"")}
	}
	if _, ok := psc.mutation.AppID(); !ok {
		return nil, &ValidationError{Name: "app", err: errors.New("ent: missing required edge \"app\"")}
	}
	if _, ok := psc.mutation.HostnameID(); !ok {
		return nil, &ValidationError{Name: "hostname", err: errors.New("ent: missing required edge \"hostname\"")}
	}
	if _, ok := psc.mutation.PathnameID(); !ok {
		return nil, &ValidationError{Name: "pathname", err: errors.New("ent: missing required edge \"pathname\"")}
	}
	var (
		err  error
		node *PageStat
	)
	if len(psc.hooks) == 0 {
		node, err = psc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PageStatMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			psc.mutation = mutation
			node, err = psc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(psc.hooks) - 1; i >= 0; i-- {
			mut = psc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, psc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (psc *PageStatCreate) SaveX(ctx context.Context) *PageStat {
	v, err := psc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (psc *PageStatCreate) sqlSave(ctx context.Context) (*PageStat, error) {
	ps, _spec := psc.createSpec()
	if err := sqlgraph.CreateNode(ctx, psc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	ps.ID = int(id)
	return ps, nil
}

func (psc *PageStatCreate) createSpec() (*PageStat, *sqlgraph.CreateSpec) {
	var (
		ps    = &PageStat{config: psc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: pagestat.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: pagestat.FieldID,
			},
		}
	)
	if value, ok := psc.mutation.Pageviews(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pagestat.FieldPageviews,
		})
		ps.Pageviews = value
	}
	if value, ok := psc.mutation.Visitors(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pagestat.FieldVisitors,
		})
		ps.Visitors = value
	}
	if value, ok := psc.mutation.Entries(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pagestat.FieldEntries,
		})
		ps.Entries = value
	}
	if value, ok := psc.mutation.BounceRate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: pagestat.FieldBounceRate,
		})
		ps.BounceRate = value
	}
	if value, ok := psc.mutation.KnownDurations(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pagestat.FieldKnownDurations,
		})
		ps.KnownDurations = value
	}
	if value, ok := psc.mutation.AvgDuration(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: pagestat.FieldAvgDuration,
		})
		ps.AvgDuration = value
	}
	if value, ok := psc.mutation.Date(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pagestat.FieldDate,
		})
		ps.Date = value
	}
	if nodes := psc.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pagestat.AppTable,
			Columns: []string{pagestat.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := psc.mutation.HostnameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pagestat.HostnameTable,
			Columns: []string{pagestat.HostnameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: hostname.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := psc.mutation.PathnameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pagestat.PathnameTable,
			Columns: []string{pagestat.PathnameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pathname.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return ps, _spec
}
