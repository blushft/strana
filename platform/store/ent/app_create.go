// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/blushft/strana/platform/store/ent/app"
	"github.com/blushft/strana/platform/store/ent/appstat"
	"github.com/blushft/strana/platform/store/ent/pagestat"
	"github.com/blushft/strana/platform/store/ent/pageview"
	"github.com/blushft/strana/platform/store/ent/session"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/google/uuid"
)

// AppCreate is the builder for creating a App entity.
type AppCreate struct {
	config
	mutation *AppMutation
	hooks    []Hook
}

// SetName sets the name field.
func (ac *AppCreate) SetName(s string) *AppCreate {
	ac.mutation.SetName(s)
	return ac
}

// SetTrackingID sets the tracking_id field.
func (ac *AppCreate) SetTrackingID(s string) *AppCreate {
	ac.mutation.SetTrackingID(s)
	return ac
}

// AddSessionIDs adds the sessions edge to Session by ids.
func (ac *AppCreate) AddSessionIDs(ids ...uuid.UUID) *AppCreate {
	ac.mutation.AddSessionIDs(ids...)
	return ac
}

// AddSessions adds the sessions edges to Session.
func (ac *AppCreate) AddSessions(s ...*Session) *AppCreate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ac.AddSessionIDs(ids...)
}

// AddPageviewIDs adds the pageviews edge to PageView by ids.
func (ac *AppCreate) AddPageviewIDs(ids ...uuid.UUID) *AppCreate {
	ac.mutation.AddPageviewIDs(ids...)
	return ac
}

// AddPageviews adds the pageviews edges to PageView.
func (ac *AppCreate) AddPageviews(p ...*PageView) *AppCreate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ac.AddPageviewIDs(ids...)
}

// AddStatIDs adds the stats edge to AppStat by ids.
func (ac *AppCreate) AddStatIDs(ids ...int) *AppCreate {
	ac.mutation.AddStatIDs(ids...)
	return ac
}

// AddStats adds the stats edges to AppStat.
func (ac *AppCreate) AddStats(a ...*AppStat) *AppCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ac.AddStatIDs(ids...)
}

// AddPageStatIDs adds the page_stats edge to PageStat by ids.
func (ac *AppCreate) AddPageStatIDs(ids ...int) *AppCreate {
	ac.mutation.AddPageStatIDs(ids...)
	return ac
}

// AddPageStats adds the page_stats edges to PageStat.
func (ac *AppCreate) AddPageStats(p ...*PageStat) *AppCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ac.AddPageStatIDs(ids...)
}

// Mutation returns the AppMutation object of the builder.
func (ac *AppCreate) Mutation() *AppMutation {
	return ac.mutation
}

// Save creates the App in the database.
func (ac *AppCreate) Save(ctx context.Context) (*App, error) {
	if _, ok := ac.mutation.Name(); !ok {
		return nil, &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if _, ok := ac.mutation.TrackingID(); !ok {
		return nil, &ValidationError{Name: "tracking_id", err: errors.New("ent: missing required field \"tracking_id\"")}
	}
	if v, ok := ac.mutation.TrackingID(); ok {
		if err := app.TrackingIDValidator(v); err != nil {
			return nil, &ValidationError{Name: "tracking_id", err: fmt.Errorf("ent: validator failed for field \"tracking_id\": %w", err)}
		}
	}
	var (
		err  error
		node *App
	)
	if len(ac.hooks) == 0 {
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ac.mutation = mutation
			node, err = ac.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			mut = ac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AppCreate) SaveX(ctx context.Context) *App {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ac *AppCreate) sqlSave(ctx context.Context) (*App, error) {
	a, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	a.ID = int(id)
	return a, nil
}

func (ac *AppCreate) createSpec() (*App, *sqlgraph.CreateSpec) {
	var (
		a     = &App{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: app.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: app.FieldID,
			},
		}
	)
	if value, ok := ac.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: app.FieldName,
		})
		a.Name = value
	}
	if value, ok := ac.mutation.TrackingID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: app.FieldTrackingID,
		})
		a.TrackingID = value
	}
	if nodes := ac.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   app.SessionsTable,
			Columns: []string{app.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: session.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.PageviewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   app.PageviewsTable,
			Columns: []string{app.PageviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: pageview.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.StatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.StatsTable,
			Columns: []string{app.StatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: appstat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.PageStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.PageStatsTable,
			Columns: []string{app.PageStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pagestat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return a, _spec
}
