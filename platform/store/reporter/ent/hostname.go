// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/blushft/strana/platform/store/reporter/ent/hostname"
	"github.com/facebook/ent/dialect/sql"
)

// Hostname is the model entity for the Hostname schema.
type Hostname struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HostnameQuery when eager-loading is set.
	Edges HostnameEdges `json:"edges"`
}

// HostnameEdges holds the relations/edges for other nodes in the graph.
type HostnameEdges struct {
	// PageStats holds the value of the page_stats edge.
	PageStats []*PageStat
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PageStatsOrErr returns the PageStats value or an error if the edge
// was not loaded in eager-loading.
func (e HostnameEdges) PageStatsOrErr() ([]*PageStat, error) {
	if e.loadedTypes[0] {
		return e.PageStats, nil
	}
	return nil, &NotLoadedError{edge: "page_stats"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Hostname) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // name
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Hostname fields.
func (h *Hostname) assignValues(values ...interface{}) error {
	if m, n := len(values), len(hostname.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	h.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		h.Name = value.String
	}
	return nil
}

// QueryPageStats queries the page_stats edge of the Hostname.
func (h *Hostname) QueryPageStats() *PageStatQuery {
	return (&HostnameClient{config: h.config}).QueryPageStats(h)
}

// Update returns a builder for updating this Hostname.
// Note that, you need to call Hostname.Unwrap() before calling this method, if this Hostname
// was returned from a transaction, and the transaction was committed or rolled back.
func (h *Hostname) Update() *HostnameUpdateOne {
	return (&HostnameClient{config: h.config}).UpdateOne(h)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (h *Hostname) Unwrap() *Hostname {
	tx, ok := h.config.driver.(*txDriver)
	if !ok {
		panic("ent: Hostname is not a transactional entity")
	}
	h.config.driver = tx.drv
	return h
}

// String implements the fmt.Stringer.
func (h *Hostname) String() string {
	var builder strings.Builder
	builder.WriteString("Hostname(")
	builder.WriteString(fmt.Sprintf("id=%v", h.ID))
	builder.WriteString(", name=")
	builder.WriteString(h.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Hostnames is a parsable slice of Hostname.
type Hostnames []*Hostname

func (h Hostnames) config(cfg config) {
	for _i := range h {
		h[_i].config = cfg
	}
}
