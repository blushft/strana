// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/blushft/strana/platform/store/reporter/ent/app"
	"github.com/blushft/strana/platform/store/reporter/ent/hostname"
	"github.com/blushft/strana/platform/store/reporter/ent/pagestat"
	"github.com/blushft/strana/platform/store/reporter/ent/pathname"
	"github.com/blushft/strana/platform/store/reporter/ent/predicate"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// PageStatUpdate is the builder for updating PageStat entities.
type PageStatUpdate struct {
	config
	hooks      []Hook
	mutation   *PageStatMutation
	predicates []predicate.PageStat
}

// Where adds a new predicate for the builder.
func (psu *PageStatUpdate) Where(ps ...predicate.PageStat) *PageStatUpdate {
	psu.predicates = append(psu.predicates, ps...)
	return psu
}

// SetPageviews sets the pageviews field.
func (psu *PageStatUpdate) SetPageviews(i int) *PageStatUpdate {
	psu.mutation.ResetPageviews()
	psu.mutation.SetPageviews(i)
	return psu
}

// AddPageviews adds i to pageviews.
func (psu *PageStatUpdate) AddPageviews(i int) *PageStatUpdate {
	psu.mutation.AddPageviews(i)
	return psu
}

// SetVisitors sets the visitors field.
func (psu *PageStatUpdate) SetVisitors(i int) *PageStatUpdate {
	psu.mutation.ResetVisitors()
	psu.mutation.SetVisitors(i)
	return psu
}

// AddVisitors adds i to visitors.
func (psu *PageStatUpdate) AddVisitors(i int) *PageStatUpdate {
	psu.mutation.AddVisitors(i)
	return psu
}

// SetEntries sets the entries field.
func (psu *PageStatUpdate) SetEntries(i int) *PageStatUpdate {
	psu.mutation.ResetEntries()
	psu.mutation.SetEntries(i)
	return psu
}

// AddEntries adds i to entries.
func (psu *PageStatUpdate) AddEntries(i int) *PageStatUpdate {
	psu.mutation.AddEntries(i)
	return psu
}

// SetBounceRate sets the bounce_rate field.
func (psu *PageStatUpdate) SetBounceRate(f float64) *PageStatUpdate {
	psu.mutation.ResetBounceRate()
	psu.mutation.SetBounceRate(f)
	return psu
}

// AddBounceRate adds f to bounce_rate.
func (psu *PageStatUpdate) AddBounceRate(f float64) *PageStatUpdate {
	psu.mutation.AddBounceRate(f)
	return psu
}

// SetKnownDurations sets the known_durations field.
func (psu *PageStatUpdate) SetKnownDurations(i int) *PageStatUpdate {
	psu.mutation.ResetKnownDurations()
	psu.mutation.SetKnownDurations(i)
	return psu
}

// SetNillableKnownDurations sets the known_durations field if the given value is not nil.
func (psu *PageStatUpdate) SetNillableKnownDurations(i *int) *PageStatUpdate {
	if i != nil {
		psu.SetKnownDurations(*i)
	}
	return psu
}

// AddKnownDurations adds i to known_durations.
func (psu *PageStatUpdate) AddKnownDurations(i int) *PageStatUpdate {
	psu.mutation.AddKnownDurations(i)
	return psu
}

// SetAvgDuration sets the avg_duration field.
func (psu *PageStatUpdate) SetAvgDuration(f float64) *PageStatUpdate {
	psu.mutation.ResetAvgDuration()
	psu.mutation.SetAvgDuration(f)
	return psu
}

// AddAvgDuration adds f to avg_duration.
func (psu *PageStatUpdate) AddAvgDuration(f float64) *PageStatUpdate {
	psu.mutation.AddAvgDuration(f)
	return psu
}

// SetDate sets the date field.
func (psu *PageStatUpdate) SetDate(t time.Time) *PageStatUpdate {
	psu.mutation.SetDate(t)
	return psu
}

// SetAppID sets the app edge to App by id.
func (psu *PageStatUpdate) SetAppID(id int) *PageStatUpdate {
	psu.mutation.SetAppID(id)
	return psu
}

// SetApp sets the app edge to App.
func (psu *PageStatUpdate) SetApp(a *App) *PageStatUpdate {
	return psu.SetAppID(a.ID)
}

// SetHostnameID sets the hostname edge to Hostname by id.
func (psu *PageStatUpdate) SetHostnameID(id int) *PageStatUpdate {
	psu.mutation.SetHostnameID(id)
	return psu
}

// SetHostname sets the hostname edge to Hostname.
func (psu *PageStatUpdate) SetHostname(h *Hostname) *PageStatUpdate {
	return psu.SetHostnameID(h.ID)
}

// SetPathnameID sets the pathname edge to Pathname by id.
func (psu *PageStatUpdate) SetPathnameID(id int) *PageStatUpdate {
	psu.mutation.SetPathnameID(id)
	return psu
}

// SetPathname sets the pathname edge to Pathname.
func (psu *PageStatUpdate) SetPathname(p *Pathname) *PageStatUpdate {
	return psu.SetPathnameID(p.ID)
}

// Mutation returns the PageStatMutation object of the builder.
func (psu *PageStatUpdate) Mutation() *PageStatMutation {
	return psu.mutation
}

// ClearApp clears the app edge to App.
func (psu *PageStatUpdate) ClearApp() *PageStatUpdate {
	psu.mutation.ClearApp()
	return psu
}

// ClearHostname clears the hostname edge to Hostname.
func (psu *PageStatUpdate) ClearHostname() *PageStatUpdate {
	psu.mutation.ClearHostname()
	return psu
}

// ClearPathname clears the pathname edge to Pathname.
func (psu *PageStatUpdate) ClearPathname() *PageStatUpdate {
	psu.mutation.ClearPathname()
	return psu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (psu *PageStatUpdate) Save(ctx context.Context) (int, error) {

	if _, ok := psu.mutation.AppID(); psu.mutation.AppCleared() && !ok {
		return 0, errors.New("ent: clearing a unique edge \"app\"")
	}

	if _, ok := psu.mutation.HostnameID(); psu.mutation.HostnameCleared() && !ok {
		return 0, errors.New("ent: clearing a unique edge \"hostname\"")
	}

	if _, ok := psu.mutation.PathnameID(); psu.mutation.PathnameCleared() && !ok {
		return 0, errors.New("ent: clearing a unique edge \"pathname\"")
	}
	var (
		err      error
		affected int
	)
	if len(psu.hooks) == 0 {
		affected, err = psu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PageStatMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			psu.mutation = mutation
			affected, err = psu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(psu.hooks) - 1; i >= 0; i-- {
			mut = psu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, psu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (psu *PageStatUpdate) SaveX(ctx context.Context) int {
	affected, err := psu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (psu *PageStatUpdate) Exec(ctx context.Context) error {
	_, err := psu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psu *PageStatUpdate) ExecX(ctx context.Context) {
	if err := psu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (psu *PageStatUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pagestat.Table,
			Columns: pagestat.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: pagestat.FieldID,
			},
		},
	}
	if ps := psu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psu.mutation.Pageviews(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pagestat.FieldPageviews,
		})
	}
	if value, ok := psu.mutation.AddedPageviews(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pagestat.FieldPageviews,
		})
	}
	if value, ok := psu.mutation.Visitors(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pagestat.FieldVisitors,
		})
	}
	if value, ok := psu.mutation.AddedVisitors(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pagestat.FieldVisitors,
		})
	}
	if value, ok := psu.mutation.Entries(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pagestat.FieldEntries,
		})
	}
	if value, ok := psu.mutation.AddedEntries(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pagestat.FieldEntries,
		})
	}
	if value, ok := psu.mutation.BounceRate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: pagestat.FieldBounceRate,
		})
	}
	if value, ok := psu.mutation.AddedBounceRate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: pagestat.FieldBounceRate,
		})
	}
	if value, ok := psu.mutation.KnownDurations(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pagestat.FieldKnownDurations,
		})
	}
	if value, ok := psu.mutation.AddedKnownDurations(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pagestat.FieldKnownDurations,
		})
	}
	if value, ok := psu.mutation.AvgDuration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: pagestat.FieldAvgDuration,
		})
	}
	if value, ok := psu.mutation.AddedAvgDuration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: pagestat.FieldAvgDuration,
		})
	}
	if value, ok := psu.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pagestat.FieldDate,
		})
	}
	if psu.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pagestat.AppTable,
			Columns: []string{pagestat.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pagestat.AppTable,
			Columns: []string{pagestat.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.HostnameCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pagestat.HostnameTable,
			Columns: []string{pagestat.HostnameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: hostname.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.HostnameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pagestat.HostnameTable,
			Columns: []string{pagestat.HostnameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: hostname.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.PathnameCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pagestat.PathnameTable,
			Columns: []string{pagestat.PathnameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pathname.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.PathnameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pagestat.PathnameTable,
			Columns: []string{pagestat.PathnameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pathname.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, psu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pagestat.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PageStatUpdateOne is the builder for updating a single PageStat entity.
type PageStatUpdateOne struct {
	config
	hooks    []Hook
	mutation *PageStatMutation
}

// SetPageviews sets the pageviews field.
func (psuo *PageStatUpdateOne) SetPageviews(i int) *PageStatUpdateOne {
	psuo.mutation.ResetPageviews()
	psuo.mutation.SetPageviews(i)
	return psuo
}

// AddPageviews adds i to pageviews.
func (psuo *PageStatUpdateOne) AddPageviews(i int) *PageStatUpdateOne {
	psuo.mutation.AddPageviews(i)
	return psuo
}

// SetVisitors sets the visitors field.
func (psuo *PageStatUpdateOne) SetVisitors(i int) *PageStatUpdateOne {
	psuo.mutation.ResetVisitors()
	psuo.mutation.SetVisitors(i)
	return psuo
}

// AddVisitors adds i to visitors.
func (psuo *PageStatUpdateOne) AddVisitors(i int) *PageStatUpdateOne {
	psuo.mutation.AddVisitors(i)
	return psuo
}

// SetEntries sets the entries field.
func (psuo *PageStatUpdateOne) SetEntries(i int) *PageStatUpdateOne {
	psuo.mutation.ResetEntries()
	psuo.mutation.SetEntries(i)
	return psuo
}

// AddEntries adds i to entries.
func (psuo *PageStatUpdateOne) AddEntries(i int) *PageStatUpdateOne {
	psuo.mutation.AddEntries(i)
	return psuo
}

// SetBounceRate sets the bounce_rate field.
func (psuo *PageStatUpdateOne) SetBounceRate(f float64) *PageStatUpdateOne {
	psuo.mutation.ResetBounceRate()
	psuo.mutation.SetBounceRate(f)
	return psuo
}

// AddBounceRate adds f to bounce_rate.
func (psuo *PageStatUpdateOne) AddBounceRate(f float64) *PageStatUpdateOne {
	psuo.mutation.AddBounceRate(f)
	return psuo
}

// SetKnownDurations sets the known_durations field.
func (psuo *PageStatUpdateOne) SetKnownDurations(i int) *PageStatUpdateOne {
	psuo.mutation.ResetKnownDurations()
	psuo.mutation.SetKnownDurations(i)
	return psuo
}

// SetNillableKnownDurations sets the known_durations field if the given value is not nil.
func (psuo *PageStatUpdateOne) SetNillableKnownDurations(i *int) *PageStatUpdateOne {
	if i != nil {
		psuo.SetKnownDurations(*i)
	}
	return psuo
}

// AddKnownDurations adds i to known_durations.
func (psuo *PageStatUpdateOne) AddKnownDurations(i int) *PageStatUpdateOne {
	psuo.mutation.AddKnownDurations(i)
	return psuo
}

// SetAvgDuration sets the avg_duration field.
func (psuo *PageStatUpdateOne) SetAvgDuration(f float64) *PageStatUpdateOne {
	psuo.mutation.ResetAvgDuration()
	psuo.mutation.SetAvgDuration(f)
	return psuo
}

// AddAvgDuration adds f to avg_duration.
func (psuo *PageStatUpdateOne) AddAvgDuration(f float64) *PageStatUpdateOne {
	psuo.mutation.AddAvgDuration(f)
	return psuo
}

// SetDate sets the date field.
func (psuo *PageStatUpdateOne) SetDate(t time.Time) *PageStatUpdateOne {
	psuo.mutation.SetDate(t)
	return psuo
}

// SetAppID sets the app edge to App by id.
func (psuo *PageStatUpdateOne) SetAppID(id int) *PageStatUpdateOne {
	psuo.mutation.SetAppID(id)
	return psuo
}

// SetApp sets the app edge to App.
func (psuo *PageStatUpdateOne) SetApp(a *App) *PageStatUpdateOne {
	return psuo.SetAppID(a.ID)
}

// SetHostnameID sets the hostname edge to Hostname by id.
func (psuo *PageStatUpdateOne) SetHostnameID(id int) *PageStatUpdateOne {
	psuo.mutation.SetHostnameID(id)
	return psuo
}

// SetHostname sets the hostname edge to Hostname.
func (psuo *PageStatUpdateOne) SetHostname(h *Hostname) *PageStatUpdateOne {
	return psuo.SetHostnameID(h.ID)
}

// SetPathnameID sets the pathname edge to Pathname by id.
func (psuo *PageStatUpdateOne) SetPathnameID(id int) *PageStatUpdateOne {
	psuo.mutation.SetPathnameID(id)
	return psuo
}

// SetPathname sets the pathname edge to Pathname.
func (psuo *PageStatUpdateOne) SetPathname(p *Pathname) *PageStatUpdateOne {
	return psuo.SetPathnameID(p.ID)
}

// Mutation returns the PageStatMutation object of the builder.
func (psuo *PageStatUpdateOne) Mutation() *PageStatMutation {
	return psuo.mutation
}

// ClearApp clears the app edge to App.
func (psuo *PageStatUpdateOne) ClearApp() *PageStatUpdateOne {
	psuo.mutation.ClearApp()
	return psuo
}

// ClearHostname clears the hostname edge to Hostname.
func (psuo *PageStatUpdateOne) ClearHostname() *PageStatUpdateOne {
	psuo.mutation.ClearHostname()
	return psuo
}

// ClearPathname clears the pathname edge to Pathname.
func (psuo *PageStatUpdateOne) ClearPathname() *PageStatUpdateOne {
	psuo.mutation.ClearPathname()
	return psuo
}

// Save executes the query and returns the updated entity.
func (psuo *PageStatUpdateOne) Save(ctx context.Context) (*PageStat, error) {

	if _, ok := psuo.mutation.AppID(); psuo.mutation.AppCleared() && !ok {
		return nil, errors.New("ent: clearing a unique edge \"app\"")
	}

	if _, ok := psuo.mutation.HostnameID(); psuo.mutation.HostnameCleared() && !ok {
		return nil, errors.New("ent: clearing a unique edge \"hostname\"")
	}

	if _, ok := psuo.mutation.PathnameID(); psuo.mutation.PathnameCleared() && !ok {
		return nil, errors.New("ent: clearing a unique edge \"pathname\"")
	}
	var (
		err  error
		node *PageStat
	)
	if len(psuo.hooks) == 0 {
		node, err = psuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PageStatMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			psuo.mutation = mutation
			node, err = psuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(psuo.hooks) - 1; i >= 0; i-- {
			mut = psuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, psuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (psuo *PageStatUpdateOne) SaveX(ctx context.Context) *PageStat {
	ps, err := psuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return ps
}

// Exec executes the query on the entity.
func (psuo *PageStatUpdateOne) Exec(ctx context.Context) error {
	_, err := psuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psuo *PageStatUpdateOne) ExecX(ctx context.Context) {
	if err := psuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (psuo *PageStatUpdateOne) sqlSave(ctx context.Context) (ps *PageStat, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pagestat.Table,
			Columns: pagestat.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: pagestat.FieldID,
			},
		},
	}
	id, ok := psuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing PageStat.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := psuo.mutation.Pageviews(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pagestat.FieldPageviews,
		})
	}
	if value, ok := psuo.mutation.AddedPageviews(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pagestat.FieldPageviews,
		})
	}
	if value, ok := psuo.mutation.Visitors(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pagestat.FieldVisitors,
		})
	}
	if value, ok := psuo.mutation.AddedVisitors(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pagestat.FieldVisitors,
		})
	}
	if value, ok := psuo.mutation.Entries(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pagestat.FieldEntries,
		})
	}
	if value, ok := psuo.mutation.AddedEntries(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pagestat.FieldEntries,
		})
	}
	if value, ok := psuo.mutation.BounceRate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: pagestat.FieldBounceRate,
		})
	}
	if value, ok := psuo.mutation.AddedBounceRate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: pagestat.FieldBounceRate,
		})
	}
	if value, ok := psuo.mutation.KnownDurations(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pagestat.FieldKnownDurations,
		})
	}
	if value, ok := psuo.mutation.AddedKnownDurations(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pagestat.FieldKnownDurations,
		})
	}
	if value, ok := psuo.mutation.AvgDuration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: pagestat.FieldAvgDuration,
		})
	}
	if value, ok := psuo.mutation.AddedAvgDuration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: pagestat.FieldAvgDuration,
		})
	}
	if value, ok := psuo.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pagestat.FieldDate,
		})
	}
	if psuo.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pagestat.AppTable,
			Columns: []string{pagestat.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pagestat.AppTable,
			Columns: []string{pagestat.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.HostnameCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pagestat.HostnameTable,
			Columns: []string{pagestat.HostnameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: hostname.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.HostnameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pagestat.HostnameTable,
			Columns: []string{pagestat.HostnameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: hostname.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.PathnameCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pagestat.PathnameTable,
			Columns: []string{pagestat.PathnameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pathname.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.PathnameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pagestat.PathnameTable,
			Columns: []string{pagestat.PathnameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pathname.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	ps = &PageStat{config: psuo.config}
	_spec.Assign = ps.assignValues
	_spec.ScanValues = ps.scanValues()
	if err = sqlgraph.UpdateNode(ctx, psuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pagestat.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return ps, nil
}
