// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/blushft/strana/platform/store/reporter/ent/app"
	"github.com/blushft/strana/platform/store/reporter/ent/appstat"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// AppStatCreate is the builder for creating a AppStat entity.
type AppStatCreate struct {
	config
	mutation *AppStatMutation
	hooks    []Hook
}

// SetPageviews sets the pageviews field.
func (asc *AppStatCreate) SetPageviews(i int) *AppStatCreate {
	asc.mutation.SetPageviews(i)
	return asc
}

// SetVisitors sets the visitors field.
func (asc *AppStatCreate) SetVisitors(i int) *AppStatCreate {
	asc.mutation.SetVisitors(i)
	return asc
}

// SetSessions sets the sessions field.
func (asc *AppStatCreate) SetSessions(i int) *AppStatCreate {
	asc.mutation.SetSessions(i)
	return asc
}

// SetBouceRate sets the bouce_rate field.
func (asc *AppStatCreate) SetBouceRate(f float64) *AppStatCreate {
	asc.mutation.SetBouceRate(f)
	return asc
}

// SetKnownDurations sets the known_durations field.
func (asc *AppStatCreate) SetKnownDurations(i int) *AppStatCreate {
	asc.mutation.SetKnownDurations(i)
	return asc
}

// SetAvgDuration sets the avg_duration field.
func (asc *AppStatCreate) SetAvgDuration(f float64) *AppStatCreate {
	asc.mutation.SetAvgDuration(f)
	return asc
}

// SetDate sets the date field.
func (asc *AppStatCreate) SetDate(t time.Time) *AppStatCreate {
	asc.mutation.SetDate(t)
	return asc
}

// SetAppID sets the app edge to App by id.
func (asc *AppStatCreate) SetAppID(id int) *AppStatCreate {
	asc.mutation.SetAppID(id)
	return asc
}

// SetNillableAppID sets the app edge to App by id if the given value is not nil.
func (asc *AppStatCreate) SetNillableAppID(id *int) *AppStatCreate {
	if id != nil {
		asc = asc.SetAppID(*id)
	}
	return asc
}

// SetApp sets the app edge to App.
func (asc *AppStatCreate) SetApp(a *App) *AppStatCreate {
	return asc.SetAppID(a.ID)
}

// Mutation returns the AppStatMutation object of the builder.
func (asc *AppStatCreate) Mutation() *AppStatMutation {
	return asc.mutation
}

// Save creates the AppStat in the database.
func (asc *AppStatCreate) Save(ctx context.Context) (*AppStat, error) {
	if err := asc.preSave(); err != nil {
		return nil, err
	}
	var (
		err  error
		node *AppStat
	)
	if len(asc.hooks) == 0 {
		node, err = asc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppStatMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			asc.mutation = mutation
			node, err = asc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(asc.hooks) - 1; i >= 0; i-- {
			mut = asc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, asc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (asc *AppStatCreate) SaveX(ctx context.Context) *AppStat {
	v, err := asc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (asc *AppStatCreate) preSave() error {
	if _, ok := asc.mutation.Pageviews(); !ok {
		return &ValidationError{Name: "pageviews", err: errors.New("ent: missing required field \"pageviews\"")}
	}
	if _, ok := asc.mutation.Visitors(); !ok {
		return &ValidationError{Name: "visitors", err: errors.New("ent: missing required field \"visitors\"")}
	}
	if _, ok := asc.mutation.Sessions(); !ok {
		return &ValidationError{Name: "sessions", err: errors.New("ent: missing required field \"sessions\"")}
	}
	if _, ok := asc.mutation.BouceRate(); !ok {
		return &ValidationError{Name: "bouce_rate", err: errors.New("ent: missing required field \"bouce_rate\"")}
	}
	if _, ok := asc.mutation.KnownDurations(); !ok {
		return &ValidationError{Name: "known_durations", err: errors.New("ent: missing required field \"known_durations\"")}
	}
	if _, ok := asc.mutation.AvgDuration(); !ok {
		return &ValidationError{Name: "avg_duration", err: errors.New("ent: missing required field \"avg_duration\"")}
	}
	if _, ok := asc.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New("ent: missing required field \"date\"")}
	}
	return nil
}

func (asc *AppStatCreate) sqlSave(ctx context.Context) (*AppStat, error) {
	as, _spec := asc.createSpec()
	if err := sqlgraph.CreateNode(ctx, asc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	as.ID = int(id)
	return as, nil
}

func (asc *AppStatCreate) createSpec() (*AppStat, *sqlgraph.CreateSpec) {
	var (
		as    = &AppStat{config: asc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: appstat.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: appstat.FieldID,
			},
		}
	)
	if value, ok := asc.mutation.Pageviews(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: appstat.FieldPageviews,
		})
		as.Pageviews = value
	}
	if value, ok := asc.mutation.Visitors(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: appstat.FieldVisitors,
		})
		as.Visitors = value
	}
	if value, ok := asc.mutation.Sessions(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: appstat.FieldSessions,
		})
		as.Sessions = value
	}
	if value, ok := asc.mutation.BouceRate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: appstat.FieldBouceRate,
		})
		as.BouceRate = value
	}
	if value, ok := asc.mutation.KnownDurations(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: appstat.FieldKnownDurations,
		})
		as.KnownDurations = value
	}
	if value, ok := asc.mutation.AvgDuration(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: appstat.FieldAvgDuration,
		})
		as.AvgDuration = value
	}
	if value, ok := asc.mutation.Date(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: appstat.FieldDate,
		})
		as.Date = value
	}
	if nodes := asc.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appstat.AppTable,
			Columns: []string{appstat.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return as, _spec
}

// AppStatCreateBulk is the builder for creating a bulk of AppStat entities.
type AppStatCreateBulk struct {
	config
	builders []*AppStatCreate
}

// Save creates the AppStat entities in the database.
func (ascb *AppStatCreateBulk) Save(ctx context.Context) ([]*AppStat, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ascb.builders))
	nodes := make([]*AppStat, len(ascb.builders))
	mutators := make([]Mutator, len(ascb.builders))
	for i := range ascb.builders {
		func(i int, root context.Context) {
			builder := ascb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				if err := builder.preSave(); err != nil {
					return nil, err
				}
				mutation, ok := m.(*AppStatMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ascb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ascb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ascb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (ascb *AppStatCreateBulk) SaveX(ctx context.Context) []*AppStat {
	v, err := ascb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
