// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"github.com/blushft/strana/platform/store/reporter/ent/app"
	"github.com/blushft/strana/platform/store/reporter/ent/pageview"
	"github.com/blushft/strana/platform/store/reporter/ent/session"
	"github.com/blushft/strana/platform/store/reporter/ent/user"
	"github.com/facebook/ent/dialect/sql"
	"github.com/google/uuid"
)

// PageView is the model entity for the PageView schema.
type PageView struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Hostname holds the value of the "hostname" field.
	Hostname string `json:"hostname,omitempty"`
	// Pathname holds the value of the "pathname" field.
	Pathname string `json:"pathname,omitempty"`
	// Referrer holds the value of the "referrer" field.
	Referrer string `json:"referrer,omitempty"`
	// IsEntry holds the value of the "is_entry" field.
	IsEntry bool `json:"is_entry,omitempty"`
	// IsFinished holds the value of the "is_finished" field.
	IsFinished bool `json:"is_finished,omitempty"`
	// Duration holds the value of the "duration" field.
	Duration int `json:"duration,omitempty"`
	// Timestamp holds the value of the "timestamp" field.
	Timestamp time.Time `json:"timestamp,omitempty"`
	// UserAgent holds the value of the "user_agent" field.
	UserAgent string `json:"user_agent,omitempty"`
	// IPAddress holds the value of the "ip_address" field.
	IPAddress string `json:"ip_address,omitempty"`
	// ScreenDim holds the value of the "screen_dim" field.
	ScreenDim string `json:"screen_dim,omitempty"`
	// Extra holds the value of the "extra" field.
	Extra map[string]interface{} `json:"extra,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PageViewQuery when eager-loading is set.
	Edges             PageViewEdges `json:"edges"`
	page_view_app     *int
	page_view_session *uuid.UUID
	page_view_user    *string
}

// PageViewEdges holds the relations/edges for other nodes in the graph.
type PageViewEdges struct {
	// App holds the value of the app edge.
	App *App
	// Session holds the value of the session edge.
	Session *Session
	// User holds the value of the user edge.
	User *User
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// AppOrErr returns the App value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PageViewEdges) AppOrErr() (*App, error) {
	if e.loadedTypes[0] {
		if e.App == nil {
			// The edge app was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: app.Label}
		}
		return e.App, nil
	}
	return nil, &NotLoadedError{edge: "app"}
}

// SessionOrErr returns the Session value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PageViewEdges) SessionOrErr() (*Session, error) {
	if e.loadedTypes[1] {
		if e.Session == nil {
			// The edge session was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: session.Label}
		}
		return e.Session, nil
	}
	return nil, &NotLoadedError{edge: "session"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PageViewEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[2] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PageView) scanValues() []interface{} {
	return []interface{}{
		&uuid.UUID{},      // id
		&sql.NullString{}, // hostname
		&sql.NullString{}, // pathname
		&sql.NullString{}, // referrer
		&sql.NullBool{},   // is_entry
		&sql.NullBool{},   // is_finished
		&sql.NullInt64{},  // duration
		&sql.NullTime{},   // timestamp
		&sql.NullString{}, // user_agent
		&sql.NullString{}, // ip_address
		&sql.NullString{}, // screen_dim
		&[]byte{},         // extra
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*PageView) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // page_view_app
		&uuid.UUID{},      // page_view_session
		&sql.NullString{}, // page_view_user
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PageView fields.
func (pv *PageView) assignValues(values ...interface{}) error {
	if m, n := len(values), len(pageview.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	if value, ok := values[0].(*uuid.UUID); !ok {
		return fmt.Errorf("unexpected type %T for field id", values[0])
	} else if value != nil {
		pv.ID = *value
	}
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field hostname", values[0])
	} else if value.Valid {
		pv.Hostname = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field pathname", values[1])
	} else if value.Valid {
		pv.Pathname = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field referrer", values[2])
	} else if value.Valid {
		pv.Referrer = value.String
	}
	if value, ok := values[3].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field is_entry", values[3])
	} else if value.Valid {
		pv.IsEntry = value.Bool
	}
	if value, ok := values[4].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field is_finished", values[4])
	} else if value.Valid {
		pv.IsFinished = value.Bool
	}
	if value, ok := values[5].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field duration", values[5])
	} else if value.Valid {
		pv.Duration = int(value.Int64)
	}
	if value, ok := values[6].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field timestamp", values[6])
	} else if value.Valid {
		pv.Timestamp = value.Time
	}
	if value, ok := values[7].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field user_agent", values[7])
	} else if value.Valid {
		pv.UserAgent = value.String
	}
	if value, ok := values[8].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field ip_address", values[8])
	} else if value.Valid {
		pv.IPAddress = value.String
	}
	if value, ok := values[9].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field screen_dim", values[9])
	} else if value.Valid {
		pv.ScreenDim = value.String
	}

	if value, ok := values[10].(*[]byte); !ok {
		return fmt.Errorf("unexpected type %T for field extra", values[10])
	} else if value != nil && len(*value) > 0 {
		if err := json.Unmarshal(*value, &pv.Extra); err != nil {
			return fmt.Errorf("unmarshal field extra: %v", err)
		}
	}
	values = values[11:]
	if len(values) == len(pageview.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field page_view_app", value)
		} else if value.Valid {
			pv.page_view_app = new(int)
			*pv.page_view_app = int(value.Int64)
		}
		if value, ok := values[1].(*uuid.UUID); !ok {
			return fmt.Errorf("unexpected type %T for field page_view_session", values[1])
		} else if value != nil {
			pv.page_view_session = value
		}
		if value, ok := values[2].(*sql.NullString); !ok {
			return fmt.Errorf("unexpected type %T for field page_view_user", values[2])
		} else if value.Valid {
			pv.page_view_user = new(string)
			*pv.page_view_user = value.String
		}
	}
	return nil
}

// QueryApp queries the app edge of the PageView.
func (pv *PageView) QueryApp() *AppQuery {
	return (&PageViewClient{config: pv.config}).QueryApp(pv)
}

// QuerySession queries the session edge of the PageView.
func (pv *PageView) QuerySession() *SessionQuery {
	return (&PageViewClient{config: pv.config}).QuerySession(pv)
}

// QueryUser queries the user edge of the PageView.
func (pv *PageView) QueryUser() *UserQuery {
	return (&PageViewClient{config: pv.config}).QueryUser(pv)
}

// Update returns a builder for updating this PageView.
// Note that, you need to call PageView.Unwrap() before calling this method, if this PageView
// was returned from a transaction, and the transaction was committed or rolled back.
func (pv *PageView) Update() *PageViewUpdateOne {
	return (&PageViewClient{config: pv.config}).UpdateOne(pv)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (pv *PageView) Unwrap() *PageView {
	tx, ok := pv.config.driver.(*txDriver)
	if !ok {
		panic("ent: PageView is not a transactional entity")
	}
	pv.config.driver = tx.drv
	return pv
}

// String implements the fmt.Stringer.
func (pv *PageView) String() string {
	var builder strings.Builder
	builder.WriteString("PageView(")
	builder.WriteString(fmt.Sprintf("id=%v", pv.ID))
	builder.WriteString(", hostname=")
	builder.WriteString(pv.Hostname)
	builder.WriteString(", pathname=")
	builder.WriteString(pv.Pathname)
	builder.WriteString(", referrer=")
	builder.WriteString(pv.Referrer)
	builder.WriteString(", is_entry=")
	builder.WriteString(fmt.Sprintf("%v", pv.IsEntry))
	builder.WriteString(", is_finished=")
	builder.WriteString(fmt.Sprintf("%v", pv.IsFinished))
	builder.WriteString(", duration=")
	builder.WriteString(fmt.Sprintf("%v", pv.Duration))
	builder.WriteString(", timestamp=")
	builder.WriteString(pv.Timestamp.Format(time.ANSIC))
	builder.WriteString(", user_agent=")
	builder.WriteString(pv.UserAgent)
	builder.WriteString(", ip_address=")
	builder.WriteString(pv.IPAddress)
	builder.WriteString(", screen_dim=")
	builder.WriteString(pv.ScreenDim)
	builder.WriteString(", extra=")
	builder.WriteString(fmt.Sprintf("%v", pv.Extra))
	builder.WriteByte(')')
	return builder.String()
}

// PageViews is a parsable slice of PageView.
type PageViews []*PageView

func (pv PageViews) config(cfg config) {
	for _i := range pv {
		pv[_i].config = cfg
	}
}
