// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/blushft/strana/platform/store/reporter/ent/app"
	"github.com/blushft/strana/platform/store/reporter/ent/hostname"
	"github.com/blushft/strana/platform/store/reporter/ent/pagestat"
	"github.com/blushft/strana/platform/store/reporter/ent/pathname"
	"github.com/facebook/ent/dialect/sql"
)

// PageStat is the model entity for the PageStat schema.
type PageStat struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Pageviews holds the value of the "pageviews" field.
	Pageviews int `json:"pageviews,omitempty"`
	// Visitors holds the value of the "visitors" field.
	Visitors int `json:"visitors,omitempty"`
	// Entries holds the value of the "entries" field.
	Entries int `json:"entries,omitempty"`
	// BounceRate holds the value of the "bounce_rate" field.
	BounceRate float64 `json:"bounce_rate,omitempty"`
	// KnownDurations holds the value of the "known_durations" field.
	KnownDurations int `json:"known_durations,omitempty"`
	// AvgDuration holds the value of the "avg_duration" field.
	AvgDuration float64 `json:"avg_duration,omitempty"`
	// Date holds the value of the "date" field.
	Date time.Time `json:"date,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PageStatQuery when eager-loading is set.
	Edges               PageStatEdges `json:"edges"`
	app_page_stats      *int
	hostname_page_stats *int
	pathname_page_stats *int
}

// PageStatEdges holds the relations/edges for other nodes in the graph.
type PageStatEdges struct {
	// App holds the value of the app edge.
	App *App
	// Hostname holds the value of the hostname edge.
	Hostname *Hostname
	// Pathname holds the value of the pathname edge.
	Pathname *Pathname
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// AppOrErr returns the App value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PageStatEdges) AppOrErr() (*App, error) {
	if e.loadedTypes[0] {
		if e.App == nil {
			// The edge app was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: app.Label}
		}
		return e.App, nil
	}
	return nil, &NotLoadedError{edge: "app"}
}

// HostnameOrErr returns the Hostname value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PageStatEdges) HostnameOrErr() (*Hostname, error) {
	if e.loadedTypes[1] {
		if e.Hostname == nil {
			// The edge hostname was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: hostname.Label}
		}
		return e.Hostname, nil
	}
	return nil, &NotLoadedError{edge: "hostname"}
}

// PathnameOrErr returns the Pathname value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PageStatEdges) PathnameOrErr() (*Pathname, error) {
	if e.loadedTypes[2] {
		if e.Pathname == nil {
			// The edge pathname was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: pathname.Label}
		}
		return e.Pathname, nil
	}
	return nil, &NotLoadedError{edge: "pathname"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PageStat) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},   // id
		&sql.NullInt64{},   // pageviews
		&sql.NullInt64{},   // visitors
		&sql.NullInt64{},   // entries
		&sql.NullFloat64{}, // bounce_rate
		&sql.NullInt64{},   // known_durations
		&sql.NullFloat64{}, // avg_duration
		&sql.NullTime{},    // date
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*PageStat) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // app_page_stats
		&sql.NullInt64{}, // hostname_page_stats
		&sql.NullInt64{}, // pathname_page_stats
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PageStat fields.
func (ps *PageStat) assignValues(values ...interface{}) error {
	if m, n := len(values), len(pagestat.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	ps.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field pageviews", values[0])
	} else if value.Valid {
		ps.Pageviews = int(value.Int64)
	}
	if value, ok := values[1].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field visitors", values[1])
	} else if value.Valid {
		ps.Visitors = int(value.Int64)
	}
	if value, ok := values[2].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field entries", values[2])
	} else if value.Valid {
		ps.Entries = int(value.Int64)
	}
	if value, ok := values[3].(*sql.NullFloat64); !ok {
		return fmt.Errorf("unexpected type %T for field bounce_rate", values[3])
	} else if value.Valid {
		ps.BounceRate = value.Float64
	}
	if value, ok := values[4].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field known_durations", values[4])
	} else if value.Valid {
		ps.KnownDurations = int(value.Int64)
	}
	if value, ok := values[5].(*sql.NullFloat64); !ok {
		return fmt.Errorf("unexpected type %T for field avg_duration", values[5])
	} else if value.Valid {
		ps.AvgDuration = value.Float64
	}
	if value, ok := values[6].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field date", values[6])
	} else if value.Valid {
		ps.Date = value.Time
	}
	values = values[7:]
	if len(values) == len(pagestat.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field app_page_stats", value)
		} else if value.Valid {
			ps.app_page_stats = new(int)
			*ps.app_page_stats = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field hostname_page_stats", value)
		} else if value.Valid {
			ps.hostname_page_stats = new(int)
			*ps.hostname_page_stats = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field pathname_page_stats", value)
		} else if value.Valid {
			ps.pathname_page_stats = new(int)
			*ps.pathname_page_stats = int(value.Int64)
		}
	}
	return nil
}

// QueryApp queries the app edge of the PageStat.
func (ps *PageStat) QueryApp() *AppQuery {
	return (&PageStatClient{config: ps.config}).QueryApp(ps)
}

// QueryHostname queries the hostname edge of the PageStat.
func (ps *PageStat) QueryHostname() *HostnameQuery {
	return (&PageStatClient{config: ps.config}).QueryHostname(ps)
}

// QueryPathname queries the pathname edge of the PageStat.
func (ps *PageStat) QueryPathname() *PathnameQuery {
	return (&PageStatClient{config: ps.config}).QueryPathname(ps)
}

// Update returns a builder for updating this PageStat.
// Note that, you need to call PageStat.Unwrap() before calling this method, if this PageStat
// was returned from a transaction, and the transaction was committed or rolled back.
func (ps *PageStat) Update() *PageStatUpdateOne {
	return (&PageStatClient{config: ps.config}).UpdateOne(ps)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (ps *PageStat) Unwrap() *PageStat {
	tx, ok := ps.config.driver.(*txDriver)
	if !ok {
		panic("ent: PageStat is not a transactional entity")
	}
	ps.config.driver = tx.drv
	return ps
}

// String implements the fmt.Stringer.
func (ps *PageStat) String() string {
	var builder strings.Builder
	builder.WriteString("PageStat(")
	builder.WriteString(fmt.Sprintf("id=%v", ps.ID))
	builder.WriteString(", pageviews=")
	builder.WriteString(fmt.Sprintf("%v", ps.Pageviews))
	builder.WriteString(", visitors=")
	builder.WriteString(fmt.Sprintf("%v", ps.Visitors))
	builder.WriteString(", entries=")
	builder.WriteString(fmt.Sprintf("%v", ps.Entries))
	builder.WriteString(", bounce_rate=")
	builder.WriteString(fmt.Sprintf("%v", ps.BounceRate))
	builder.WriteString(", known_durations=")
	builder.WriteString(fmt.Sprintf("%v", ps.KnownDurations))
	builder.WriteString(", avg_duration=")
	builder.WriteString(fmt.Sprintf("%v", ps.AvgDuration))
	builder.WriteString(", date=")
	builder.WriteString(ps.Date.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// PageStats is a parsable slice of PageStat.
type PageStats []*PageStat

func (ps PageStats) config(cfg config) {
	for _i := range ps {
		ps[_i].config = cfg
	}
}
