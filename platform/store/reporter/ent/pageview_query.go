// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"github.com/blushft/strana/platform/store/reporter/ent/app"
	"github.com/blushft/strana/platform/store/reporter/ent/pageview"
	"github.com/blushft/strana/platform/store/reporter/ent/predicate"
	"github.com/blushft/strana/platform/store/reporter/ent/session"
	"github.com/blushft/strana/platform/store/reporter/ent/user"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/google/uuid"
)

// PageViewQuery is the builder for querying PageView entities.
type PageViewQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	unique     []string
	predicates []predicate.PageView
	// eager-loading edges.
	withApp     *AppQuery
	withSession *SessionQuery
	withUser    *UserQuery
	withFKs     bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the builder.
func (pvq *PageViewQuery) Where(ps ...predicate.PageView) *PageViewQuery {
	pvq.predicates = append(pvq.predicates, ps...)
	return pvq
}

// Limit adds a limit step to the query.
func (pvq *PageViewQuery) Limit(limit int) *PageViewQuery {
	pvq.limit = &limit
	return pvq
}

// Offset adds an offset step to the query.
func (pvq *PageViewQuery) Offset(offset int) *PageViewQuery {
	pvq.offset = &offset
	return pvq
}

// Order adds an order step to the query.
func (pvq *PageViewQuery) Order(o ...OrderFunc) *PageViewQuery {
	pvq.order = append(pvq.order, o...)
	return pvq
}

// QueryApp chains the current query on the app edge.
func (pvq *PageViewQuery) QueryApp() *AppQuery {
	query := &AppQuery{config: pvq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pvq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(pageview.Table, pageview.FieldID, pvq.sqlQuery()),
			sqlgraph.To(app.Table, app.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, pageview.AppTable, pageview.AppColumn),
		)
		fromU = sqlgraph.SetNeighbors(pvq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySession chains the current query on the session edge.
func (pvq *PageViewQuery) QuerySession() *SessionQuery {
	query := &SessionQuery{config: pvq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pvq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(pageview.Table, pageview.FieldID, pvq.sqlQuery()),
			sqlgraph.To(session.Table, session.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, pageview.SessionTable, pageview.SessionColumn),
		)
		fromU = sqlgraph.SetNeighbors(pvq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUser chains the current query on the user edge.
func (pvq *PageViewQuery) QueryUser() *UserQuery {
	query := &UserQuery{config: pvq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pvq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(pageview.Table, pageview.FieldID, pvq.sqlQuery()),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, pageview.UserTable, pageview.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(pvq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first PageView entity in the query. Returns *NotFoundError when no pageview was found.
func (pvq *PageViewQuery) First(ctx context.Context) (*PageView, error) {
	pvs, err := pvq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(pvs) == 0 {
		return nil, &NotFoundError{pageview.Label}
	}
	return pvs[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (pvq *PageViewQuery) FirstX(ctx context.Context) *PageView {
	pv, err := pvq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return pv
}

// FirstID returns the first PageView id in the query. Returns *NotFoundError when no id was found.
func (pvq *PageViewQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = pvq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{pageview.Label}
		return
	}
	return ids[0], nil
}

// FirstXID is like FirstID, but panics if an error occurs.
func (pvq *PageViewQuery) FirstXID(ctx context.Context) uuid.UUID {
	id, err := pvq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only PageView entity in the query, returns an error if not exactly one entity was returned.
func (pvq *PageViewQuery) Only(ctx context.Context) (*PageView, error) {
	pvs, err := pvq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(pvs) {
	case 1:
		return pvs[0], nil
	case 0:
		return nil, &NotFoundError{pageview.Label}
	default:
		return nil, &NotSingularError{pageview.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (pvq *PageViewQuery) OnlyX(ctx context.Context) *PageView {
	pv, err := pvq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return pv
}

// OnlyID returns the only PageView id in the query, returns an error if not exactly one id was returned.
func (pvq *PageViewQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = pvq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{pageview.Label}
	default:
		err = &NotSingularError{pageview.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (pvq *PageViewQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := pvq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of PageViews.
func (pvq *PageViewQuery) All(ctx context.Context) ([]*PageView, error) {
	if err := pvq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return pvq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (pvq *PageViewQuery) AllX(ctx context.Context) []*PageView {
	pvs, err := pvq.All(ctx)
	if err != nil {
		panic(err)
	}
	return pvs
}

// IDs executes the query and returns a list of PageView ids.
func (pvq *PageViewQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
	var ids []uuid.UUID
	if err := pvq.Select(pageview.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (pvq *PageViewQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := pvq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (pvq *PageViewQuery) Count(ctx context.Context) (int, error) {
	if err := pvq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return pvq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (pvq *PageViewQuery) CountX(ctx context.Context) int {
	count, err := pvq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (pvq *PageViewQuery) Exist(ctx context.Context) (bool, error) {
	if err := pvq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return pvq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (pvq *PageViewQuery) ExistX(ctx context.Context) bool {
	exist, err := pvq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (pvq *PageViewQuery) Clone() *PageViewQuery {
	return &PageViewQuery{
		config:     pvq.config,
		limit:      pvq.limit,
		offset:     pvq.offset,
		order:      append([]OrderFunc{}, pvq.order...),
		unique:     append([]string{}, pvq.unique...),
		predicates: append([]predicate.PageView{}, pvq.predicates...),
		// clone intermediate query.
		sql:  pvq.sql.Clone(),
		path: pvq.path,
	}
}

//  WithApp tells the query-builder to eager-loads the nodes that are connected to
// the "app" edge. The optional arguments used to configure the query builder of the edge.
func (pvq *PageViewQuery) WithApp(opts ...func(*AppQuery)) *PageViewQuery {
	query := &AppQuery{config: pvq.config}
	for _, opt := range opts {
		opt(query)
	}
	pvq.withApp = query
	return pvq
}

//  WithSession tells the query-builder to eager-loads the nodes that are connected to
// the "session" edge. The optional arguments used to configure the query builder of the edge.
func (pvq *PageViewQuery) WithSession(opts ...func(*SessionQuery)) *PageViewQuery {
	query := &SessionQuery{config: pvq.config}
	for _, opt := range opts {
		opt(query)
	}
	pvq.withSession = query
	return pvq
}

//  WithUser tells the query-builder to eager-loads the nodes that are connected to
// the "user" edge. The optional arguments used to configure the query builder of the edge.
func (pvq *PageViewQuery) WithUser(opts ...func(*UserQuery)) *PageViewQuery {
	query := &UserQuery{config: pvq.config}
	for _, opt := range opts {
		opt(query)
	}
	pvq.withUser = query
	return pvq
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Hostname string `json:"hostname,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.PageView.Query().
//		GroupBy(pageview.FieldHostname).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (pvq *PageViewQuery) GroupBy(field string, fields ...string) *PageViewGroupBy {
	group := &PageViewGroupBy{config: pvq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := pvq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return pvq.sqlQuery(), nil
	}
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		Hostname string `json:"hostname,omitempty"`
//	}
//
//	client.PageView.Query().
//		Select(pageview.FieldHostname).
//		Scan(ctx, &v)
//
func (pvq *PageViewQuery) Select(field string, fields ...string) *PageViewSelect {
	selector := &PageViewSelect{config: pvq.config}
	selector.fields = append([]string{field}, fields...)
	selector.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := pvq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return pvq.sqlQuery(), nil
	}
	return selector
}

func (pvq *PageViewQuery) prepareQuery(ctx context.Context) error {
	if pvq.path != nil {
		prev, err := pvq.path(ctx)
		if err != nil {
			return err
		}
		pvq.sql = prev
	}
	return nil
}

func (pvq *PageViewQuery) sqlAll(ctx context.Context) ([]*PageView, error) {
	var (
		nodes       = []*PageView{}
		withFKs     = pvq.withFKs
		_spec       = pvq.querySpec()
		loadedTypes = [3]bool{
			pvq.withApp != nil,
			pvq.withSession != nil,
			pvq.withUser != nil,
		}
	)
	if pvq.withApp != nil || pvq.withSession != nil || pvq.withUser != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, pageview.ForeignKeys...)
	}
	_spec.ScanValues = func() []interface{} {
		node := &PageView{config: pvq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		if withFKs {
			values = append(values, node.fkValues()...)
		}
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, pvq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := pvq.withApp; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*PageView)
		for i := range nodes {
			if fk := nodes[i].page_view_app; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(app.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "page_view_app" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.App = n
			}
		}
	}

	if query := pvq.withSession; query != nil {
		ids := make([]uuid.UUID, 0, len(nodes))
		nodeids := make(map[uuid.UUID][]*PageView)
		for i := range nodes {
			if fk := nodes[i].page_view_session; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(session.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "page_view_session" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Session = n
			}
		}
	}

	if query := pvq.withUser; query != nil {
		ids := make([]string, 0, len(nodes))
		nodeids := make(map[string][]*PageView)
		for i := range nodes {
			if fk := nodes[i].page_view_user; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(user.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "page_view_user" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.User = n
			}
		}
	}

	return nodes, nil
}

func (pvq *PageViewQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := pvq.querySpec()
	return sqlgraph.CountNodes(ctx, pvq.driver, _spec)
}

func (pvq *PageViewQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := pvq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (pvq *PageViewQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pageview.Table,
			Columns: pageview.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: pageview.FieldID,
			},
		},
		From:   pvq.sql,
		Unique: true,
	}
	if ps := pvq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := pvq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := pvq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := pvq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (pvq *PageViewQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(pvq.driver.Dialect())
	t1 := builder.Table(pageview.Table)
	selector := builder.Select(t1.Columns(pageview.Columns...)...).From(t1)
	if pvq.sql != nil {
		selector = pvq.sql
		selector.Select(selector.Columns(pageview.Columns...)...)
	}
	for _, p := range pvq.predicates {
		p(selector)
	}
	for _, p := range pvq.order {
		p(selector)
	}
	if offset := pvq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := pvq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// PageViewGroupBy is the builder for group-by PageView entities.
type PageViewGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pvgb *PageViewGroupBy) Aggregate(fns ...AggregateFunc) *PageViewGroupBy {
	pvgb.fns = append(pvgb.fns, fns...)
	return pvgb
}

// Scan applies the group-by query and scan the result into the given value.
func (pvgb *PageViewGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := pvgb.path(ctx)
	if err != nil {
		return err
	}
	pvgb.sql = query
	return pvgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (pvgb *PageViewGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := pvgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (pvgb *PageViewGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(pvgb.fields) > 1 {
		return nil, errors.New("ent: PageViewGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := pvgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (pvgb *PageViewGroupBy) StringsX(ctx context.Context) []string {
	v, err := pvgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from group-by. It is only allowed when querying group-by with one field.
func (pvgb *PageViewGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = pvgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{pageview.Label}
	default:
		err = fmt.Errorf("ent: PageViewGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (pvgb *PageViewGroupBy) StringX(ctx context.Context) string {
	v, err := pvgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (pvgb *PageViewGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(pvgb.fields) > 1 {
		return nil, errors.New("ent: PageViewGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := pvgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (pvgb *PageViewGroupBy) IntsX(ctx context.Context) []int {
	v, err := pvgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from group-by. It is only allowed when querying group-by with one field.
func (pvgb *PageViewGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = pvgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{pageview.Label}
	default:
		err = fmt.Errorf("ent: PageViewGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (pvgb *PageViewGroupBy) IntX(ctx context.Context) int {
	v, err := pvgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (pvgb *PageViewGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(pvgb.fields) > 1 {
		return nil, errors.New("ent: PageViewGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := pvgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (pvgb *PageViewGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := pvgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from group-by. It is only allowed when querying group-by with one field.
func (pvgb *PageViewGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = pvgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{pageview.Label}
	default:
		err = fmt.Errorf("ent: PageViewGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (pvgb *PageViewGroupBy) Float64X(ctx context.Context) float64 {
	v, err := pvgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (pvgb *PageViewGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(pvgb.fields) > 1 {
		return nil, errors.New("ent: PageViewGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := pvgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (pvgb *PageViewGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := pvgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from group-by. It is only allowed when querying group-by with one field.
func (pvgb *PageViewGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = pvgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{pageview.Label}
	default:
		err = fmt.Errorf("ent: PageViewGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (pvgb *PageViewGroupBy) BoolX(ctx context.Context) bool {
	v, err := pvgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pvgb *PageViewGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := pvgb.sqlQuery().Query()
	if err := pvgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (pvgb *PageViewGroupBy) sqlQuery() *sql.Selector {
	selector := pvgb.sql
	columns := make([]string, 0, len(pvgb.fields)+len(pvgb.fns))
	columns = append(columns, pvgb.fields...)
	for _, fn := range pvgb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(pvgb.fields...)
}

// PageViewSelect is the builder for select fields of PageView entities.
type PageViewSelect struct {
	config
	fields []string
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Scan applies the selector query and scan the result into the given value.
func (pvs *PageViewSelect) Scan(ctx context.Context, v interface{}) error {
	query, err := pvs.path(ctx)
	if err != nil {
		return err
	}
	pvs.sql = query
	return pvs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (pvs *PageViewSelect) ScanX(ctx context.Context, v interface{}) {
	if err := pvs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (pvs *PageViewSelect) Strings(ctx context.Context) ([]string, error) {
	if len(pvs.fields) > 1 {
		return nil, errors.New("ent: PageViewSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := pvs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (pvs *PageViewSelect) StringsX(ctx context.Context) []string {
	v, err := pvs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from selector. It is only allowed when selecting one field.
func (pvs *PageViewSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = pvs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{pageview.Label}
	default:
		err = fmt.Errorf("ent: PageViewSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (pvs *PageViewSelect) StringX(ctx context.Context) string {
	v, err := pvs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (pvs *PageViewSelect) Ints(ctx context.Context) ([]int, error) {
	if len(pvs.fields) > 1 {
		return nil, errors.New("ent: PageViewSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := pvs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (pvs *PageViewSelect) IntsX(ctx context.Context) []int {
	v, err := pvs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from selector. It is only allowed when selecting one field.
func (pvs *PageViewSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = pvs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{pageview.Label}
	default:
		err = fmt.Errorf("ent: PageViewSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (pvs *PageViewSelect) IntX(ctx context.Context) int {
	v, err := pvs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (pvs *PageViewSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(pvs.fields) > 1 {
		return nil, errors.New("ent: PageViewSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := pvs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (pvs *PageViewSelect) Float64sX(ctx context.Context) []float64 {
	v, err := pvs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from selector. It is only allowed when selecting one field.
func (pvs *PageViewSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = pvs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{pageview.Label}
	default:
		err = fmt.Errorf("ent: PageViewSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (pvs *PageViewSelect) Float64X(ctx context.Context) float64 {
	v, err := pvs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (pvs *PageViewSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(pvs.fields) > 1 {
		return nil, errors.New("ent: PageViewSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := pvs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (pvs *PageViewSelect) BoolsX(ctx context.Context) []bool {
	v, err := pvs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from selector. It is only allowed when selecting one field.
func (pvs *PageViewSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = pvs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{pageview.Label}
	default:
		err = fmt.Errorf("ent: PageViewSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (pvs *PageViewSelect) BoolX(ctx context.Context) bool {
	v, err := pvs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pvs *PageViewSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := pvs.sqlQuery().Query()
	if err := pvs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (pvs *PageViewSelect) sqlQuery() sql.Querier {
	selector := pvs.sql
	selector.Select(selector.Columns(pvs.fields...)...)
	return selector
}
