// Code generated by 'github.com/containous/yaegi/extract github.com/blushft/strana/event/contexts'. DO NOT EDIT.

// +build go1.14,!go1.15

package imports

import (
	"github.com/blushft/strana/event/contexts"
	"reflect"
)

func init() {
	Symbols["github.com/blushft/strana/event/contexts"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"ContextAction":       reflect.ValueOf(contexts.ContextAction),
		"ContextAlias":        reflect.ValueOf(contexts.ContextAlias),
		"ContextApp":          reflect.ValueOf(contexts.ContextApp),
		"ContextBrowser":      reflect.ValueOf(contexts.ContextBrowser),
		"ContextCampaign":     reflect.ValueOf(contexts.ContextCampaign),
		"ContextConnectivity": reflect.ValueOf(contexts.ContextConnectivity),
		"ContextDevice":       reflect.ValueOf(contexts.ContextDevice),
		"ContextExtra":        reflect.ValueOf(contexts.ContextExtra),
		"ContextGroup":        reflect.ValueOf(contexts.ContextGroup),
		"ContextLibrary":      reflect.ValueOf(contexts.ContextLibrary),
		"ContextLocation":     reflect.ValueOf(contexts.ContextLocation),
		"ContextNetwork":      reflect.ValueOf(contexts.ContextNetwork),
		"ContextOS":           reflect.ValueOf(contexts.ContextOS),
		"ContextPage":         reflect.ValueOf(contexts.ContextPage),
		"ContextReferrer":     reflect.ValueOf(contexts.ContextReferrer),
		"ContextScreen":       reflect.ValueOf(contexts.ContextScreen),
		"ContextSession":      reflect.ValueOf(contexts.ContextSession),
		"ContextTiming":       reflect.ValueOf(contexts.ContextTiming),
		"ContextUser":         reflect.ValueOf(contexts.ContextUser),
		"ContextViewport":     reflect.ValueOf(contexts.ContextViewport),
		"NewAction":           reflect.ValueOf(contexts.NewAction),
		"NewAlias":            reflect.ValueOf(contexts.NewAlias),
		"NewApp":              reflect.ValueOf(contexts.NewApp),
		"NewBrowser":          reflect.ValueOf(contexts.NewBrowser),
		"NewDeviceContext":    reflect.ValueOf(contexts.NewDeviceContext),
		"NewNetwork":          reflect.ValueOf(contexts.NewNetwork),
		"NewOSContext":        reflect.ValueOf(contexts.NewOSContext),

		// type definitions
		"Action":       reflect.ValueOf((*contexts.Action)(nil)),
		"Alias":        reflect.ValueOf((*contexts.Alias)(nil)),
		"App":          reflect.ValueOf((*contexts.App)(nil)),
		"Browser":      reflect.ValueOf((*contexts.Browser)(nil)),
		"Campaign":     reflect.ValueOf((*contexts.Campaign)(nil)),
		"Connectivity": reflect.ValueOf((*contexts.Connectivity)(nil)),
		"Device":       reflect.ValueOf((*contexts.Device)(nil)),
		"Extra":        reflect.ValueOf((*contexts.Extra)(nil)),
		"Group":        reflect.ValueOf((*contexts.Group)(nil)),
		"Library":      reflect.ValueOf((*contexts.Library)(nil)),
		"Location":     reflect.ValueOf((*contexts.Location)(nil)),
		"Network":      reflect.ValueOf((*contexts.Network)(nil)),
		"OS":           reflect.ValueOf((*contexts.OS)(nil)),
		"Page":         reflect.ValueOf((*contexts.Page)(nil)),
		"Referrer":     reflect.ValueOf((*contexts.Referrer)(nil)),
		"Screen":       reflect.ValueOf((*contexts.Screen)(nil)),
		"Session":      reflect.ValueOf((*contexts.Session)(nil)),
		"Timing":       reflect.ValueOf((*contexts.Timing)(nil)),
		"Traits":       reflect.ValueOf((*contexts.Traits)(nil)),
		"User":         reflect.ValueOf((*contexts.User)(nil)),
		"Viewport":     reflect.ValueOf((*contexts.Viewport)(nil)),
	}
}
