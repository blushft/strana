// Code generated by entc, DO NOT EDIT.

package rawevent

import (
	"time"

	"github.com/blushft/strana/modules/sink/loader/store/ent/predicate"
	"github.com/facebook/ent/dialect/sql"
	"github.com/google/uuid"
)

// ID filters vertices based on their identifier.
func ID(id uuid.UUID) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// TrackingID applies equality check predicate on the "tracking_id" field. It's identical to TrackingIDEQ.
func TrackingID(v uuid.UUID) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTrackingID), v))
	})
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// Anonymous applies equality check predicate on the "anonymous" field. It's identical to AnonymousEQ.
func Anonymous(v bool) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAnonymous), v))
	})
}

// GroupID applies equality check predicate on the "group_id" field. It's identical to GroupIDEQ.
func GroupID(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGroupID), v))
	})
}

// SessionID applies equality check predicate on the "session_id" field. It's identical to SessionIDEQ.
func SessionID(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSessionID), v))
	})
}

// DeviceID applies equality check predicate on the "device_id" field. It's identical to DeviceIDEQ.
func DeviceID(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeviceID), v))
	})
}

// Event applies equality check predicate on the "event" field. It's identical to EventEQ.
func Event(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEvent), v))
	})
}

// NonInteractive applies equality check predicate on the "non_interactive" field. It's identical to NonInteractiveEQ.
func NonInteractive(v bool) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNonInteractive), v))
	})
}

// Channel applies equality check predicate on the "channel" field. It's identical to ChannelEQ.
func Channel(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChannel), v))
	})
}

// Platform applies equality check predicate on the "platform" field. It's identical to PlatformEQ.
func Platform(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlatform), v))
	})
}

// Timestamp applies equality check predicate on the "timestamp" field. It's identical to TimestampEQ.
func Timestamp(v time.Time) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimestamp), v))
	})
}

// TrackingIDEQ applies the EQ predicate on the "tracking_id" field.
func TrackingIDEQ(v uuid.UUID) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTrackingID), v))
	})
}

// TrackingIDNEQ applies the NEQ predicate on the "tracking_id" field.
func TrackingIDNEQ(v uuid.UUID) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTrackingID), v))
	})
}

// TrackingIDIn applies the In predicate on the "tracking_id" field.
func TrackingIDIn(vs ...uuid.UUID) predicate.RawEvent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RawEvent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTrackingID), v...))
	})
}

// TrackingIDNotIn applies the NotIn predicate on the "tracking_id" field.
func TrackingIDNotIn(vs ...uuid.UUID) predicate.RawEvent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RawEvent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTrackingID), v...))
	})
}

// TrackingIDGT applies the GT predicate on the "tracking_id" field.
func TrackingIDGT(v uuid.UUID) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTrackingID), v))
	})
}

// TrackingIDGTE applies the GTE predicate on the "tracking_id" field.
func TrackingIDGTE(v uuid.UUID) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTrackingID), v))
	})
}

// TrackingIDLT applies the LT predicate on the "tracking_id" field.
func TrackingIDLT(v uuid.UUID) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTrackingID), v))
	})
}

// TrackingIDLTE applies the LTE predicate on the "tracking_id" field.
func TrackingIDLTE(v uuid.UUID) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTrackingID), v))
	})
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserID), v))
	})
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.RawEvent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RawEvent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserID), v...))
	})
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.RawEvent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RawEvent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserID), v...))
	})
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserID), v))
	})
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserID), v))
	})
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserID), v))
	})
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserID), v))
	})
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUserID), v))
	})
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUserID), v))
	})
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUserID), v))
	})
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUserID), v))
	})
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUserID), v))
	})
}

// AnonymousEQ applies the EQ predicate on the "anonymous" field.
func AnonymousEQ(v bool) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAnonymous), v))
	})
}

// AnonymousNEQ applies the NEQ predicate on the "anonymous" field.
func AnonymousNEQ(v bool) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAnonymous), v))
	})
}

// GroupIDEQ applies the EQ predicate on the "group_id" field.
func GroupIDEQ(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGroupID), v))
	})
}

// GroupIDNEQ applies the NEQ predicate on the "group_id" field.
func GroupIDNEQ(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGroupID), v))
	})
}

// GroupIDIn applies the In predicate on the "group_id" field.
func GroupIDIn(vs ...string) predicate.RawEvent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RawEvent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldGroupID), v...))
	})
}

// GroupIDNotIn applies the NotIn predicate on the "group_id" field.
func GroupIDNotIn(vs ...string) predicate.RawEvent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RawEvent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldGroupID), v...))
	})
}

// GroupIDGT applies the GT predicate on the "group_id" field.
func GroupIDGT(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGroupID), v))
	})
}

// GroupIDGTE applies the GTE predicate on the "group_id" field.
func GroupIDGTE(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGroupID), v))
	})
}

// GroupIDLT applies the LT predicate on the "group_id" field.
func GroupIDLT(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGroupID), v))
	})
}

// GroupIDLTE applies the LTE predicate on the "group_id" field.
func GroupIDLTE(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGroupID), v))
	})
}

// GroupIDContains applies the Contains predicate on the "group_id" field.
func GroupIDContains(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldGroupID), v))
	})
}

// GroupIDHasPrefix applies the HasPrefix predicate on the "group_id" field.
func GroupIDHasPrefix(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldGroupID), v))
	})
}

// GroupIDHasSuffix applies the HasSuffix predicate on the "group_id" field.
func GroupIDHasSuffix(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldGroupID), v))
	})
}

// GroupIDIsNil applies the IsNil predicate on the "group_id" field.
func GroupIDIsNil() predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldGroupID)))
	})
}

// GroupIDNotNil applies the NotNil predicate on the "group_id" field.
func GroupIDNotNil() predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldGroupID)))
	})
}

// GroupIDEqualFold applies the EqualFold predicate on the "group_id" field.
func GroupIDEqualFold(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldGroupID), v))
	})
}

// GroupIDContainsFold applies the ContainsFold predicate on the "group_id" field.
func GroupIDContainsFold(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldGroupID), v))
	})
}

// SessionIDEQ applies the EQ predicate on the "session_id" field.
func SessionIDEQ(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSessionID), v))
	})
}

// SessionIDNEQ applies the NEQ predicate on the "session_id" field.
func SessionIDNEQ(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSessionID), v))
	})
}

// SessionIDIn applies the In predicate on the "session_id" field.
func SessionIDIn(vs ...string) predicate.RawEvent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RawEvent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSessionID), v...))
	})
}

// SessionIDNotIn applies the NotIn predicate on the "session_id" field.
func SessionIDNotIn(vs ...string) predicate.RawEvent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RawEvent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSessionID), v...))
	})
}

// SessionIDGT applies the GT predicate on the "session_id" field.
func SessionIDGT(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSessionID), v))
	})
}

// SessionIDGTE applies the GTE predicate on the "session_id" field.
func SessionIDGTE(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSessionID), v))
	})
}

// SessionIDLT applies the LT predicate on the "session_id" field.
func SessionIDLT(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSessionID), v))
	})
}

// SessionIDLTE applies the LTE predicate on the "session_id" field.
func SessionIDLTE(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSessionID), v))
	})
}

// SessionIDContains applies the Contains predicate on the "session_id" field.
func SessionIDContains(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSessionID), v))
	})
}

// SessionIDHasPrefix applies the HasPrefix predicate on the "session_id" field.
func SessionIDHasPrefix(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSessionID), v))
	})
}

// SessionIDHasSuffix applies the HasSuffix predicate on the "session_id" field.
func SessionIDHasSuffix(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSessionID), v))
	})
}

// SessionIDIsNil applies the IsNil predicate on the "session_id" field.
func SessionIDIsNil() predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSessionID)))
	})
}

// SessionIDNotNil applies the NotNil predicate on the "session_id" field.
func SessionIDNotNil() predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSessionID)))
	})
}

// SessionIDEqualFold applies the EqualFold predicate on the "session_id" field.
func SessionIDEqualFold(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSessionID), v))
	})
}

// SessionIDContainsFold applies the ContainsFold predicate on the "session_id" field.
func SessionIDContainsFold(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSessionID), v))
	})
}

// DeviceIDEQ applies the EQ predicate on the "device_id" field.
func DeviceIDEQ(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeviceID), v))
	})
}

// DeviceIDNEQ applies the NEQ predicate on the "device_id" field.
func DeviceIDNEQ(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeviceID), v))
	})
}

// DeviceIDIn applies the In predicate on the "device_id" field.
func DeviceIDIn(vs ...string) predicate.RawEvent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RawEvent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeviceID), v...))
	})
}

// DeviceIDNotIn applies the NotIn predicate on the "device_id" field.
func DeviceIDNotIn(vs ...string) predicate.RawEvent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RawEvent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeviceID), v...))
	})
}

// DeviceIDGT applies the GT predicate on the "device_id" field.
func DeviceIDGT(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeviceID), v))
	})
}

// DeviceIDGTE applies the GTE predicate on the "device_id" field.
func DeviceIDGTE(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeviceID), v))
	})
}

// DeviceIDLT applies the LT predicate on the "device_id" field.
func DeviceIDLT(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeviceID), v))
	})
}

// DeviceIDLTE applies the LTE predicate on the "device_id" field.
func DeviceIDLTE(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeviceID), v))
	})
}

// DeviceIDContains applies the Contains predicate on the "device_id" field.
func DeviceIDContains(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDeviceID), v))
	})
}

// DeviceIDHasPrefix applies the HasPrefix predicate on the "device_id" field.
func DeviceIDHasPrefix(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDeviceID), v))
	})
}

// DeviceIDHasSuffix applies the HasSuffix predicate on the "device_id" field.
func DeviceIDHasSuffix(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDeviceID), v))
	})
}

// DeviceIDIsNil applies the IsNil predicate on the "device_id" field.
func DeviceIDIsNil() predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeviceID)))
	})
}

// DeviceIDNotNil applies the NotNil predicate on the "device_id" field.
func DeviceIDNotNil() predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeviceID)))
	})
}

// DeviceIDEqualFold applies the EqualFold predicate on the "device_id" field.
func DeviceIDEqualFold(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDeviceID), v))
	})
}

// DeviceIDContainsFold applies the ContainsFold predicate on the "device_id" field.
func DeviceIDContainsFold(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDeviceID), v))
	})
}

// EventEQ applies the EQ predicate on the "event" field.
func EventEQ(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEvent), v))
	})
}

// EventNEQ applies the NEQ predicate on the "event" field.
func EventNEQ(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEvent), v))
	})
}

// EventIn applies the In predicate on the "event" field.
func EventIn(vs ...string) predicate.RawEvent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RawEvent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEvent), v...))
	})
}

// EventNotIn applies the NotIn predicate on the "event" field.
func EventNotIn(vs ...string) predicate.RawEvent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RawEvent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEvent), v...))
	})
}

// EventGT applies the GT predicate on the "event" field.
func EventGT(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEvent), v))
	})
}

// EventGTE applies the GTE predicate on the "event" field.
func EventGTE(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEvent), v))
	})
}

// EventLT applies the LT predicate on the "event" field.
func EventLT(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEvent), v))
	})
}

// EventLTE applies the LTE predicate on the "event" field.
func EventLTE(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEvent), v))
	})
}

// EventContains applies the Contains predicate on the "event" field.
func EventContains(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEvent), v))
	})
}

// EventHasPrefix applies the HasPrefix predicate on the "event" field.
func EventHasPrefix(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEvent), v))
	})
}

// EventHasSuffix applies the HasSuffix predicate on the "event" field.
func EventHasSuffix(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEvent), v))
	})
}

// EventEqualFold applies the EqualFold predicate on the "event" field.
func EventEqualFold(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEvent), v))
	})
}

// EventContainsFold applies the ContainsFold predicate on the "event" field.
func EventContainsFold(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEvent), v))
	})
}

// NonInteractiveEQ applies the EQ predicate on the "non_interactive" field.
func NonInteractiveEQ(v bool) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNonInteractive), v))
	})
}

// NonInteractiveNEQ applies the NEQ predicate on the "non_interactive" field.
func NonInteractiveNEQ(v bool) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNonInteractive), v))
	})
}

// ChannelEQ applies the EQ predicate on the "channel" field.
func ChannelEQ(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChannel), v))
	})
}

// ChannelNEQ applies the NEQ predicate on the "channel" field.
func ChannelNEQ(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldChannel), v))
	})
}

// ChannelIn applies the In predicate on the "channel" field.
func ChannelIn(vs ...string) predicate.RawEvent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RawEvent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldChannel), v...))
	})
}

// ChannelNotIn applies the NotIn predicate on the "channel" field.
func ChannelNotIn(vs ...string) predicate.RawEvent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RawEvent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldChannel), v...))
	})
}

// ChannelGT applies the GT predicate on the "channel" field.
func ChannelGT(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldChannel), v))
	})
}

// ChannelGTE applies the GTE predicate on the "channel" field.
func ChannelGTE(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldChannel), v))
	})
}

// ChannelLT applies the LT predicate on the "channel" field.
func ChannelLT(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldChannel), v))
	})
}

// ChannelLTE applies the LTE predicate on the "channel" field.
func ChannelLTE(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldChannel), v))
	})
}

// ChannelContains applies the Contains predicate on the "channel" field.
func ChannelContains(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldChannel), v))
	})
}

// ChannelHasPrefix applies the HasPrefix predicate on the "channel" field.
func ChannelHasPrefix(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldChannel), v))
	})
}

// ChannelHasSuffix applies the HasSuffix predicate on the "channel" field.
func ChannelHasSuffix(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldChannel), v))
	})
}

// ChannelIsNil applies the IsNil predicate on the "channel" field.
func ChannelIsNil() predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldChannel)))
	})
}

// ChannelNotNil applies the NotNil predicate on the "channel" field.
func ChannelNotNil() predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldChannel)))
	})
}

// ChannelEqualFold applies the EqualFold predicate on the "channel" field.
func ChannelEqualFold(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldChannel), v))
	})
}

// ChannelContainsFold applies the ContainsFold predicate on the "channel" field.
func ChannelContainsFold(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldChannel), v))
	})
}

// PlatformEQ applies the EQ predicate on the "platform" field.
func PlatformEQ(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlatform), v))
	})
}

// PlatformNEQ applies the NEQ predicate on the "platform" field.
func PlatformNEQ(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPlatform), v))
	})
}

// PlatformIn applies the In predicate on the "platform" field.
func PlatformIn(vs ...string) predicate.RawEvent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RawEvent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPlatform), v...))
	})
}

// PlatformNotIn applies the NotIn predicate on the "platform" field.
func PlatformNotIn(vs ...string) predicate.RawEvent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RawEvent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPlatform), v...))
	})
}

// PlatformGT applies the GT predicate on the "platform" field.
func PlatformGT(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPlatform), v))
	})
}

// PlatformGTE applies the GTE predicate on the "platform" field.
func PlatformGTE(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPlatform), v))
	})
}

// PlatformLT applies the LT predicate on the "platform" field.
func PlatformLT(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPlatform), v))
	})
}

// PlatformLTE applies the LTE predicate on the "platform" field.
func PlatformLTE(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPlatform), v))
	})
}

// PlatformContains applies the Contains predicate on the "platform" field.
func PlatformContains(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPlatform), v))
	})
}

// PlatformHasPrefix applies the HasPrefix predicate on the "platform" field.
func PlatformHasPrefix(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPlatform), v))
	})
}

// PlatformHasSuffix applies the HasSuffix predicate on the "platform" field.
func PlatformHasSuffix(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPlatform), v))
	})
}

// PlatformIsNil applies the IsNil predicate on the "platform" field.
func PlatformIsNil() predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPlatform)))
	})
}

// PlatformNotNil applies the NotNil predicate on the "platform" field.
func PlatformNotNil() predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPlatform)))
	})
}

// PlatformEqualFold applies the EqualFold predicate on the "platform" field.
func PlatformEqualFold(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPlatform), v))
	})
}

// PlatformContainsFold applies the ContainsFold predicate on the "platform" field.
func PlatformContainsFold(v string) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPlatform), v))
	})
}

// TimestampEQ applies the EQ predicate on the "timestamp" field.
func TimestampEQ(v time.Time) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimestamp), v))
	})
}

// TimestampNEQ applies the NEQ predicate on the "timestamp" field.
func TimestampNEQ(v time.Time) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTimestamp), v))
	})
}

// TimestampIn applies the In predicate on the "timestamp" field.
func TimestampIn(vs ...time.Time) predicate.RawEvent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RawEvent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTimestamp), v...))
	})
}

// TimestampNotIn applies the NotIn predicate on the "timestamp" field.
func TimestampNotIn(vs ...time.Time) predicate.RawEvent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RawEvent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTimestamp), v...))
	})
}

// TimestampGT applies the GT predicate on the "timestamp" field.
func TimestampGT(v time.Time) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTimestamp), v))
	})
}

// TimestampGTE applies the GTE predicate on the "timestamp" field.
func TimestampGTE(v time.Time) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTimestamp), v))
	})
}

// TimestampLT applies the LT predicate on the "timestamp" field.
func TimestampLT(v time.Time) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTimestamp), v))
	})
}

// TimestampLTE applies the LTE predicate on the "timestamp" field.
func TimestampLTE(v time.Time) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTimestamp), v))
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.RawEvent) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.RawEvent) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.RawEvent) predicate.RawEvent {
	return predicate.RawEvent(func(s *sql.Selector) {
		p(s.Not())
	})
}
