// Code generated by entc, DO NOT EDIT.

package network

import (
	"github.com/blushft/strana/modules/sink/reporter/store/ent/predicate"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// IP applies equality check predicate on the "ip" field. It's identical to IPEQ.
func IP(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIP), v))
	})
}

// Useragent applies equality check predicate on the "useragent" field. It's identical to UseragentEQ.
func Useragent(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUseragent), v))
	})
}

// IPEQ applies the EQ predicate on the "ip" field.
func IPEQ(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIP), v))
	})
}

// IPNEQ applies the NEQ predicate on the "ip" field.
func IPNEQ(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIP), v))
	})
}

// IPIn applies the In predicate on the "ip" field.
func IPIn(vs ...string) predicate.Network {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Network(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIP), v...))
	})
}

// IPNotIn applies the NotIn predicate on the "ip" field.
func IPNotIn(vs ...string) predicate.Network {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Network(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIP), v...))
	})
}

// IPGT applies the GT predicate on the "ip" field.
func IPGT(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIP), v))
	})
}

// IPGTE applies the GTE predicate on the "ip" field.
func IPGTE(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIP), v))
	})
}

// IPLT applies the LT predicate on the "ip" field.
func IPLT(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIP), v))
	})
}

// IPLTE applies the LTE predicate on the "ip" field.
func IPLTE(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIP), v))
	})
}

// IPContains applies the Contains predicate on the "ip" field.
func IPContains(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIP), v))
	})
}

// IPHasPrefix applies the HasPrefix predicate on the "ip" field.
func IPHasPrefix(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIP), v))
	})
}

// IPHasSuffix applies the HasSuffix predicate on the "ip" field.
func IPHasSuffix(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIP), v))
	})
}

// IPEqualFold applies the EqualFold predicate on the "ip" field.
func IPEqualFold(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIP), v))
	})
}

// IPContainsFold applies the ContainsFold predicate on the "ip" field.
func IPContainsFold(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIP), v))
	})
}

// UseragentEQ applies the EQ predicate on the "useragent" field.
func UseragentEQ(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUseragent), v))
	})
}

// UseragentNEQ applies the NEQ predicate on the "useragent" field.
func UseragentNEQ(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUseragent), v))
	})
}

// UseragentIn applies the In predicate on the "useragent" field.
func UseragentIn(vs ...string) predicate.Network {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Network(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUseragent), v...))
	})
}

// UseragentNotIn applies the NotIn predicate on the "useragent" field.
func UseragentNotIn(vs ...string) predicate.Network {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Network(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUseragent), v...))
	})
}

// UseragentGT applies the GT predicate on the "useragent" field.
func UseragentGT(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUseragent), v))
	})
}

// UseragentGTE applies the GTE predicate on the "useragent" field.
func UseragentGTE(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUseragent), v))
	})
}

// UseragentLT applies the LT predicate on the "useragent" field.
func UseragentLT(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUseragent), v))
	})
}

// UseragentLTE applies the LTE predicate on the "useragent" field.
func UseragentLTE(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUseragent), v))
	})
}

// UseragentContains applies the Contains predicate on the "useragent" field.
func UseragentContains(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUseragent), v))
	})
}

// UseragentHasPrefix applies the HasPrefix predicate on the "useragent" field.
func UseragentHasPrefix(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUseragent), v))
	})
}

// UseragentHasSuffix applies the HasSuffix predicate on the "useragent" field.
func UseragentHasSuffix(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUseragent), v))
	})
}

// UseragentIsNil applies the IsNil predicate on the "useragent" field.
func UseragentIsNil() predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUseragent)))
	})
}

// UseragentNotNil applies the NotNil predicate on the "useragent" field.
func UseragentNotNil() predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUseragent)))
	})
}

// UseragentEqualFold applies the EqualFold predicate on the "useragent" field.
func UseragentEqualFold(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUseragent), v))
	})
}

// UseragentContainsFold applies the ContainsFold predicate on the "useragent" field.
func UseragentContainsFold(v string) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUseragent), v))
	})
}

// HasEvents applies the HasEdge predicate on the "events" edge.
func HasEvents() predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EventsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, EventsTable, EventsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEventsWith applies the HasEdge predicate on the "events" edge with a given conditions (other predicates).
func HasEventsWith(preds ...predicate.Event) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EventsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, EventsTable, EventsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Network) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Network) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Network) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		p(s.Not())
	})
}
