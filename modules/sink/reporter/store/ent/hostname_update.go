// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/blushft/strana/modules/sink/reporter/store/ent/hostname"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/pagestat"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/predicate"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// HostnameUpdate is the builder for updating Hostname entities.
type HostnameUpdate struct {
	config
	hooks      []Hook
	mutation   *HostnameMutation
	predicates []predicate.Hostname
}

// Where adds a new predicate for the builder.
func (hu *HostnameUpdate) Where(ps ...predicate.Hostname) *HostnameUpdate {
	hu.predicates = append(hu.predicates, ps...)
	return hu
}

// SetName sets the name field.
func (hu *HostnameUpdate) SetName(s string) *HostnameUpdate {
	hu.mutation.SetName(s)
	return hu
}

// AddPageStatIDs adds the page_stats edge to PageStat by ids.
func (hu *HostnameUpdate) AddPageStatIDs(ids ...int) *HostnameUpdate {
	hu.mutation.AddPageStatIDs(ids...)
	return hu
}

// AddPageStats adds the page_stats edges to PageStat.
func (hu *HostnameUpdate) AddPageStats(p ...*PageStat) *HostnameUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return hu.AddPageStatIDs(ids...)
}

// Mutation returns the HostnameMutation object of the builder.
func (hu *HostnameUpdate) Mutation() *HostnameMutation {
	return hu.mutation
}

// RemovePageStatIDs removes the page_stats edge to PageStat by ids.
func (hu *HostnameUpdate) RemovePageStatIDs(ids ...int) *HostnameUpdate {
	hu.mutation.RemovePageStatIDs(ids...)
	return hu
}

// RemovePageStats removes page_stats edges to PageStat.
func (hu *HostnameUpdate) RemovePageStats(p ...*PageStat) *HostnameUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return hu.RemovePageStatIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (hu *HostnameUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(hu.hooks) == 0 {
		affected, err = hu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HostnameMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			hu.mutation = mutation
			affected, err = hu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(hu.hooks) - 1; i >= 0; i-- {
			mut = hu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, hu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (hu *HostnameUpdate) SaveX(ctx context.Context) int {
	affected, err := hu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hu *HostnameUpdate) Exec(ctx context.Context) error {
	_, err := hu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hu *HostnameUpdate) ExecX(ctx context.Context) {
	if err := hu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (hu *HostnameUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   hostname.Table,
			Columns: hostname.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: hostname.FieldID,
			},
		},
	}
	if ps := hu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: hostname.FieldName,
		})
	}
	if nodes := hu.mutation.RemovedPageStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hostname.PageStatsTable,
			Columns: []string{hostname.PageStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pagestat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.PageStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hostname.PageStatsTable,
			Columns: []string{hostname.PageStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pagestat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hostname.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// HostnameUpdateOne is the builder for updating a single Hostname entity.
type HostnameUpdateOne struct {
	config
	hooks    []Hook
	mutation *HostnameMutation
}

// SetName sets the name field.
func (huo *HostnameUpdateOne) SetName(s string) *HostnameUpdateOne {
	huo.mutation.SetName(s)
	return huo
}

// AddPageStatIDs adds the page_stats edge to PageStat by ids.
func (huo *HostnameUpdateOne) AddPageStatIDs(ids ...int) *HostnameUpdateOne {
	huo.mutation.AddPageStatIDs(ids...)
	return huo
}

// AddPageStats adds the page_stats edges to PageStat.
func (huo *HostnameUpdateOne) AddPageStats(p ...*PageStat) *HostnameUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return huo.AddPageStatIDs(ids...)
}

// Mutation returns the HostnameMutation object of the builder.
func (huo *HostnameUpdateOne) Mutation() *HostnameMutation {
	return huo.mutation
}

// RemovePageStatIDs removes the page_stats edge to PageStat by ids.
func (huo *HostnameUpdateOne) RemovePageStatIDs(ids ...int) *HostnameUpdateOne {
	huo.mutation.RemovePageStatIDs(ids...)
	return huo
}

// RemovePageStats removes page_stats edges to PageStat.
func (huo *HostnameUpdateOne) RemovePageStats(p ...*PageStat) *HostnameUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return huo.RemovePageStatIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (huo *HostnameUpdateOne) Save(ctx context.Context) (*Hostname, error) {

	var (
		err  error
		node *Hostname
	)
	if len(huo.hooks) == 0 {
		node, err = huo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HostnameMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			huo.mutation = mutation
			node, err = huo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(huo.hooks) - 1; i >= 0; i-- {
			mut = huo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, huo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (huo *HostnameUpdateOne) SaveX(ctx context.Context) *Hostname {
	h, err := huo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return h
}

// Exec executes the query on the entity.
func (huo *HostnameUpdateOne) Exec(ctx context.Context) error {
	_, err := huo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (huo *HostnameUpdateOne) ExecX(ctx context.Context) {
	if err := huo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (huo *HostnameUpdateOne) sqlSave(ctx context.Context) (h *Hostname, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   hostname.Table,
			Columns: hostname.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: hostname.FieldID,
			},
		},
	}
	id, ok := huo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Hostname.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := huo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: hostname.FieldName,
		})
	}
	if nodes := huo.mutation.RemovedPageStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hostname.PageStatsTable,
			Columns: []string{hostname.PageStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pagestat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.PageStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hostname.PageStatsTable,
			Columns: []string{hostname.PageStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pagestat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	h = &Hostname{config: huo.config}
	_spec.Assign = h.assignValues
	_spec.ScanValues = h.scanValues()
	if err = sqlgraph.UpdateNode(ctx, huo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hostname.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return h, nil
}
