// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/blushft/strana/modules/sink/reporter/store/ent/event"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/session"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/google/uuid"
)

// SessionCreate is the builder for creating a Session entity.
type SessionCreate struct {
	config
	mutation *SessionMutation
	hooks    []Hook
}

// SetNewUser sets the new_user field.
func (sc *SessionCreate) SetNewUser(b bool) *SessionCreate {
	sc.mutation.SetNewUser(b)
	return sc
}

// SetIsUnique sets the is_unique field.
func (sc *SessionCreate) SetIsUnique(b bool) *SessionCreate {
	sc.mutation.SetIsUnique(b)
	return sc
}

// SetIsBounce sets the is_bounce field.
func (sc *SessionCreate) SetIsBounce(b bool) *SessionCreate {
	sc.mutation.SetIsBounce(b)
	return sc
}

// SetIsFinished sets the is_finished field.
func (sc *SessionCreate) SetIsFinished(b bool) *SessionCreate {
	sc.mutation.SetIsFinished(b)
	return sc
}

// SetDuration sets the duration field.
func (sc *SessionCreate) SetDuration(i int) *SessionCreate {
	sc.mutation.SetDuration(i)
	return sc
}

// SetNillableDuration sets the duration field if the given value is not nil.
func (sc *SessionCreate) SetNillableDuration(i *int) *SessionCreate {
	if i != nil {
		sc.SetDuration(*i)
	}
	return sc
}

// SetStartedAt sets the started_at field.
func (sc *SessionCreate) SetStartedAt(t time.Time) *SessionCreate {
	sc.mutation.SetStartedAt(t)
	return sc
}

// SetFinishedAt sets the finished_at field.
func (sc *SessionCreate) SetFinishedAt(t time.Time) *SessionCreate {
	sc.mutation.SetFinishedAt(t)
	return sc
}

// SetNillableFinishedAt sets the finished_at field if the given value is not nil.
func (sc *SessionCreate) SetNillableFinishedAt(t *time.Time) *SessionCreate {
	if t != nil {
		sc.SetFinishedAt(*t)
	}
	return sc
}

// SetID sets the id field.
func (sc *SessionCreate) SetID(u uuid.UUID) *SessionCreate {
	sc.mutation.SetID(u)
	return sc
}

// AddEventIDs adds the events edge to Event by ids.
func (sc *SessionCreate) AddEventIDs(ids ...uuid.UUID) *SessionCreate {
	sc.mutation.AddEventIDs(ids...)
	return sc
}

// AddEvents adds the events edges to Event.
func (sc *SessionCreate) AddEvents(e ...*Event) *SessionCreate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return sc.AddEventIDs(ids...)
}

// Mutation returns the SessionMutation object of the builder.
func (sc *SessionCreate) Mutation() *SessionMutation {
	return sc.mutation
}

// Save creates the Session in the database.
func (sc *SessionCreate) Save(ctx context.Context) (*Session, error) {
	if err := sc.preSave(); err != nil {
		return nil, err
	}
	var (
		err  error
		node *Session
	)
	if len(sc.hooks) == 0 {
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SessionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sc.mutation = mutation
			node, err = sc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			mut = sc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SessionCreate) SaveX(ctx context.Context) *Session {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (sc *SessionCreate) preSave() error {
	if _, ok := sc.mutation.NewUser(); !ok {
		return &ValidationError{Name: "new_user", err: errors.New("ent: missing required field \"new_user\"")}
	}
	if _, ok := sc.mutation.IsUnique(); !ok {
		return &ValidationError{Name: "is_unique", err: errors.New("ent: missing required field \"is_unique\"")}
	}
	if _, ok := sc.mutation.IsBounce(); !ok {
		return &ValidationError{Name: "is_bounce", err: errors.New("ent: missing required field \"is_bounce\"")}
	}
	if _, ok := sc.mutation.IsFinished(); !ok {
		return &ValidationError{Name: "is_finished", err: errors.New("ent: missing required field \"is_finished\"")}
	}
	if _, ok := sc.mutation.StartedAt(); !ok {
		return &ValidationError{Name: "started_at", err: errors.New("ent: missing required field \"started_at\"")}
	}
	return nil
}

func (sc *SessionCreate) sqlSave(ctx context.Context) (*Session, error) {
	s, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return s, nil
}

func (sc *SessionCreate) createSpec() (*Session, *sqlgraph.CreateSpec) {
	var (
		s     = &Session{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: session.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: session.FieldID,
			},
		}
	)
	if id, ok := sc.mutation.ID(); ok {
		s.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.NewUser(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: session.FieldNewUser,
		})
		s.NewUser = value
	}
	if value, ok := sc.mutation.IsUnique(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: session.FieldIsUnique,
		})
		s.IsUnique = value
	}
	if value, ok := sc.mutation.IsBounce(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: session.FieldIsBounce,
		})
		s.IsBounce = value
	}
	if value, ok := sc.mutation.IsFinished(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: session.FieldIsFinished,
		})
		s.IsFinished = value
	}
	if value, ok := sc.mutation.Duration(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: session.FieldDuration,
		})
		s.Duration = value
	}
	if value, ok := sc.mutation.StartedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: session.FieldStartedAt,
		})
		s.StartedAt = value
	}
	if value, ok := sc.mutation.FinishedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: session.FieldFinishedAt,
		})
		s.FinishedAt = &value
	}
	if nodes := sc.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   session.EventsTable,
			Columns: []string{session.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return s, _spec
}

// SessionCreateBulk is the builder for creating a bulk of Session entities.
type SessionCreateBulk struct {
	config
	builders []*SessionCreate
}

// Save creates the Session entities in the database.
func (scb *SessionCreateBulk) Save(ctx context.Context) ([]*Session, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Session, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				if err := builder.preSave(); err != nil {
					return nil, err
				}
				mutation, ok := m.(*SessionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (scb *SessionCreateBulk) SaveX(ctx context.Context) []*Session {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
