// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/blushft/strana/modules/sink/reporter/store/ent/connectivity"
	"github.com/facebook/ent/dialect/sql"
)

// Connectivity is the model entity for the Connectivity schema.
type Connectivity struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Bluetooth holds the value of the "bluetooth" field.
	Bluetooth bool `json:"bluetooth,omitempty"`
	// Cellular holds the value of the "cellular" field.
	Cellular bool `json:"cellular,omitempty"`
	// Wifi holds the value of the "wifi" field.
	Wifi bool `json:"wifi,omitempty"`
	// Ethernet holds the value of the "ethernet" field.
	Ethernet bool `json:"ethernet,omitempty"`
	// Carrier holds the value of the "carrier" field.
	Carrier bool `json:"carrier,omitempty"`
	// Isp holds the value of the "isp" field.
	Isp bool `json:"isp,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ConnectivityQuery when eager-loading is set.
	Edges ConnectivityEdges `json:"edges"`
}

// ConnectivityEdges holds the relations/edges for other nodes in the graph.
type ConnectivityEdges struct {
	// Events holds the value of the events edge.
	Events []*Event
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EventsOrErr returns the Events value or an error if the edge
// was not loaded in eager-loading.
func (e ConnectivityEdges) EventsOrErr() ([]*Event, error) {
	if e.loadedTypes[0] {
		return e.Events, nil
	}
	return nil, &NotLoadedError{edge: "events"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Connectivity) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
		&sql.NullBool{},  // bluetooth
		&sql.NullBool{},  // cellular
		&sql.NullBool{},  // wifi
		&sql.NullBool{},  // ethernet
		&sql.NullBool{},  // carrier
		&sql.NullBool{},  // isp
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Connectivity fields.
func (c *Connectivity) assignValues(values ...interface{}) error {
	if m, n := len(values), len(connectivity.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	c.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field bluetooth", values[0])
	} else if value.Valid {
		c.Bluetooth = value.Bool
	}
	if value, ok := values[1].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field cellular", values[1])
	} else if value.Valid {
		c.Cellular = value.Bool
	}
	if value, ok := values[2].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field wifi", values[2])
	} else if value.Valid {
		c.Wifi = value.Bool
	}
	if value, ok := values[3].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field ethernet", values[3])
	} else if value.Valid {
		c.Ethernet = value.Bool
	}
	if value, ok := values[4].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field carrier", values[4])
	} else if value.Valid {
		c.Carrier = value.Bool
	}
	if value, ok := values[5].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field isp", values[5])
	} else if value.Valid {
		c.Isp = value.Bool
	}
	return nil
}

// QueryEvents queries the events edge of the Connectivity.
func (c *Connectivity) QueryEvents() *EventQuery {
	return (&ConnectivityClient{config: c.config}).QueryEvents(c)
}

// Update returns a builder for updating this Connectivity.
// Note that, you need to call Connectivity.Unwrap() before calling this method, if this Connectivity
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Connectivity) Update() *ConnectivityUpdateOne {
	return (&ConnectivityClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (c *Connectivity) Unwrap() *Connectivity {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Connectivity is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Connectivity) String() string {
	var builder strings.Builder
	builder.WriteString("Connectivity(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", bluetooth=")
	builder.WriteString(fmt.Sprintf("%v", c.Bluetooth))
	builder.WriteString(", cellular=")
	builder.WriteString(fmt.Sprintf("%v", c.Cellular))
	builder.WriteString(", wifi=")
	builder.WriteString(fmt.Sprintf("%v", c.Wifi))
	builder.WriteString(", ethernet=")
	builder.WriteString(fmt.Sprintf("%v", c.Ethernet))
	builder.WriteString(", carrier=")
	builder.WriteString(fmt.Sprintf("%v", c.Carrier))
	builder.WriteString(", isp=")
	builder.WriteString(fmt.Sprintf("%v", c.Isp))
	builder.WriteByte(')')
	return builder.String()
}

// Connectivities is a parsable slice of Connectivity.
type Connectivities []*Connectivity

func (c Connectivities) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
