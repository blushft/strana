// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/blushft/strana/modules/sink/reporter/store/ent/event"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/library"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/predicate"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/google/uuid"
)

// LibraryUpdate is the builder for updating Library entities.
type LibraryUpdate struct {
	config
	hooks      []Hook
	mutation   *LibraryMutation
	predicates []predicate.Library
}

// Where adds a new predicate for the builder.
func (lu *LibraryUpdate) Where(ps ...predicate.Library) *LibraryUpdate {
	lu.predicates = append(lu.predicates, ps...)
	return lu
}

// SetName sets the name field.
func (lu *LibraryUpdate) SetName(s string) *LibraryUpdate {
	lu.mutation.SetName(s)
	return lu
}

// SetVersion sets the version field.
func (lu *LibraryUpdate) SetVersion(s string) *LibraryUpdate {
	lu.mutation.SetVersion(s)
	return lu
}

// SetNillableVersion sets the version field if the given value is not nil.
func (lu *LibraryUpdate) SetNillableVersion(s *string) *LibraryUpdate {
	if s != nil {
		lu.SetVersion(*s)
	}
	return lu
}

// ClearVersion clears the value of version.
func (lu *LibraryUpdate) ClearVersion() *LibraryUpdate {
	lu.mutation.ClearVersion()
	return lu
}

// AddEventIDs adds the events edge to Event by ids.
func (lu *LibraryUpdate) AddEventIDs(ids ...uuid.UUID) *LibraryUpdate {
	lu.mutation.AddEventIDs(ids...)
	return lu
}

// AddEvents adds the events edges to Event.
func (lu *LibraryUpdate) AddEvents(e ...*Event) *LibraryUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return lu.AddEventIDs(ids...)
}

// Mutation returns the LibraryMutation object of the builder.
func (lu *LibraryUpdate) Mutation() *LibraryMutation {
	return lu.mutation
}

// RemoveEventIDs removes the events edge to Event by ids.
func (lu *LibraryUpdate) RemoveEventIDs(ids ...uuid.UUID) *LibraryUpdate {
	lu.mutation.RemoveEventIDs(ids...)
	return lu
}

// RemoveEvents removes events edges to Event.
func (lu *LibraryUpdate) RemoveEvents(e ...*Event) *LibraryUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return lu.RemoveEventIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (lu *LibraryUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(lu.hooks) == 0 {
		affected, err = lu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LibraryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			lu.mutation = mutation
			affected, err = lu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(lu.hooks) - 1; i >= 0; i-- {
			mut = lu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, lu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (lu *LibraryUpdate) SaveX(ctx context.Context) int {
	affected, err := lu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lu *LibraryUpdate) Exec(ctx context.Context) error {
	_, err := lu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lu *LibraryUpdate) ExecX(ctx context.Context) {
	if err := lu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (lu *LibraryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   library.Table,
			Columns: library.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: library.FieldID,
			},
		},
	}
	if ps := lu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: library.FieldName,
		})
	}
	if value, ok := lu.mutation.Version(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: library.FieldVersion,
		})
	}
	if lu.mutation.VersionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: library.FieldVersion,
		})
	}
	if nodes := lu.mutation.RemovedEventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   library.EventsTable,
			Columns: []string{library.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   library.EventsTable,
			Columns: []string{library.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{library.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// LibraryUpdateOne is the builder for updating a single Library entity.
type LibraryUpdateOne struct {
	config
	hooks    []Hook
	mutation *LibraryMutation
}

// SetName sets the name field.
func (luo *LibraryUpdateOne) SetName(s string) *LibraryUpdateOne {
	luo.mutation.SetName(s)
	return luo
}

// SetVersion sets the version field.
func (luo *LibraryUpdateOne) SetVersion(s string) *LibraryUpdateOne {
	luo.mutation.SetVersion(s)
	return luo
}

// SetNillableVersion sets the version field if the given value is not nil.
func (luo *LibraryUpdateOne) SetNillableVersion(s *string) *LibraryUpdateOne {
	if s != nil {
		luo.SetVersion(*s)
	}
	return luo
}

// ClearVersion clears the value of version.
func (luo *LibraryUpdateOne) ClearVersion() *LibraryUpdateOne {
	luo.mutation.ClearVersion()
	return luo
}

// AddEventIDs adds the events edge to Event by ids.
func (luo *LibraryUpdateOne) AddEventIDs(ids ...uuid.UUID) *LibraryUpdateOne {
	luo.mutation.AddEventIDs(ids...)
	return luo
}

// AddEvents adds the events edges to Event.
func (luo *LibraryUpdateOne) AddEvents(e ...*Event) *LibraryUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return luo.AddEventIDs(ids...)
}

// Mutation returns the LibraryMutation object of the builder.
func (luo *LibraryUpdateOne) Mutation() *LibraryMutation {
	return luo.mutation
}

// RemoveEventIDs removes the events edge to Event by ids.
func (luo *LibraryUpdateOne) RemoveEventIDs(ids ...uuid.UUID) *LibraryUpdateOne {
	luo.mutation.RemoveEventIDs(ids...)
	return luo
}

// RemoveEvents removes events edges to Event.
func (luo *LibraryUpdateOne) RemoveEvents(e ...*Event) *LibraryUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return luo.RemoveEventIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (luo *LibraryUpdateOne) Save(ctx context.Context) (*Library, error) {

	var (
		err  error
		node *Library
	)
	if len(luo.hooks) == 0 {
		node, err = luo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LibraryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			luo.mutation = mutation
			node, err = luo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(luo.hooks) - 1; i >= 0; i-- {
			mut = luo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, luo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (luo *LibraryUpdateOne) SaveX(ctx context.Context) *Library {
	l, err := luo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return l
}

// Exec executes the query on the entity.
func (luo *LibraryUpdateOne) Exec(ctx context.Context) error {
	_, err := luo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luo *LibraryUpdateOne) ExecX(ctx context.Context) {
	if err := luo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (luo *LibraryUpdateOne) sqlSave(ctx context.Context) (l *Library, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   library.Table,
			Columns: library.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: library.FieldID,
			},
		},
	}
	id, ok := luo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Library.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := luo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: library.FieldName,
		})
	}
	if value, ok := luo.mutation.Version(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: library.FieldVersion,
		})
	}
	if luo.mutation.VersionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: library.FieldVersion,
		})
	}
	if nodes := luo.mutation.RemovedEventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   library.EventsTable,
			Columns: []string{library.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   library.EventsTable,
			Columns: []string{library.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	l = &Library{config: luo.config}
	_spec.Assign = l.assignValues
	_spec.ScanValues = l.scanValues()
	if err = sqlgraph.UpdateNode(ctx, luo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{library.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return l, nil
}
