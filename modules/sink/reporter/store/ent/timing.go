// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/blushft/strana/modules/sink/reporter/store/ent/timing"
	"github.com/facebook/ent/dialect/sql"
)

// Timing is the model entity for the Timing schema.
type Timing struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Category holds the value of the "category" field.
	Category string `json:"category,omitempty"`
	// TimingLabel holds the value of the "timing_label" field.
	TimingLabel string `json:"timing_label,omitempty"`
	// Unit holds the value of the "unit" field.
	Unit string `json:"unit,omitempty"`
	// Variable holds the value of the "variable" field.
	Variable string `json:"variable,omitempty"`
	// Value holds the value of the "value" field.
	Value float64 `json:"value,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TimingQuery when eager-loading is set.
	Edges TimingEdges `json:"edges"`
}

// TimingEdges holds the relations/edges for other nodes in the graph.
type TimingEdges struct {
	// Events holds the value of the events edge.
	Events []*Event
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EventsOrErr returns the Events value or an error if the edge
// was not loaded in eager-loading.
func (e TimingEdges) EventsOrErr() ([]*Event, error) {
	if e.loadedTypes[0] {
		return e.Events, nil
	}
	return nil, &NotLoadedError{edge: "events"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Timing) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},   // id
		&sql.NullString{},  // category
		&sql.NullString{},  // timing_label
		&sql.NullString{},  // unit
		&sql.NullString{},  // variable
		&sql.NullFloat64{}, // value
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Timing fields.
func (t *Timing) assignValues(values ...interface{}) error {
	if m, n := len(values), len(timing.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	t.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field category", values[0])
	} else if value.Valid {
		t.Category = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field timing_label", values[1])
	} else if value.Valid {
		t.TimingLabel = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field unit", values[2])
	} else if value.Valid {
		t.Unit = value.String
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field variable", values[3])
	} else if value.Valid {
		t.Variable = value.String
	}
	if value, ok := values[4].(*sql.NullFloat64); !ok {
		return fmt.Errorf("unexpected type %T for field value", values[4])
	} else if value.Valid {
		t.Value = value.Float64
	}
	return nil
}

// QueryEvents queries the events edge of the Timing.
func (t *Timing) QueryEvents() *EventQuery {
	return (&TimingClient{config: t.config}).QueryEvents(t)
}

// Update returns a builder for updating this Timing.
// Note that, you need to call Timing.Unwrap() before calling this method, if this Timing
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Timing) Update() *TimingUpdateOne {
	return (&TimingClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (t *Timing) Unwrap() *Timing {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Timing is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Timing) String() string {
	var builder strings.Builder
	builder.WriteString("Timing(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteString(", category=")
	builder.WriteString(t.Category)
	builder.WriteString(", timing_label=")
	builder.WriteString(t.TimingLabel)
	builder.WriteString(", unit=")
	builder.WriteString(t.Unit)
	builder.WriteString(", variable=")
	builder.WriteString(t.Variable)
	builder.WriteString(", value=")
	builder.WriteString(fmt.Sprintf("%v", t.Value))
	builder.WriteByte(')')
	return builder.String()
}

// Timings is a parsable slice of Timing.
type Timings []*Timing

func (t Timings) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
