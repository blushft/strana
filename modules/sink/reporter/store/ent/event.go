// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"github.com/blushft/strana/modules/sink/reporter/store/ent/action"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/alias"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/app"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/browser"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/campaign"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/connectivity"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/device"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/event"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/extra"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/group"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/library"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/location"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/network"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/oscontext"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/page"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/referrer"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/screen"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/session"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/timing"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/user"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/viewport"
	"github.com/facebook/ent/dialect/sql"
	"github.com/google/uuid"
)

// Event is the model entity for the Event schema.
type Event struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// TrackingID holds the value of the "tracking_id" field.
	TrackingID string `json:"tracking_id,omitempty"`
	// Event holds the value of the "event" field.
	Event event.Event `json:"event,omitempty"`
	// NonInteractive holds the value of the "non_interactive" field.
	NonInteractive bool `json:"non_interactive,omitempty"`
	// Channel holds the value of the "channel" field.
	Channel string `json:"channel,omitempty"`
	// Platform holds the value of the "platform" field.
	Platform string `json:"platform,omitempty"`
	// Properties holds the value of the "properties" field.
	Properties map[string]interface{} `json:"properties,omitempty"`
	// Timestamp holds the value of the "timestamp" field.
	Timestamp time.Time `json:"timestamp,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EventQuery when eager-loading is set.
	Edges              EventEdges `json:"edges"`
	event_app          *int
	event_browser      *int
	event_campaign     *int
	event_connectivity *int
	event_device       *string
	event_extra        *int
	event_group        *int
	event_library      *int
	event_location     *int
	event_network      *int
	event_os           *int
	event_page         *int
	event_referrer     *int
	event_screen       *int
	event_session      *uuid.UUID
	event_timing       *int
	event_viewport     *int
	event_user         *string
}

// EventEdges holds the relations/edges for other nodes in the graph.
type EventEdges struct {
	// Action holds the value of the action edge.
	Action *Action
	// Alias holds the value of the alias edge.
	Alias *Alias
	// App holds the value of the app edge.
	App *App
	// Browser holds the value of the browser edge.
	Browser *Browser
	// Campaign holds the value of the campaign edge.
	Campaign *Campaign
	// Connectivity holds the value of the connectivity edge.
	Connectivity *Connectivity
	// Device holds the value of the device edge.
	Device *Device
	// Extra holds the value of the extra edge.
	Extra *Extra
	// Group holds the value of the group edge.
	Group *Group
	// Library holds the value of the library edge.
	Library *Library
	// Location holds the value of the location edge.
	Location *Location
	// Network holds the value of the network edge.
	Network *Network
	// Os holds the value of the os edge.
	Os *OSContext
	// Page holds the value of the page edge.
	Page *Page
	// Referrer holds the value of the referrer edge.
	Referrer *Referrer
	// Screen holds the value of the screen edge.
	Screen *Screen
	// Session holds the value of the session edge.
	Session *Session
	// Timing holds the value of the timing edge.
	Timing *Timing
	// Viewport holds the value of the viewport edge.
	Viewport *Viewport
	// User holds the value of the user edge.
	User *User
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [20]bool
}

// ActionOrErr returns the Action value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventEdges) ActionOrErr() (*Action, error) {
	if e.loadedTypes[0] {
		if e.Action == nil {
			// The edge action was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: action.Label}
		}
		return e.Action, nil
	}
	return nil, &NotLoadedError{edge: "action"}
}

// AliasOrErr returns the Alias value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventEdges) AliasOrErr() (*Alias, error) {
	if e.loadedTypes[1] {
		if e.Alias == nil {
			// The edge alias was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: alias.Label}
		}
		return e.Alias, nil
	}
	return nil, &NotLoadedError{edge: "alias"}
}

// AppOrErr returns the App value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventEdges) AppOrErr() (*App, error) {
	if e.loadedTypes[2] {
		if e.App == nil {
			// The edge app was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: app.Label}
		}
		return e.App, nil
	}
	return nil, &NotLoadedError{edge: "app"}
}

// BrowserOrErr returns the Browser value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventEdges) BrowserOrErr() (*Browser, error) {
	if e.loadedTypes[3] {
		if e.Browser == nil {
			// The edge browser was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: browser.Label}
		}
		return e.Browser, nil
	}
	return nil, &NotLoadedError{edge: "browser"}
}

// CampaignOrErr returns the Campaign value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventEdges) CampaignOrErr() (*Campaign, error) {
	if e.loadedTypes[4] {
		if e.Campaign == nil {
			// The edge campaign was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: campaign.Label}
		}
		return e.Campaign, nil
	}
	return nil, &NotLoadedError{edge: "campaign"}
}

// ConnectivityOrErr returns the Connectivity value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventEdges) ConnectivityOrErr() (*Connectivity, error) {
	if e.loadedTypes[5] {
		if e.Connectivity == nil {
			// The edge connectivity was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: connectivity.Label}
		}
		return e.Connectivity, nil
	}
	return nil, &NotLoadedError{edge: "connectivity"}
}

// DeviceOrErr returns the Device value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventEdges) DeviceOrErr() (*Device, error) {
	if e.loadedTypes[6] {
		if e.Device == nil {
			// The edge device was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: device.Label}
		}
		return e.Device, nil
	}
	return nil, &NotLoadedError{edge: "device"}
}

// ExtraOrErr returns the Extra value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventEdges) ExtraOrErr() (*Extra, error) {
	if e.loadedTypes[7] {
		if e.Extra == nil {
			// The edge extra was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: extra.Label}
		}
		return e.Extra, nil
	}
	return nil, &NotLoadedError{edge: "extra"}
}

// GroupOrErr returns the Group value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventEdges) GroupOrErr() (*Group, error) {
	if e.loadedTypes[8] {
		if e.Group == nil {
			// The edge group was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: group.Label}
		}
		return e.Group, nil
	}
	return nil, &NotLoadedError{edge: "group"}
}

// LibraryOrErr returns the Library value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventEdges) LibraryOrErr() (*Library, error) {
	if e.loadedTypes[9] {
		if e.Library == nil {
			// The edge library was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: library.Label}
		}
		return e.Library, nil
	}
	return nil, &NotLoadedError{edge: "library"}
}

// LocationOrErr returns the Location value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventEdges) LocationOrErr() (*Location, error) {
	if e.loadedTypes[10] {
		if e.Location == nil {
			// The edge location was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: location.Label}
		}
		return e.Location, nil
	}
	return nil, &NotLoadedError{edge: "location"}
}

// NetworkOrErr returns the Network value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventEdges) NetworkOrErr() (*Network, error) {
	if e.loadedTypes[11] {
		if e.Network == nil {
			// The edge network was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: network.Label}
		}
		return e.Network, nil
	}
	return nil, &NotLoadedError{edge: "network"}
}

// OsOrErr returns the Os value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventEdges) OsOrErr() (*OSContext, error) {
	if e.loadedTypes[12] {
		if e.Os == nil {
			// The edge os was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: oscontext.Label}
		}
		return e.Os, nil
	}
	return nil, &NotLoadedError{edge: "os"}
}

// PageOrErr returns the Page value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventEdges) PageOrErr() (*Page, error) {
	if e.loadedTypes[13] {
		if e.Page == nil {
			// The edge page was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: page.Label}
		}
		return e.Page, nil
	}
	return nil, &NotLoadedError{edge: "page"}
}

// ReferrerOrErr returns the Referrer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventEdges) ReferrerOrErr() (*Referrer, error) {
	if e.loadedTypes[14] {
		if e.Referrer == nil {
			// The edge referrer was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: referrer.Label}
		}
		return e.Referrer, nil
	}
	return nil, &NotLoadedError{edge: "referrer"}
}

// ScreenOrErr returns the Screen value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventEdges) ScreenOrErr() (*Screen, error) {
	if e.loadedTypes[15] {
		if e.Screen == nil {
			// The edge screen was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: screen.Label}
		}
		return e.Screen, nil
	}
	return nil, &NotLoadedError{edge: "screen"}
}

// SessionOrErr returns the Session value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventEdges) SessionOrErr() (*Session, error) {
	if e.loadedTypes[16] {
		if e.Session == nil {
			// The edge session was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: session.Label}
		}
		return e.Session, nil
	}
	return nil, &NotLoadedError{edge: "session"}
}

// TimingOrErr returns the Timing value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventEdges) TimingOrErr() (*Timing, error) {
	if e.loadedTypes[17] {
		if e.Timing == nil {
			// The edge timing was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: timing.Label}
		}
		return e.Timing, nil
	}
	return nil, &NotLoadedError{edge: "timing"}
}

// ViewportOrErr returns the Viewport value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventEdges) ViewportOrErr() (*Viewport, error) {
	if e.loadedTypes[18] {
		if e.Viewport == nil {
			// The edge viewport was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: viewport.Label}
		}
		return e.Viewport, nil
	}
	return nil, &NotLoadedError{edge: "viewport"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[19] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Event) scanValues() []interface{} {
	return []interface{}{
		&uuid.UUID{},      // id
		&sql.NullString{}, // tracking_id
		&sql.NullString{}, // event
		&sql.NullBool{},   // non_interactive
		&sql.NullString{}, // channel
		&sql.NullString{}, // platform
		&[]byte{},         // properties
		&sql.NullTime{},   // timestamp
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Event) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // event_app
		&sql.NullInt64{},  // event_browser
		&sql.NullInt64{},  // event_campaign
		&sql.NullInt64{},  // event_connectivity
		&sql.NullString{}, // event_device
		&sql.NullInt64{},  // event_extra
		&sql.NullInt64{},  // event_group
		&sql.NullInt64{},  // event_library
		&sql.NullInt64{},  // event_location
		&sql.NullInt64{},  // event_network
		&sql.NullInt64{},  // event_os
		&sql.NullInt64{},  // event_page
		&sql.NullInt64{},  // event_referrer
		&sql.NullInt64{},  // event_screen
		&uuid.UUID{},      // event_session
		&sql.NullInt64{},  // event_timing
		&sql.NullInt64{},  // event_viewport
		&sql.NullString{}, // event_user
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Event fields.
func (e *Event) assignValues(values ...interface{}) error {
	if m, n := len(values), len(event.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	if value, ok := values[0].(*uuid.UUID); !ok {
		return fmt.Errorf("unexpected type %T for field id", values[0])
	} else if value != nil {
		e.ID = *value
	}
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field tracking_id", values[0])
	} else if value.Valid {
		e.TrackingID = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field event", values[1])
	} else if value.Valid {
		e.Event = event.Event(value.String)
	}
	if value, ok := values[2].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field non_interactive", values[2])
	} else if value.Valid {
		e.NonInteractive = value.Bool
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field channel", values[3])
	} else if value.Valid {
		e.Channel = value.String
	}
	if value, ok := values[4].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field platform", values[4])
	} else if value.Valid {
		e.Platform = value.String
	}

	if value, ok := values[5].(*[]byte); !ok {
		return fmt.Errorf("unexpected type %T for field properties", values[5])
	} else if value != nil && len(*value) > 0 {
		if err := json.Unmarshal(*value, &e.Properties); err != nil {
			return fmt.Errorf("unmarshal field properties: %v", err)
		}
	}
	if value, ok := values[6].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field timestamp", values[6])
	} else if value.Valid {
		e.Timestamp = value.Time
	}
	values = values[7:]
	if len(values) == len(event.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field event_app", value)
		} else if value.Valid {
			e.event_app = new(int)
			*e.event_app = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field event_browser", value)
		} else if value.Valid {
			e.event_browser = new(int)
			*e.event_browser = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field event_campaign", value)
		} else if value.Valid {
			e.event_campaign = new(int)
			*e.event_campaign = int(value.Int64)
		}
		if value, ok := values[3].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field event_connectivity", value)
		} else if value.Valid {
			e.event_connectivity = new(int)
			*e.event_connectivity = int(value.Int64)
		}
		if value, ok := values[4].(*sql.NullString); !ok {
			return fmt.Errorf("unexpected type %T for field event_device", values[4])
		} else if value.Valid {
			e.event_device = new(string)
			*e.event_device = value.String
		}
		if value, ok := values[5].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field event_extra", value)
		} else if value.Valid {
			e.event_extra = new(int)
			*e.event_extra = int(value.Int64)
		}
		if value, ok := values[6].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field event_group", value)
		} else if value.Valid {
			e.event_group = new(int)
			*e.event_group = int(value.Int64)
		}
		if value, ok := values[7].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field event_library", value)
		} else if value.Valid {
			e.event_library = new(int)
			*e.event_library = int(value.Int64)
		}
		if value, ok := values[8].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field event_location", value)
		} else if value.Valid {
			e.event_location = new(int)
			*e.event_location = int(value.Int64)
		}
		if value, ok := values[9].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field event_network", value)
		} else if value.Valid {
			e.event_network = new(int)
			*e.event_network = int(value.Int64)
		}
		if value, ok := values[10].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field event_os", value)
		} else if value.Valid {
			e.event_os = new(int)
			*e.event_os = int(value.Int64)
		}
		if value, ok := values[11].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field event_page", value)
		} else if value.Valid {
			e.event_page = new(int)
			*e.event_page = int(value.Int64)
		}
		if value, ok := values[12].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field event_referrer", value)
		} else if value.Valid {
			e.event_referrer = new(int)
			*e.event_referrer = int(value.Int64)
		}
		if value, ok := values[13].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field event_screen", value)
		} else if value.Valid {
			e.event_screen = new(int)
			*e.event_screen = int(value.Int64)
		}
		if value, ok := values[14].(*uuid.UUID); !ok {
			return fmt.Errorf("unexpected type %T for field event_session", values[14])
		} else if value != nil {
			e.event_session = value
		}
		if value, ok := values[15].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field event_timing", value)
		} else if value.Valid {
			e.event_timing = new(int)
			*e.event_timing = int(value.Int64)
		}
		if value, ok := values[16].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field event_viewport", value)
		} else if value.Valid {
			e.event_viewport = new(int)
			*e.event_viewport = int(value.Int64)
		}
		if value, ok := values[17].(*sql.NullString); !ok {
			return fmt.Errorf("unexpected type %T for field event_user", values[17])
		} else if value.Valid {
			e.event_user = new(string)
			*e.event_user = value.String
		}
	}
	return nil
}

// QueryAction queries the action edge of the Event.
func (e *Event) QueryAction() *ActionQuery {
	return (&EventClient{config: e.config}).QueryAction(e)
}

// QueryAlias queries the alias edge of the Event.
func (e *Event) QueryAlias() *AliasQuery {
	return (&EventClient{config: e.config}).QueryAlias(e)
}

// QueryApp queries the app edge of the Event.
func (e *Event) QueryApp() *AppQuery {
	return (&EventClient{config: e.config}).QueryApp(e)
}

// QueryBrowser queries the browser edge of the Event.
func (e *Event) QueryBrowser() *BrowserQuery {
	return (&EventClient{config: e.config}).QueryBrowser(e)
}

// QueryCampaign queries the campaign edge of the Event.
func (e *Event) QueryCampaign() *CampaignQuery {
	return (&EventClient{config: e.config}).QueryCampaign(e)
}

// QueryConnectivity queries the connectivity edge of the Event.
func (e *Event) QueryConnectivity() *ConnectivityQuery {
	return (&EventClient{config: e.config}).QueryConnectivity(e)
}

// QueryDevice queries the device edge of the Event.
func (e *Event) QueryDevice() *DeviceQuery {
	return (&EventClient{config: e.config}).QueryDevice(e)
}

// QueryExtra queries the extra edge of the Event.
func (e *Event) QueryExtra() *ExtraQuery {
	return (&EventClient{config: e.config}).QueryExtra(e)
}

// QueryGroup queries the group edge of the Event.
func (e *Event) QueryGroup() *GroupQuery {
	return (&EventClient{config: e.config}).QueryGroup(e)
}

// QueryLibrary queries the library edge of the Event.
func (e *Event) QueryLibrary() *LibraryQuery {
	return (&EventClient{config: e.config}).QueryLibrary(e)
}

// QueryLocation queries the location edge of the Event.
func (e *Event) QueryLocation() *LocationQuery {
	return (&EventClient{config: e.config}).QueryLocation(e)
}

// QueryNetwork queries the network edge of the Event.
func (e *Event) QueryNetwork() *NetworkQuery {
	return (&EventClient{config: e.config}).QueryNetwork(e)
}

// QueryOs queries the os edge of the Event.
func (e *Event) QueryOs() *OSContextQuery {
	return (&EventClient{config: e.config}).QueryOs(e)
}

// QueryPage queries the page edge of the Event.
func (e *Event) QueryPage() *PageQuery {
	return (&EventClient{config: e.config}).QueryPage(e)
}

// QueryReferrer queries the referrer edge of the Event.
func (e *Event) QueryReferrer() *ReferrerQuery {
	return (&EventClient{config: e.config}).QueryReferrer(e)
}

// QueryScreen queries the screen edge of the Event.
func (e *Event) QueryScreen() *ScreenQuery {
	return (&EventClient{config: e.config}).QueryScreen(e)
}

// QuerySession queries the session edge of the Event.
func (e *Event) QuerySession() *SessionQuery {
	return (&EventClient{config: e.config}).QuerySession(e)
}

// QueryTiming queries the timing edge of the Event.
func (e *Event) QueryTiming() *TimingQuery {
	return (&EventClient{config: e.config}).QueryTiming(e)
}

// QueryViewport queries the viewport edge of the Event.
func (e *Event) QueryViewport() *ViewportQuery {
	return (&EventClient{config: e.config}).QueryViewport(e)
}

// QueryUser queries the user edge of the Event.
func (e *Event) QueryUser() *UserQuery {
	return (&EventClient{config: e.config}).QueryUser(e)
}

// Update returns a builder for updating this Event.
// Note that, you need to call Event.Unwrap() before calling this method, if this Event
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Event) Update() *EventUpdateOne {
	return (&EventClient{config: e.config}).UpdateOne(e)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (e *Event) Unwrap() *Event {
	tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Event is not a transactional entity")
	}
	e.config.driver = tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Event) String() string {
	var builder strings.Builder
	builder.WriteString("Event(")
	builder.WriteString(fmt.Sprintf("id=%v", e.ID))
	builder.WriteString(", tracking_id=")
	builder.WriteString(e.TrackingID)
	builder.WriteString(", event=")
	builder.WriteString(fmt.Sprintf("%v", e.Event))
	builder.WriteString(", non_interactive=")
	builder.WriteString(fmt.Sprintf("%v", e.NonInteractive))
	builder.WriteString(", channel=")
	builder.WriteString(e.Channel)
	builder.WriteString(", platform=")
	builder.WriteString(e.Platform)
	builder.WriteString(", properties=")
	builder.WriteString(fmt.Sprintf("%v", e.Properties))
	builder.WriteString(", timestamp=")
	builder.WriteString(e.Timestamp.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Events is a parsable slice of Event.
type Events []*Event

func (e Events) config(cfg config) {
	for _i := range e {
		e[_i].config = cfg
	}
}
