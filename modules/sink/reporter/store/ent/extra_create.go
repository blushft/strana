// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/blushft/strana/modules/sink/reporter/store/ent/event"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/extra"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/google/uuid"
)

// ExtraCreate is the builder for creating a Extra entity.
type ExtraCreate struct {
	config
	mutation *ExtraMutation
	hooks    []Hook
}

// SetValues sets the values field.
func (ec *ExtraCreate) SetValues(m map[string]interface{}) *ExtraCreate {
	ec.mutation.SetValues(m)
	return ec
}

// AddEventIDs adds the events edge to Event by ids.
func (ec *ExtraCreate) AddEventIDs(ids ...uuid.UUID) *ExtraCreate {
	ec.mutation.AddEventIDs(ids...)
	return ec
}

// AddEvents adds the events edges to Event.
func (ec *ExtraCreate) AddEvents(e ...*Event) *ExtraCreate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ec.AddEventIDs(ids...)
}

// Mutation returns the ExtraMutation object of the builder.
func (ec *ExtraCreate) Mutation() *ExtraMutation {
	return ec.mutation
}

// Save creates the Extra in the database.
func (ec *ExtraCreate) Save(ctx context.Context) (*Extra, error) {
	if err := ec.preSave(); err != nil {
		return nil, err
	}
	var (
		err  error
		node *Extra
	)
	if len(ec.hooks) == 0 {
		node, err = ec.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ExtraMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ec.mutation = mutation
			node, err = ec.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ec.hooks) - 1; i >= 0; i-- {
			mut = ec.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ec.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ec *ExtraCreate) SaveX(ctx context.Context) *Extra {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ec *ExtraCreate) preSave() error {
	if _, ok := ec.mutation.Values(); !ok {
		return &ValidationError{Name: "values", err: errors.New("ent: missing required field \"values\"")}
	}
	return nil
}

func (ec *ExtraCreate) sqlSave(ctx context.Context) (*Extra, error) {
	e, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	e.ID = int(id)
	return e, nil
}

func (ec *ExtraCreate) createSpec() (*Extra, *sqlgraph.CreateSpec) {
	var (
		e     = &Extra{config: ec.config}
		_spec = &sqlgraph.CreateSpec{
			Table: extra.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: extra.FieldID,
			},
		}
	)
	if value, ok := ec.mutation.Values(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: extra.FieldValues,
		})
		e.Values = value
	}
	if nodes := ec.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   extra.EventsTable,
			Columns: []string{extra.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return e, _spec
}

// ExtraCreateBulk is the builder for creating a bulk of Extra entities.
type ExtraCreateBulk struct {
	config
	builders []*ExtraCreate
}

// Save creates the Extra entities in the database.
func (ecb *ExtraCreateBulk) Save(ctx context.Context) ([]*Extra, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Extra, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				if err := builder.preSave(); err != nil {
					return nil, err
				}
				mutation, ok := m.(*ExtraMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (ecb *ExtraCreateBulk) SaveX(ctx context.Context) []*Extra {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
