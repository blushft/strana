// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/blushft/strana/modules/sink/reporter/store/ent/action"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/alias"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/app"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/browser"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/campaign"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/connectivity"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/device"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/event"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/extra"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/group"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/library"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/location"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/network"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/oscontext"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/page"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/referrer"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/screen"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/session"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/timing"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/user"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/viewport"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/google/uuid"
)

// EventCreate is the builder for creating a Event entity.
type EventCreate struct {
	config
	mutation *EventMutation
	hooks    []Hook
}

// SetTrackingID sets the tracking_id field.
func (ec *EventCreate) SetTrackingID(s string) *EventCreate {
	ec.mutation.SetTrackingID(s)
	return ec
}

// SetEvent sets the event field.
func (ec *EventCreate) SetEvent(e event.Event) *EventCreate {
	ec.mutation.SetEvent(e)
	return ec
}

// SetNonInteractive sets the non_interactive field.
func (ec *EventCreate) SetNonInteractive(b bool) *EventCreate {
	ec.mutation.SetNonInteractive(b)
	return ec
}

// SetChannel sets the channel field.
func (ec *EventCreate) SetChannel(s string) *EventCreate {
	ec.mutation.SetChannel(s)
	return ec
}

// SetNillableChannel sets the channel field if the given value is not nil.
func (ec *EventCreate) SetNillableChannel(s *string) *EventCreate {
	if s != nil {
		ec.SetChannel(*s)
	}
	return ec
}

// SetPlatform sets the platform field.
func (ec *EventCreate) SetPlatform(s string) *EventCreate {
	ec.mutation.SetPlatform(s)
	return ec
}

// SetNillablePlatform sets the platform field if the given value is not nil.
func (ec *EventCreate) SetNillablePlatform(s *string) *EventCreate {
	if s != nil {
		ec.SetPlatform(*s)
	}
	return ec
}

// SetProperties sets the properties field.
func (ec *EventCreate) SetProperties(m map[string]interface{}) *EventCreate {
	ec.mutation.SetProperties(m)
	return ec
}

// SetTimestamp sets the timestamp field.
func (ec *EventCreate) SetTimestamp(t time.Time) *EventCreate {
	ec.mutation.SetTimestamp(t)
	return ec
}

// SetID sets the id field.
func (ec *EventCreate) SetID(u uuid.UUID) *EventCreate {
	ec.mutation.SetID(u)
	return ec
}

// SetActionID sets the action edge to Action by id.
func (ec *EventCreate) SetActionID(id int) *EventCreate {
	ec.mutation.SetActionID(id)
	return ec
}

// SetNillableActionID sets the action edge to Action by id if the given value is not nil.
func (ec *EventCreate) SetNillableActionID(id *int) *EventCreate {
	if id != nil {
		ec = ec.SetActionID(*id)
	}
	return ec
}

// SetAction sets the action edge to Action.
func (ec *EventCreate) SetAction(a *Action) *EventCreate {
	return ec.SetActionID(a.ID)
}

// SetAliasID sets the alias edge to Alias by id.
func (ec *EventCreate) SetAliasID(id int) *EventCreate {
	ec.mutation.SetAliasID(id)
	return ec
}

// SetNillableAliasID sets the alias edge to Alias by id if the given value is not nil.
func (ec *EventCreate) SetNillableAliasID(id *int) *EventCreate {
	if id != nil {
		ec = ec.SetAliasID(*id)
	}
	return ec
}

// SetAlias sets the alias edge to Alias.
func (ec *EventCreate) SetAlias(a *Alias) *EventCreate {
	return ec.SetAliasID(a.ID)
}

// SetAppID sets the app edge to App by id.
func (ec *EventCreate) SetAppID(id int) *EventCreate {
	ec.mutation.SetAppID(id)
	return ec
}

// SetNillableAppID sets the app edge to App by id if the given value is not nil.
func (ec *EventCreate) SetNillableAppID(id *int) *EventCreate {
	if id != nil {
		ec = ec.SetAppID(*id)
	}
	return ec
}

// SetApp sets the app edge to App.
func (ec *EventCreate) SetApp(a *App) *EventCreate {
	return ec.SetAppID(a.ID)
}

// SetBrowserID sets the browser edge to Browser by id.
func (ec *EventCreate) SetBrowserID(id int) *EventCreate {
	ec.mutation.SetBrowserID(id)
	return ec
}

// SetNillableBrowserID sets the browser edge to Browser by id if the given value is not nil.
func (ec *EventCreate) SetNillableBrowserID(id *int) *EventCreate {
	if id != nil {
		ec = ec.SetBrowserID(*id)
	}
	return ec
}

// SetBrowser sets the browser edge to Browser.
func (ec *EventCreate) SetBrowser(b *Browser) *EventCreate {
	return ec.SetBrowserID(b.ID)
}

// SetCampaignID sets the campaign edge to Campaign by id.
func (ec *EventCreate) SetCampaignID(id int) *EventCreate {
	ec.mutation.SetCampaignID(id)
	return ec
}

// SetNillableCampaignID sets the campaign edge to Campaign by id if the given value is not nil.
func (ec *EventCreate) SetNillableCampaignID(id *int) *EventCreate {
	if id != nil {
		ec = ec.SetCampaignID(*id)
	}
	return ec
}

// SetCampaign sets the campaign edge to Campaign.
func (ec *EventCreate) SetCampaign(c *Campaign) *EventCreate {
	return ec.SetCampaignID(c.ID)
}

// SetConnectivityID sets the connectivity edge to Connectivity by id.
func (ec *EventCreate) SetConnectivityID(id int) *EventCreate {
	ec.mutation.SetConnectivityID(id)
	return ec
}

// SetNillableConnectivityID sets the connectivity edge to Connectivity by id if the given value is not nil.
func (ec *EventCreate) SetNillableConnectivityID(id *int) *EventCreate {
	if id != nil {
		ec = ec.SetConnectivityID(*id)
	}
	return ec
}

// SetConnectivity sets the connectivity edge to Connectivity.
func (ec *EventCreate) SetConnectivity(c *Connectivity) *EventCreate {
	return ec.SetConnectivityID(c.ID)
}

// SetDeviceID sets the device edge to Device by id.
func (ec *EventCreate) SetDeviceID(id string) *EventCreate {
	ec.mutation.SetDeviceID(id)
	return ec
}

// SetNillableDeviceID sets the device edge to Device by id if the given value is not nil.
func (ec *EventCreate) SetNillableDeviceID(id *string) *EventCreate {
	if id != nil {
		ec = ec.SetDeviceID(*id)
	}
	return ec
}

// SetDevice sets the device edge to Device.
func (ec *EventCreate) SetDevice(d *Device) *EventCreate {
	return ec.SetDeviceID(d.ID)
}

// SetExtraID sets the extra edge to Extra by id.
func (ec *EventCreate) SetExtraID(id int) *EventCreate {
	ec.mutation.SetExtraID(id)
	return ec
}

// SetNillableExtraID sets the extra edge to Extra by id if the given value is not nil.
func (ec *EventCreate) SetNillableExtraID(id *int) *EventCreate {
	if id != nil {
		ec = ec.SetExtraID(*id)
	}
	return ec
}

// SetExtra sets the extra edge to Extra.
func (ec *EventCreate) SetExtra(e *Extra) *EventCreate {
	return ec.SetExtraID(e.ID)
}

// SetGroupID sets the group edge to Group by id.
func (ec *EventCreate) SetGroupID(id int) *EventCreate {
	ec.mutation.SetGroupID(id)
	return ec
}

// SetNillableGroupID sets the group edge to Group by id if the given value is not nil.
func (ec *EventCreate) SetNillableGroupID(id *int) *EventCreate {
	if id != nil {
		ec = ec.SetGroupID(*id)
	}
	return ec
}

// SetGroup sets the group edge to Group.
func (ec *EventCreate) SetGroup(g *Group) *EventCreate {
	return ec.SetGroupID(g.ID)
}

// SetLibraryID sets the library edge to Library by id.
func (ec *EventCreate) SetLibraryID(id int) *EventCreate {
	ec.mutation.SetLibraryID(id)
	return ec
}

// SetNillableLibraryID sets the library edge to Library by id if the given value is not nil.
func (ec *EventCreate) SetNillableLibraryID(id *int) *EventCreate {
	if id != nil {
		ec = ec.SetLibraryID(*id)
	}
	return ec
}

// SetLibrary sets the library edge to Library.
func (ec *EventCreate) SetLibrary(l *Library) *EventCreate {
	return ec.SetLibraryID(l.ID)
}

// SetLocationID sets the location edge to Location by id.
func (ec *EventCreate) SetLocationID(id int) *EventCreate {
	ec.mutation.SetLocationID(id)
	return ec
}

// SetNillableLocationID sets the location edge to Location by id if the given value is not nil.
func (ec *EventCreate) SetNillableLocationID(id *int) *EventCreate {
	if id != nil {
		ec = ec.SetLocationID(*id)
	}
	return ec
}

// SetLocation sets the location edge to Location.
func (ec *EventCreate) SetLocation(l *Location) *EventCreate {
	return ec.SetLocationID(l.ID)
}

// SetNetworkID sets the network edge to Network by id.
func (ec *EventCreate) SetNetworkID(id int) *EventCreate {
	ec.mutation.SetNetworkID(id)
	return ec
}

// SetNillableNetworkID sets the network edge to Network by id if the given value is not nil.
func (ec *EventCreate) SetNillableNetworkID(id *int) *EventCreate {
	if id != nil {
		ec = ec.SetNetworkID(*id)
	}
	return ec
}

// SetNetwork sets the network edge to Network.
func (ec *EventCreate) SetNetwork(n *Network) *EventCreate {
	return ec.SetNetworkID(n.ID)
}

// SetOsID sets the os edge to OSContext by id.
func (ec *EventCreate) SetOsID(id int) *EventCreate {
	ec.mutation.SetOsID(id)
	return ec
}

// SetNillableOsID sets the os edge to OSContext by id if the given value is not nil.
func (ec *EventCreate) SetNillableOsID(id *int) *EventCreate {
	if id != nil {
		ec = ec.SetOsID(*id)
	}
	return ec
}

// SetOs sets the os edge to OSContext.
func (ec *EventCreate) SetOs(o *OSContext) *EventCreate {
	return ec.SetOsID(o.ID)
}

// SetPageID sets the page edge to Page by id.
func (ec *EventCreate) SetPageID(id int) *EventCreate {
	ec.mutation.SetPageID(id)
	return ec
}

// SetNillablePageID sets the page edge to Page by id if the given value is not nil.
func (ec *EventCreate) SetNillablePageID(id *int) *EventCreate {
	if id != nil {
		ec = ec.SetPageID(*id)
	}
	return ec
}

// SetPage sets the page edge to Page.
func (ec *EventCreate) SetPage(p *Page) *EventCreate {
	return ec.SetPageID(p.ID)
}

// SetReferrerID sets the referrer edge to Referrer by id.
func (ec *EventCreate) SetReferrerID(id int) *EventCreate {
	ec.mutation.SetReferrerID(id)
	return ec
}

// SetNillableReferrerID sets the referrer edge to Referrer by id if the given value is not nil.
func (ec *EventCreate) SetNillableReferrerID(id *int) *EventCreate {
	if id != nil {
		ec = ec.SetReferrerID(*id)
	}
	return ec
}

// SetReferrer sets the referrer edge to Referrer.
func (ec *EventCreate) SetReferrer(r *Referrer) *EventCreate {
	return ec.SetReferrerID(r.ID)
}

// SetScreenID sets the screen edge to Screen by id.
func (ec *EventCreate) SetScreenID(id int) *EventCreate {
	ec.mutation.SetScreenID(id)
	return ec
}

// SetNillableScreenID sets the screen edge to Screen by id if the given value is not nil.
func (ec *EventCreate) SetNillableScreenID(id *int) *EventCreate {
	if id != nil {
		ec = ec.SetScreenID(*id)
	}
	return ec
}

// SetScreen sets the screen edge to Screen.
func (ec *EventCreate) SetScreen(s *Screen) *EventCreate {
	return ec.SetScreenID(s.ID)
}

// SetSessionID sets the session edge to Session by id.
func (ec *EventCreate) SetSessionID(id uuid.UUID) *EventCreate {
	ec.mutation.SetSessionID(id)
	return ec
}

// SetNillableSessionID sets the session edge to Session by id if the given value is not nil.
func (ec *EventCreate) SetNillableSessionID(id *uuid.UUID) *EventCreate {
	if id != nil {
		ec = ec.SetSessionID(*id)
	}
	return ec
}

// SetSession sets the session edge to Session.
func (ec *EventCreate) SetSession(s *Session) *EventCreate {
	return ec.SetSessionID(s.ID)
}

// SetTimingID sets the timing edge to Timing by id.
func (ec *EventCreate) SetTimingID(id int) *EventCreate {
	ec.mutation.SetTimingID(id)
	return ec
}

// SetNillableTimingID sets the timing edge to Timing by id if the given value is not nil.
func (ec *EventCreate) SetNillableTimingID(id *int) *EventCreate {
	if id != nil {
		ec = ec.SetTimingID(*id)
	}
	return ec
}

// SetTiming sets the timing edge to Timing.
func (ec *EventCreate) SetTiming(t *Timing) *EventCreate {
	return ec.SetTimingID(t.ID)
}

// SetViewportID sets the viewport edge to Viewport by id.
func (ec *EventCreate) SetViewportID(id int) *EventCreate {
	ec.mutation.SetViewportID(id)
	return ec
}

// SetNillableViewportID sets the viewport edge to Viewport by id if the given value is not nil.
func (ec *EventCreate) SetNillableViewportID(id *int) *EventCreate {
	if id != nil {
		ec = ec.SetViewportID(*id)
	}
	return ec
}

// SetViewport sets the viewport edge to Viewport.
func (ec *EventCreate) SetViewport(v *Viewport) *EventCreate {
	return ec.SetViewportID(v.ID)
}

// SetUserID sets the user edge to User by id.
func (ec *EventCreate) SetUserID(id string) *EventCreate {
	ec.mutation.SetUserID(id)
	return ec
}

// SetNillableUserID sets the user edge to User by id if the given value is not nil.
func (ec *EventCreate) SetNillableUserID(id *string) *EventCreate {
	if id != nil {
		ec = ec.SetUserID(*id)
	}
	return ec
}

// SetUser sets the user edge to User.
func (ec *EventCreate) SetUser(u *User) *EventCreate {
	return ec.SetUserID(u.ID)
}

// Mutation returns the EventMutation object of the builder.
func (ec *EventCreate) Mutation() *EventMutation {
	return ec.mutation
}

// Save creates the Event in the database.
func (ec *EventCreate) Save(ctx context.Context) (*Event, error) {
	if err := ec.preSave(); err != nil {
		return nil, err
	}
	var (
		err  error
		node *Event
	)
	if len(ec.hooks) == 0 {
		node, err = ec.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EventMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ec.mutation = mutation
			node, err = ec.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ec.hooks) - 1; i >= 0; i-- {
			mut = ec.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ec.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EventCreate) SaveX(ctx context.Context) *Event {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ec *EventCreate) preSave() error {
	if _, ok := ec.mutation.TrackingID(); !ok {
		return &ValidationError{Name: "tracking_id", err: errors.New("ent: missing required field \"tracking_id\"")}
	}
	if _, ok := ec.mutation.Event(); !ok {
		return &ValidationError{Name: "event", err: errors.New("ent: missing required field \"event\"")}
	}
	if v, ok := ec.mutation.Event(); ok {
		if err := event.EventValidator(v); err != nil {
			return &ValidationError{Name: "event", err: fmt.Errorf("ent: validator failed for field \"event\": %w", err)}
		}
	}
	if _, ok := ec.mutation.NonInteractive(); !ok {
		return &ValidationError{Name: "non_interactive", err: errors.New("ent: missing required field \"non_interactive\"")}
	}
	if _, ok := ec.mutation.Timestamp(); !ok {
		return &ValidationError{Name: "timestamp", err: errors.New("ent: missing required field \"timestamp\"")}
	}
	return nil
}

func (ec *EventCreate) sqlSave(ctx context.Context) (*Event, error) {
	e, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return e, nil
}

func (ec *EventCreate) createSpec() (*Event, *sqlgraph.CreateSpec) {
	var (
		e     = &Event{config: ec.config}
		_spec = &sqlgraph.CreateSpec{
			Table: event.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: event.FieldID,
			},
		}
	)
	if id, ok := ec.mutation.ID(); ok {
		e.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ec.mutation.TrackingID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: event.FieldTrackingID,
		})
		e.TrackingID = value
	}
	if value, ok := ec.mutation.Event(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: event.FieldEvent,
		})
		e.Event = value
	}
	if value, ok := ec.mutation.NonInteractive(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: event.FieldNonInteractive,
		})
		e.NonInteractive = value
	}
	if value, ok := ec.mutation.Channel(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: event.FieldChannel,
		})
		e.Channel = value
	}
	if value, ok := ec.mutation.Platform(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: event.FieldPlatform,
		})
		e.Platform = value
	}
	if value, ok := ec.mutation.Properties(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: event.FieldProperties,
		})
		e.Properties = value
	}
	if value, ok := ec.mutation.Timestamp(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: event.FieldTimestamp,
		})
		e.Timestamp = value
	}
	if nodes := ec.mutation.ActionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   event.ActionTable,
			Columns: []string{event.ActionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: action.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.AliasIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   event.AliasTable,
			Columns: []string{event.AliasColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: alias.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.AppTable,
			Columns: []string{event.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.BrowserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.BrowserTable,
			Columns: []string{event.BrowserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: browser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.CampaignIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.CampaignTable,
			Columns: []string{event.CampaignColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: campaign.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.ConnectivityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.ConnectivityTable,
			Columns: []string{event.ConnectivityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: connectivity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.DeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.DeviceTable,
			Columns: []string{event.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: device.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.ExtraIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.ExtraTable,
			Columns: []string{event.ExtraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: extra.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.GroupTable,
			Columns: []string{event.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.LibraryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.LibraryTable,
			Columns: []string{event.LibraryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: library.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.LocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.LocationTable,
			Columns: []string{event.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: location.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.NetworkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.NetworkTable,
			Columns: []string{event.NetworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: network.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.OsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.OsTable,
			Columns: []string{event.OsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: oscontext.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.PageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.PageTable,
			Columns: []string{event.PageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: page.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.ReferrerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.ReferrerTable,
			Columns: []string{event.ReferrerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: referrer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.ScreenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.ScreenTable,
			Columns: []string{event.ScreenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: screen.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.SessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.SessionTable,
			Columns: []string{event.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: session.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.TimingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.TimingTable,
			Columns: []string{event.TimingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: timing.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.ViewportIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.ViewportTable,
			Columns: []string{event.ViewportColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: viewport.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.UserTable,
			Columns: []string{event.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return e, _spec
}

// EventCreateBulk is the builder for creating a bulk of Event entities.
type EventCreateBulk struct {
	config
	builders []*EventCreate
}

// Save creates the Event entities in the database.
func (ecb *EventCreateBulk) Save(ctx context.Context) ([]*Event, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Event, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				if err := builder.preSave(); err != nil {
					return nil, err
				}
				mutation, ok := m.(*EventMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (ecb *EventCreateBulk) SaveX(ctx context.Context) []*Event {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
