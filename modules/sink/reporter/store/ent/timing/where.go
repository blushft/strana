// Code generated by entc, DO NOT EDIT.

package timing

import (
	"github.com/blushft/strana/modules/sink/reporter/store/ent/predicate"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Category applies equality check predicate on the "category" field. It's identical to CategoryEQ.
func Category(v string) predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCategory), v))
	})
}

// TimingLabel applies equality check predicate on the "timing_label" field. It's identical to TimingLabelEQ.
func TimingLabel(v string) predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimingLabel), v))
	})
}

// Unit applies equality check predicate on the "unit" field. It's identical to UnitEQ.
func Unit(v string) predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnit), v))
	})
}

// Variable applies equality check predicate on the "variable" field. It's identical to VariableEQ.
func Variable(v string) predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVariable), v))
	})
}

// Value applies equality check predicate on the "value" field. It's identical to ValueEQ.
func Value(v float64) predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldValue), v))
	})
}

// CategoryEQ applies the EQ predicate on the "category" field.
func CategoryEQ(v string) predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCategory), v))
	})
}

// CategoryNEQ applies the NEQ predicate on the "category" field.
func CategoryNEQ(v string) predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCategory), v))
	})
}

// CategoryIn applies the In predicate on the "category" field.
func CategoryIn(vs ...string) predicate.Timing {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Timing(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCategory), v...))
	})
}

// CategoryNotIn applies the NotIn predicate on the "category" field.
func CategoryNotIn(vs ...string) predicate.Timing {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Timing(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCategory), v...))
	})
}

// CategoryGT applies the GT predicate on the "category" field.
func CategoryGT(v string) predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCategory), v))
	})
}

// CategoryGTE applies the GTE predicate on the "category" field.
func CategoryGTE(v string) predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCategory), v))
	})
}

// CategoryLT applies the LT predicate on the "category" field.
func CategoryLT(v string) predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCategory), v))
	})
}

// CategoryLTE applies the LTE predicate on the "category" field.
func CategoryLTE(v string) predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCategory), v))
	})
}

// CategoryContains applies the Contains predicate on the "category" field.
func CategoryContains(v string) predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCategory), v))
	})
}

// CategoryHasPrefix applies the HasPrefix predicate on the "category" field.
func CategoryHasPrefix(v string) predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCategory), v))
	})
}

// CategoryHasSuffix applies the HasSuffix predicate on the "category" field.
func CategoryHasSuffix(v string) predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCategory), v))
	})
}

// CategoryEqualFold applies the EqualFold predicate on the "category" field.
func CategoryEqualFold(v string) predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCategory), v))
	})
}

// CategoryContainsFold applies the ContainsFold predicate on the "category" field.
func CategoryContainsFold(v string) predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCategory), v))
	})
}

// TimingLabelEQ applies the EQ predicate on the "timing_label" field.
func TimingLabelEQ(v string) predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimingLabel), v))
	})
}

// TimingLabelNEQ applies the NEQ predicate on the "timing_label" field.
func TimingLabelNEQ(v string) predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTimingLabel), v))
	})
}

// TimingLabelIn applies the In predicate on the "timing_label" field.
func TimingLabelIn(vs ...string) predicate.Timing {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Timing(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTimingLabel), v...))
	})
}

// TimingLabelNotIn applies the NotIn predicate on the "timing_label" field.
func TimingLabelNotIn(vs ...string) predicate.Timing {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Timing(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTimingLabel), v...))
	})
}

// TimingLabelGT applies the GT predicate on the "timing_label" field.
func TimingLabelGT(v string) predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTimingLabel), v))
	})
}

// TimingLabelGTE applies the GTE predicate on the "timing_label" field.
func TimingLabelGTE(v string) predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTimingLabel), v))
	})
}

// TimingLabelLT applies the LT predicate on the "timing_label" field.
func TimingLabelLT(v string) predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTimingLabel), v))
	})
}

// TimingLabelLTE applies the LTE predicate on the "timing_label" field.
func TimingLabelLTE(v string) predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTimingLabel), v))
	})
}

// TimingLabelContains applies the Contains predicate on the "timing_label" field.
func TimingLabelContains(v string) predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTimingLabel), v))
	})
}

// TimingLabelHasPrefix applies the HasPrefix predicate on the "timing_label" field.
func TimingLabelHasPrefix(v string) predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTimingLabel), v))
	})
}

// TimingLabelHasSuffix applies the HasSuffix predicate on the "timing_label" field.
func TimingLabelHasSuffix(v string) predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTimingLabel), v))
	})
}

// TimingLabelEqualFold applies the EqualFold predicate on the "timing_label" field.
func TimingLabelEqualFold(v string) predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTimingLabel), v))
	})
}

// TimingLabelContainsFold applies the ContainsFold predicate on the "timing_label" field.
func TimingLabelContainsFold(v string) predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTimingLabel), v))
	})
}

// UnitEQ applies the EQ predicate on the "unit" field.
func UnitEQ(v string) predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnit), v))
	})
}

// UnitNEQ applies the NEQ predicate on the "unit" field.
func UnitNEQ(v string) predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUnit), v))
	})
}

// UnitIn applies the In predicate on the "unit" field.
func UnitIn(vs ...string) predicate.Timing {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Timing(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUnit), v...))
	})
}

// UnitNotIn applies the NotIn predicate on the "unit" field.
func UnitNotIn(vs ...string) predicate.Timing {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Timing(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUnit), v...))
	})
}

// UnitGT applies the GT predicate on the "unit" field.
func UnitGT(v string) predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUnit), v))
	})
}

// UnitGTE applies the GTE predicate on the "unit" field.
func UnitGTE(v string) predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUnit), v))
	})
}

// UnitLT applies the LT predicate on the "unit" field.
func UnitLT(v string) predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUnit), v))
	})
}

// UnitLTE applies the LTE predicate on the "unit" field.
func UnitLTE(v string) predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUnit), v))
	})
}

// UnitContains applies the Contains predicate on the "unit" field.
func UnitContains(v string) predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUnit), v))
	})
}

// UnitHasPrefix applies the HasPrefix predicate on the "unit" field.
func UnitHasPrefix(v string) predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUnit), v))
	})
}

// UnitHasSuffix applies the HasSuffix predicate on the "unit" field.
func UnitHasSuffix(v string) predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUnit), v))
	})
}

// UnitEqualFold applies the EqualFold predicate on the "unit" field.
func UnitEqualFold(v string) predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUnit), v))
	})
}

// UnitContainsFold applies the ContainsFold predicate on the "unit" field.
func UnitContainsFold(v string) predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUnit), v))
	})
}

// VariableEQ applies the EQ predicate on the "variable" field.
func VariableEQ(v string) predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVariable), v))
	})
}

// VariableNEQ applies the NEQ predicate on the "variable" field.
func VariableNEQ(v string) predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVariable), v))
	})
}

// VariableIn applies the In predicate on the "variable" field.
func VariableIn(vs ...string) predicate.Timing {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Timing(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldVariable), v...))
	})
}

// VariableNotIn applies the NotIn predicate on the "variable" field.
func VariableNotIn(vs ...string) predicate.Timing {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Timing(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldVariable), v...))
	})
}

// VariableGT applies the GT predicate on the "variable" field.
func VariableGT(v string) predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVariable), v))
	})
}

// VariableGTE applies the GTE predicate on the "variable" field.
func VariableGTE(v string) predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVariable), v))
	})
}

// VariableLT applies the LT predicate on the "variable" field.
func VariableLT(v string) predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVariable), v))
	})
}

// VariableLTE applies the LTE predicate on the "variable" field.
func VariableLTE(v string) predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVariable), v))
	})
}

// VariableContains applies the Contains predicate on the "variable" field.
func VariableContains(v string) predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldVariable), v))
	})
}

// VariableHasPrefix applies the HasPrefix predicate on the "variable" field.
func VariableHasPrefix(v string) predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldVariable), v))
	})
}

// VariableHasSuffix applies the HasSuffix predicate on the "variable" field.
func VariableHasSuffix(v string) predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldVariable), v))
	})
}

// VariableEqualFold applies the EqualFold predicate on the "variable" field.
func VariableEqualFold(v string) predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldVariable), v))
	})
}

// VariableContainsFold applies the ContainsFold predicate on the "variable" field.
func VariableContainsFold(v string) predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldVariable), v))
	})
}

// ValueEQ applies the EQ predicate on the "value" field.
func ValueEQ(v float64) predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldValue), v))
	})
}

// ValueNEQ applies the NEQ predicate on the "value" field.
func ValueNEQ(v float64) predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldValue), v))
	})
}

// ValueIn applies the In predicate on the "value" field.
func ValueIn(vs ...float64) predicate.Timing {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Timing(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldValue), v...))
	})
}

// ValueNotIn applies the NotIn predicate on the "value" field.
func ValueNotIn(vs ...float64) predicate.Timing {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Timing(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldValue), v...))
	})
}

// ValueGT applies the GT predicate on the "value" field.
func ValueGT(v float64) predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldValue), v))
	})
}

// ValueGTE applies the GTE predicate on the "value" field.
func ValueGTE(v float64) predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldValue), v))
	})
}

// ValueLT applies the LT predicate on the "value" field.
func ValueLT(v float64) predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldValue), v))
	})
}

// ValueLTE applies the LTE predicate on the "value" field.
func ValueLTE(v float64) predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldValue), v))
	})
}

// HasEvents applies the HasEdge predicate on the "events" edge.
func HasEvents() predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EventsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, EventsTable, EventsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEventsWith applies the HasEdge predicate on the "events" edge with a given conditions (other predicates).
func HasEventsWith(preds ...predicate.Event) predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EventsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, EventsTable, EventsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Timing) predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Timing) predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Timing) predicate.Timing {
	return predicate.Timing(func(s *sql.Selector) {
		p(s.Not())
	})
}
