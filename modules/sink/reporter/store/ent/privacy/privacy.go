// Code generated by entc, DO NOT EDIT.

package privacy

import (
	"context"
	"errors"
	"fmt"

	"github.com/blushft/strana/modules/sink/reporter/store/ent"
)

var (
	// Allow may be returned by rules to indicate that the policy
	// evaluation should terminate with an allow decision.
	Allow = errors.New("ent/privacy: allow rule")

	// Deny may be returned by rules to indicate that the policy
	// evaluation should terminate with an deny decision.
	Deny = errors.New("ent/privacy: deny rule")

	// Skip may be returned by rules to indicate that the policy
	// evaluation should continue to the next rule.
	Skip = errors.New("ent/privacy: skip rule")
)

// Allowf returns an formatted wrapped Allow decision.
func Allowf(format string, a ...interface{}) error {
	return fmt.Errorf(format+": %w", append(a, Allow)...)
}

// Denyf returns an formatted wrapped Deny decision.
func Denyf(format string, a ...interface{}) error {
	return fmt.Errorf(format+": %w", append(a, Deny)...)
}

// Skipf returns an formatted wrapped Skip decision.
func Skipf(format string, a ...interface{}) error {
	return fmt.Errorf(format+": %w", append(a, Skip)...)
}

type decisionCtxKey struct{}

// DecisionContext creates a decision context.
func DecisionContext(parent context.Context, decision error) context.Context {
	if decision == nil || errors.Is(decision, Skip) {
		return parent
	}
	return context.WithValue(parent, decisionCtxKey{}, decision)
}

func decisionFromContext(ctx context.Context) (error, bool) {
	decision, ok := ctx.Value(decisionCtxKey{}).(error)
	if ok && errors.Is(decision, Allow) {
		decision = nil
	}
	return decision, ok
}

type (
	// QueryPolicy combines multiple query rules into a single policy.
	QueryPolicy []QueryRule

	// QueryRule defines the interface deciding whether a
	// query is allowed and optionally modify it.
	QueryRule interface {
		EvalQuery(context.Context, ent.Query) error
	}
)

// EvalQuery evaluates a query against a query policy.
func (policy QueryPolicy) EvalQuery(ctx context.Context, q ent.Query) error {
	if decision, ok := decisionFromContext(ctx); ok {
		return decision
	}
	for _, rule := range policy {
		switch decision := rule.EvalQuery(ctx, q); {
		case decision == nil || errors.Is(decision, Skip):
		case errors.Is(decision, Allow):
			return nil
		default:
			return decision
		}
	}
	return nil
}

// QueryRuleFunc type is an adapter to allow the use of
// ordinary functions as query rules.
type QueryRuleFunc func(context.Context, ent.Query) error

// Eval returns f(ctx, q).
func (f QueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	return f(ctx, q)
}

type (
	// MutationPolicy combines multiple mutation rules into a single policy.
	MutationPolicy []MutationRule

	// MutationRule defines the interface deciding whether a
	// mutation is allowed and optionally modify it.
	MutationRule interface {
		EvalMutation(context.Context, ent.Mutation) error
	}
)

// EvalMutation evaluates a mutation against a mutation policy.
func (policy MutationPolicy) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if decision, ok := decisionFromContext(ctx); ok {
		return decision
	}
	for _, rule := range policy {
		switch decision := rule.EvalMutation(ctx, m); {
		case decision == nil || errors.Is(decision, Skip):
		case errors.Is(decision, Allow):
			return nil
		default:
			return decision
		}
	}
	return nil
}

// MutationRuleFunc type is an adapter to allow the use of
// ordinary functions as mutation rules.
type MutationRuleFunc func(context.Context, ent.Mutation) error

// EvalMutation returns f(ctx, m).
func (f MutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	return f(ctx, m)
}

// Policy groups query and mutation policies.
type Policy struct {
	Query    QueryPolicy
	Mutation MutationPolicy
}

// EvalQuery forwards evaluation to query policy.
func (policy Policy) EvalQuery(ctx context.Context, q ent.Query) error {
	return policy.Query.EvalQuery(ctx, q)
}

// EvalMutation forwards evaluation to mutation policy.
func (policy Policy) EvalMutation(ctx context.Context, m ent.Mutation) error {
	return policy.Mutation.EvalMutation(ctx, m)
}

// QueryMutationRule is the interface that groups query and mutation rules.
type QueryMutationRule interface {
	QueryRule
	MutationRule
}

// AlwaysAllowRule returns a rule that returns an allow decision.
func AlwaysAllowRule() QueryMutationRule {
	return fixedDecision{Allow}
}

// AlwaysDenyRule returns a rule that returns a deny decision.
func AlwaysDenyRule() QueryMutationRule {
	return fixedDecision{Deny}
}

type fixedDecision struct {
	decision error
}

func (f fixedDecision) EvalQuery(context.Context, ent.Query) error {
	return f.decision
}

func (f fixedDecision) EvalMutation(context.Context, ent.Mutation) error {
	return f.decision
}

type contextDecision struct {
	eval func(context.Context) error
}

// ContextQueryMutationRule creates a query/mutation rule from a context eval func.
func ContextQueryMutationRule(eval func(context.Context) error) QueryMutationRule {
	return contextDecision{eval}
}

func (c contextDecision) EvalQuery(ctx context.Context, _ ent.Query) error {
	return c.eval(ctx)
}

func (c contextDecision) EvalMutation(ctx context.Context, _ ent.Mutation) error {
	return c.eval(ctx)
}

// OnMutationOperation evaluates the given rule only on a given mutation operation.
func OnMutationOperation(rule MutationRule, op ent.Op) MutationRule {
	return MutationRuleFunc(func(ctx context.Context, m ent.Mutation) error {
		if m.Op().Is(op) {
			return rule.EvalMutation(ctx, m)
		}
		return Skip
	})
}

// DenyMutationOperationRule returns a rule denying specified mutation operation.
func DenyMutationOperationRule(op ent.Op) MutationRule {
	rule := MutationRuleFunc(func(_ context.Context, m ent.Mutation) error {
		return Denyf("ent/privacy: operation %s is not allowed", m.Op())
	})
	return OnMutationOperation(rule, op)
}

// The ActionQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ActionQueryRuleFunc func(context.Context, *ent.ActionQuery) error

// EvalQuery return f(ctx, q).
func (f ActionQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ActionQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ActionQuery", q)
}

// The ActionMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ActionMutationRuleFunc func(context.Context, *ent.ActionMutation) error

// EvalMutation calls f(ctx, m).
func (f ActionMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ActionMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ActionMutation", m)
}

// The AliasQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AliasQueryRuleFunc func(context.Context, *ent.AliasQuery) error

// EvalQuery return f(ctx, q).
func (f AliasQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AliasQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.AliasQuery", q)
}

// The AliasMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AliasMutationRuleFunc func(context.Context, *ent.AliasMutation) error

// EvalMutation calls f(ctx, m).
func (f AliasMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.AliasMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.AliasMutation", m)
}

// The AppQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AppQueryRuleFunc func(context.Context, *ent.AppQuery) error

// EvalQuery return f(ctx, q).
func (f AppQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AppQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.AppQuery", q)
}

// The AppMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AppMutationRuleFunc func(context.Context, *ent.AppMutation) error

// EvalMutation calls f(ctx, m).
func (f AppMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.AppMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.AppMutation", m)
}

// The BrowserQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type BrowserQueryRuleFunc func(context.Context, *ent.BrowserQuery) error

// EvalQuery return f(ctx, q).
func (f BrowserQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.BrowserQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.BrowserQuery", q)
}

// The BrowserMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type BrowserMutationRuleFunc func(context.Context, *ent.BrowserMutation) error

// EvalMutation calls f(ctx, m).
func (f BrowserMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.BrowserMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.BrowserMutation", m)
}

// The CampaignQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CampaignQueryRuleFunc func(context.Context, *ent.CampaignQuery) error

// EvalQuery return f(ctx, q).
func (f CampaignQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CampaignQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CampaignQuery", q)
}

// The CampaignMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CampaignMutationRuleFunc func(context.Context, *ent.CampaignMutation) error

// EvalMutation calls f(ctx, m).
func (f CampaignMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CampaignMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CampaignMutation", m)
}

// The ConnectivityQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ConnectivityQueryRuleFunc func(context.Context, *ent.ConnectivityQuery) error

// EvalQuery return f(ctx, q).
func (f ConnectivityQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ConnectivityQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ConnectivityQuery", q)
}

// The ConnectivityMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ConnectivityMutationRuleFunc func(context.Context, *ent.ConnectivityMutation) error

// EvalMutation calls f(ctx, m).
func (f ConnectivityMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ConnectivityMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ConnectivityMutation", m)
}

// The DeviceQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DeviceQueryRuleFunc func(context.Context, *ent.DeviceQuery) error

// EvalQuery return f(ctx, q).
func (f DeviceQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DeviceQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.DeviceQuery", q)
}

// The DeviceMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DeviceMutationRuleFunc func(context.Context, *ent.DeviceMutation) error

// EvalMutation calls f(ctx, m).
func (f DeviceMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.DeviceMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.DeviceMutation", m)
}

// The EventQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type EventQueryRuleFunc func(context.Context, *ent.EventQuery) error

// EvalQuery return f(ctx, q).
func (f EventQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.EventQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.EventQuery", q)
}

// The EventMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type EventMutationRuleFunc func(context.Context, *ent.EventMutation) error

// EvalMutation calls f(ctx, m).
func (f EventMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.EventMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.EventMutation", m)
}

// The ExtraQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ExtraQueryRuleFunc func(context.Context, *ent.ExtraQuery) error

// EvalQuery return f(ctx, q).
func (f ExtraQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ExtraQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ExtraQuery", q)
}

// The ExtraMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ExtraMutationRuleFunc func(context.Context, *ent.ExtraMutation) error

// EvalMutation calls f(ctx, m).
func (f ExtraMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ExtraMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ExtraMutation", m)
}

// The GroupQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type GroupQueryRuleFunc func(context.Context, *ent.GroupQuery) error

// EvalQuery return f(ctx, q).
func (f GroupQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.GroupQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.GroupQuery", q)
}

// The GroupMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type GroupMutationRuleFunc func(context.Context, *ent.GroupMutation) error

// EvalMutation calls f(ctx, m).
func (f GroupMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.GroupMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.GroupMutation", m)
}

// The LibraryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type LibraryQueryRuleFunc func(context.Context, *ent.LibraryQuery) error

// EvalQuery return f(ctx, q).
func (f LibraryQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.LibraryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.LibraryQuery", q)
}

// The LibraryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type LibraryMutationRuleFunc func(context.Context, *ent.LibraryMutation) error

// EvalMutation calls f(ctx, m).
func (f LibraryMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.LibraryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.LibraryMutation", m)
}

// The LocationQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type LocationQueryRuleFunc func(context.Context, *ent.LocationQuery) error

// EvalQuery return f(ctx, q).
func (f LocationQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.LocationQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.LocationQuery", q)
}

// The LocationMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type LocationMutationRuleFunc func(context.Context, *ent.LocationMutation) error

// EvalMutation calls f(ctx, m).
func (f LocationMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.LocationMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.LocationMutation", m)
}

// The NetworkQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type NetworkQueryRuleFunc func(context.Context, *ent.NetworkQuery) error

// EvalQuery return f(ctx, q).
func (f NetworkQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.NetworkQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.NetworkQuery", q)
}

// The NetworkMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type NetworkMutationRuleFunc func(context.Context, *ent.NetworkMutation) error

// EvalMutation calls f(ctx, m).
func (f NetworkMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.NetworkMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.NetworkMutation", m)
}

// The OSContextQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OSContextQueryRuleFunc func(context.Context, *ent.OSContextQuery) error

// EvalQuery return f(ctx, q).
func (f OSContextQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OSContextQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.OSContextQuery", q)
}

// The OSContextMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OSContextMutationRuleFunc func(context.Context, *ent.OSContextMutation) error

// EvalMutation calls f(ctx, m).
func (f OSContextMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.OSContextMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.OSContextMutation", m)
}

// The PageQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PageQueryRuleFunc func(context.Context, *ent.PageQuery) error

// EvalQuery return f(ctx, q).
func (f PageQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PageQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.PageQuery", q)
}

// The PageMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PageMutationRuleFunc func(context.Context, *ent.PageMutation) error

// EvalMutation calls f(ctx, m).
func (f PageMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.PageMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.PageMutation", m)
}

// The ReferrerQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ReferrerQueryRuleFunc func(context.Context, *ent.ReferrerQuery) error

// EvalQuery return f(ctx, q).
func (f ReferrerQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ReferrerQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ReferrerQuery", q)
}

// The ReferrerMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ReferrerMutationRuleFunc func(context.Context, *ent.ReferrerMutation) error

// EvalMutation calls f(ctx, m).
func (f ReferrerMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ReferrerMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ReferrerMutation", m)
}

// The ScreenQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ScreenQueryRuleFunc func(context.Context, *ent.ScreenQuery) error

// EvalQuery return f(ctx, q).
func (f ScreenQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ScreenQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ScreenQuery", q)
}

// The ScreenMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ScreenMutationRuleFunc func(context.Context, *ent.ScreenMutation) error

// EvalMutation calls f(ctx, m).
func (f ScreenMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ScreenMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ScreenMutation", m)
}

// The SessionQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type SessionQueryRuleFunc func(context.Context, *ent.SessionQuery) error

// EvalQuery return f(ctx, q).
func (f SessionQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SessionQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.SessionQuery", q)
}

// The SessionMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type SessionMutationRuleFunc func(context.Context, *ent.SessionMutation) error

// EvalMutation calls f(ctx, m).
func (f SessionMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.SessionMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.SessionMutation", m)
}

// The TimingQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type TimingQueryRuleFunc func(context.Context, *ent.TimingQuery) error

// EvalQuery return f(ctx, q).
func (f TimingQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.TimingQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.TimingQuery", q)
}

// The TimingMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type TimingMutationRuleFunc func(context.Context, *ent.TimingMutation) error

// EvalMutation calls f(ctx, m).
func (f TimingMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.TimingMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.TimingMutation", m)
}

// The UserQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type UserQueryRuleFunc func(context.Context, *ent.UserQuery) error

// EvalQuery return f(ctx, q).
func (f UserQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.UserQuery", q)
}

// The UserMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type UserMutationRuleFunc func(context.Context, *ent.UserMutation) error

// EvalMutation calls f(ctx, m).
func (f UserMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.UserMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.UserMutation", m)
}

// The ViewportQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ViewportQueryRuleFunc func(context.Context, *ent.ViewportQuery) error

// EvalQuery return f(ctx, q).
func (f ViewportQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ViewportQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ViewportQuery", q)
}

// The ViewportMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ViewportMutationRuleFunc func(context.Context, *ent.ViewportMutation) error

// EvalMutation calls f(ctx, m).
func (f ViewportMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ViewportMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ViewportMutation", m)
}
