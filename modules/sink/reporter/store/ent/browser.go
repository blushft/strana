// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/blushft/strana/modules/sink/reporter/store/ent/browser"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/event"
	"github.com/facebook/ent/dialect/sql"
	"github.com/google/uuid"
)

// Browser is the model entity for the Browser schema.
type Browser struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Version holds the value of the "version" field.
	Version string `json:"version,omitempty"`
	// Useragent holds the value of the "useragent" field.
	Useragent string `json:"useragent,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BrowserQuery when eager-loading is set.
	Edges         BrowserEdges `json:"edges"`
	event_browser *uuid.UUID
}

// BrowserEdges holds the relations/edges for other nodes in the graph.
type BrowserEdges struct {
	// Event holds the value of the event edge.
	Event *Event
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EventOrErr returns the Event value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BrowserEdges) EventOrErr() (*Event, error) {
	if e.loadedTypes[0] {
		if e.Event == nil {
			// The edge event was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: event.Label}
		}
		return e.Event, nil
	}
	return nil, &NotLoadedError{edge: "event"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Browser) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // name
		&sql.NullString{}, // version
		&sql.NullString{}, // useragent
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Browser) fkValues() []interface{} {
	return []interface{}{
		&uuid.UUID{}, // event_browser
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Browser fields.
func (b *Browser) assignValues(values ...interface{}) error {
	if m, n := len(values), len(browser.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	b.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		b.Name = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field version", values[1])
	} else if value.Valid {
		b.Version = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field useragent", values[2])
	} else if value.Valid {
		b.Useragent = value.String
	}
	values = values[3:]
	if len(values) == len(browser.ForeignKeys) {
		if value, ok := values[0].(*uuid.UUID); !ok {
			return fmt.Errorf("unexpected type %T for field event_browser", values[0])
		} else if value != nil {
			b.event_browser = value
		}
	}
	return nil
}

// QueryEvent queries the event edge of the Browser.
func (b *Browser) QueryEvent() *EventQuery {
	return (&BrowserClient{config: b.config}).QueryEvent(b)
}

// Update returns a builder for updating this Browser.
// Note that, you need to call Browser.Unwrap() before calling this method, if this Browser
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Browser) Update() *BrowserUpdateOne {
	return (&BrowserClient{config: b.config}).UpdateOne(b)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (b *Browser) Unwrap() *Browser {
	tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Browser is not a transactional entity")
	}
	b.config.driver = tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Browser) String() string {
	var builder strings.Builder
	builder.WriteString("Browser(")
	builder.WriteString(fmt.Sprintf("id=%v", b.ID))
	builder.WriteString(", name=")
	builder.WriteString(b.Name)
	builder.WriteString(", version=")
	builder.WriteString(b.Version)
	builder.WriteString(", useragent=")
	builder.WriteString(b.Useragent)
	builder.WriteByte(')')
	return builder.String()
}

// Browsers is a parsable slice of Browser.
type Browsers []*Browser

func (b Browsers) config(cfg config) {
	for _i := range b {
		b[_i].config = cfg
	}
}
