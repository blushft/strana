// Code generated by entc, DO NOT EDIT.

package app

import (
	"github.com/blushft/strana/modules/sink/reporter/store/ent/predicate"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// TrackingID applies equality check predicate on the "tracking_id" field. It's identical to TrackingIDEQ.
func TrackingID(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTrackingID), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.App {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.App(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.App {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.App(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// TrackingIDEQ applies the EQ predicate on the "tracking_id" field.
func TrackingIDEQ(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTrackingID), v))
	})
}

// TrackingIDNEQ applies the NEQ predicate on the "tracking_id" field.
func TrackingIDNEQ(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTrackingID), v))
	})
}

// TrackingIDIn applies the In predicate on the "tracking_id" field.
func TrackingIDIn(vs ...string) predicate.App {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.App(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTrackingID), v...))
	})
}

// TrackingIDNotIn applies the NotIn predicate on the "tracking_id" field.
func TrackingIDNotIn(vs ...string) predicate.App {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.App(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTrackingID), v...))
	})
}

// TrackingIDGT applies the GT predicate on the "tracking_id" field.
func TrackingIDGT(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTrackingID), v))
	})
}

// TrackingIDGTE applies the GTE predicate on the "tracking_id" field.
func TrackingIDGTE(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTrackingID), v))
	})
}

// TrackingIDLT applies the LT predicate on the "tracking_id" field.
func TrackingIDLT(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTrackingID), v))
	})
}

// TrackingIDLTE applies the LTE predicate on the "tracking_id" field.
func TrackingIDLTE(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTrackingID), v))
	})
}

// TrackingIDContains applies the Contains predicate on the "tracking_id" field.
func TrackingIDContains(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTrackingID), v))
	})
}

// TrackingIDHasPrefix applies the HasPrefix predicate on the "tracking_id" field.
func TrackingIDHasPrefix(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTrackingID), v))
	})
}

// TrackingIDHasSuffix applies the HasSuffix predicate on the "tracking_id" field.
func TrackingIDHasSuffix(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTrackingID), v))
	})
}

// TrackingIDEqualFold applies the EqualFold predicate on the "tracking_id" field.
func TrackingIDEqualFold(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTrackingID), v))
	})
}

// TrackingIDContainsFold applies the ContainsFold predicate on the "tracking_id" field.
func TrackingIDContainsFold(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTrackingID), v))
	})
}

// HasSessions applies the HasEdge predicate on the "sessions" edge.
func HasSessions() predicate.App {
	return predicate.App(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SessionsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, SessionsTable, SessionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSessionsWith applies the HasEdge predicate on the "sessions" edge with a given conditions (other predicates).
func HasSessionsWith(preds ...predicate.Session) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SessionsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, SessionsTable, SessionsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPageviews applies the HasEdge predicate on the "pageviews" edge.
func HasPageviews() predicate.App {
	return predicate.App(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PageviewsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, PageviewsTable, PageviewsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPageviewsWith applies the HasEdge predicate on the "pageviews" edge with a given conditions (other predicates).
func HasPageviewsWith(preds ...predicate.PageView) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PageviewsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, PageviewsTable, PageviewsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStats applies the HasEdge predicate on the "stats" edge.
func HasStats() predicate.App {
	return predicate.App(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StatsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, StatsTable, StatsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStatsWith applies the HasEdge predicate on the "stats" edge with a given conditions (other predicates).
func HasStatsWith(preds ...predicate.AppStat) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StatsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, StatsTable, StatsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPageStats applies the HasEdge predicate on the "page_stats" edge.
func HasPageStats() predicate.App {
	return predicate.App(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PageStatsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PageStatsTable, PageStatsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPageStatsWith applies the HasEdge predicate on the "page_stats" edge with a given conditions (other predicates).
func HasPageStatsWith(preds ...predicate.PageStat) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PageStatsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PageStatsTable, PageStatsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.App) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.App) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.App) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		p(s.Not())
	})
}
