// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/blushft/strana/modules/sink/reporter/store/ent/action"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/alias"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/app"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/browser"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/campaign"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/connectivity"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/device"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/event"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/extra"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/group"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/library"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/location"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/network"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/oscontext"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/page"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/predicate"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/referrer"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/screen"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/session"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/timing"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/user"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/viewport"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/google/uuid"
)

// EventUpdate is the builder for updating Event entities.
type EventUpdate struct {
	config
	hooks      []Hook
	mutation   *EventMutation
	predicates []predicate.Event
}

// Where adds a new predicate for the builder.
func (eu *EventUpdate) Where(ps ...predicate.Event) *EventUpdate {
	eu.predicates = append(eu.predicates, ps...)
	return eu
}

// SetTrackingID sets the tracking_id field.
func (eu *EventUpdate) SetTrackingID(s string) *EventUpdate {
	eu.mutation.SetTrackingID(s)
	return eu
}

// SetEvent sets the event field.
func (eu *EventUpdate) SetEvent(e event.Event) *EventUpdate {
	eu.mutation.SetEvent(e)
	return eu
}

// SetNonInteractive sets the non_interactive field.
func (eu *EventUpdate) SetNonInteractive(b bool) *EventUpdate {
	eu.mutation.SetNonInteractive(b)
	return eu
}

// SetChannel sets the channel field.
func (eu *EventUpdate) SetChannel(s string) *EventUpdate {
	eu.mutation.SetChannel(s)
	return eu
}

// SetNillableChannel sets the channel field if the given value is not nil.
func (eu *EventUpdate) SetNillableChannel(s *string) *EventUpdate {
	if s != nil {
		eu.SetChannel(*s)
	}
	return eu
}

// ClearChannel clears the value of channel.
func (eu *EventUpdate) ClearChannel() *EventUpdate {
	eu.mutation.ClearChannel()
	return eu
}

// SetPlatform sets the platform field.
func (eu *EventUpdate) SetPlatform(s string) *EventUpdate {
	eu.mutation.SetPlatform(s)
	return eu
}

// SetNillablePlatform sets the platform field if the given value is not nil.
func (eu *EventUpdate) SetNillablePlatform(s *string) *EventUpdate {
	if s != nil {
		eu.SetPlatform(*s)
	}
	return eu
}

// ClearPlatform clears the value of platform.
func (eu *EventUpdate) ClearPlatform() *EventUpdate {
	eu.mutation.ClearPlatform()
	return eu
}

// SetProperties sets the properties field.
func (eu *EventUpdate) SetProperties(m map[string]interface{}) *EventUpdate {
	eu.mutation.SetProperties(m)
	return eu
}

// ClearProperties clears the value of properties.
func (eu *EventUpdate) ClearProperties() *EventUpdate {
	eu.mutation.ClearProperties()
	return eu
}

// SetTimestamp sets the timestamp field.
func (eu *EventUpdate) SetTimestamp(t time.Time) *EventUpdate {
	eu.mutation.SetTimestamp(t)
	return eu
}

// SetActionID sets the action edge to Action by id.
func (eu *EventUpdate) SetActionID(id int) *EventUpdate {
	eu.mutation.SetActionID(id)
	return eu
}

// SetNillableActionID sets the action edge to Action by id if the given value is not nil.
func (eu *EventUpdate) SetNillableActionID(id *int) *EventUpdate {
	if id != nil {
		eu = eu.SetActionID(*id)
	}
	return eu
}

// SetAction sets the action edge to Action.
func (eu *EventUpdate) SetAction(a *Action) *EventUpdate {
	return eu.SetActionID(a.ID)
}

// SetAliasID sets the alias edge to Alias by id.
func (eu *EventUpdate) SetAliasID(id int) *EventUpdate {
	eu.mutation.SetAliasID(id)
	return eu
}

// SetNillableAliasID sets the alias edge to Alias by id if the given value is not nil.
func (eu *EventUpdate) SetNillableAliasID(id *int) *EventUpdate {
	if id != nil {
		eu = eu.SetAliasID(*id)
	}
	return eu
}

// SetAlias sets the alias edge to Alias.
func (eu *EventUpdate) SetAlias(a *Alias) *EventUpdate {
	return eu.SetAliasID(a.ID)
}

// SetAppID sets the app edge to App by id.
func (eu *EventUpdate) SetAppID(id int) *EventUpdate {
	eu.mutation.SetAppID(id)
	return eu
}

// SetNillableAppID sets the app edge to App by id if the given value is not nil.
func (eu *EventUpdate) SetNillableAppID(id *int) *EventUpdate {
	if id != nil {
		eu = eu.SetAppID(*id)
	}
	return eu
}

// SetApp sets the app edge to App.
func (eu *EventUpdate) SetApp(a *App) *EventUpdate {
	return eu.SetAppID(a.ID)
}

// SetBrowserID sets the browser edge to Browser by id.
func (eu *EventUpdate) SetBrowserID(id int) *EventUpdate {
	eu.mutation.SetBrowserID(id)
	return eu
}

// SetNillableBrowserID sets the browser edge to Browser by id if the given value is not nil.
func (eu *EventUpdate) SetNillableBrowserID(id *int) *EventUpdate {
	if id != nil {
		eu = eu.SetBrowserID(*id)
	}
	return eu
}

// SetBrowser sets the browser edge to Browser.
func (eu *EventUpdate) SetBrowser(b *Browser) *EventUpdate {
	return eu.SetBrowserID(b.ID)
}

// SetCampaignID sets the campaign edge to Campaign by id.
func (eu *EventUpdate) SetCampaignID(id int) *EventUpdate {
	eu.mutation.SetCampaignID(id)
	return eu
}

// SetNillableCampaignID sets the campaign edge to Campaign by id if the given value is not nil.
func (eu *EventUpdate) SetNillableCampaignID(id *int) *EventUpdate {
	if id != nil {
		eu = eu.SetCampaignID(*id)
	}
	return eu
}

// SetCampaign sets the campaign edge to Campaign.
func (eu *EventUpdate) SetCampaign(c *Campaign) *EventUpdate {
	return eu.SetCampaignID(c.ID)
}

// SetConnectivityID sets the connectivity edge to Connectivity by id.
func (eu *EventUpdate) SetConnectivityID(id int) *EventUpdate {
	eu.mutation.SetConnectivityID(id)
	return eu
}

// SetNillableConnectivityID sets the connectivity edge to Connectivity by id if the given value is not nil.
func (eu *EventUpdate) SetNillableConnectivityID(id *int) *EventUpdate {
	if id != nil {
		eu = eu.SetConnectivityID(*id)
	}
	return eu
}

// SetConnectivity sets the connectivity edge to Connectivity.
func (eu *EventUpdate) SetConnectivity(c *Connectivity) *EventUpdate {
	return eu.SetConnectivityID(c.ID)
}

// SetDeviceID sets the device edge to Device by id.
func (eu *EventUpdate) SetDeviceID(id string) *EventUpdate {
	eu.mutation.SetDeviceID(id)
	return eu
}

// SetNillableDeviceID sets the device edge to Device by id if the given value is not nil.
func (eu *EventUpdate) SetNillableDeviceID(id *string) *EventUpdate {
	if id != nil {
		eu = eu.SetDeviceID(*id)
	}
	return eu
}

// SetDevice sets the device edge to Device.
func (eu *EventUpdate) SetDevice(d *Device) *EventUpdate {
	return eu.SetDeviceID(d.ID)
}

// SetExtraID sets the extra edge to Extra by id.
func (eu *EventUpdate) SetExtraID(id int) *EventUpdate {
	eu.mutation.SetExtraID(id)
	return eu
}

// SetNillableExtraID sets the extra edge to Extra by id if the given value is not nil.
func (eu *EventUpdate) SetNillableExtraID(id *int) *EventUpdate {
	if id != nil {
		eu = eu.SetExtraID(*id)
	}
	return eu
}

// SetExtra sets the extra edge to Extra.
func (eu *EventUpdate) SetExtra(e *Extra) *EventUpdate {
	return eu.SetExtraID(e.ID)
}

// SetGroupID sets the group edge to Group by id.
func (eu *EventUpdate) SetGroupID(id int) *EventUpdate {
	eu.mutation.SetGroupID(id)
	return eu
}

// SetNillableGroupID sets the group edge to Group by id if the given value is not nil.
func (eu *EventUpdate) SetNillableGroupID(id *int) *EventUpdate {
	if id != nil {
		eu = eu.SetGroupID(*id)
	}
	return eu
}

// SetGroup sets the group edge to Group.
func (eu *EventUpdate) SetGroup(g *Group) *EventUpdate {
	return eu.SetGroupID(g.ID)
}

// SetLibraryID sets the library edge to Library by id.
func (eu *EventUpdate) SetLibraryID(id int) *EventUpdate {
	eu.mutation.SetLibraryID(id)
	return eu
}

// SetNillableLibraryID sets the library edge to Library by id if the given value is not nil.
func (eu *EventUpdate) SetNillableLibraryID(id *int) *EventUpdate {
	if id != nil {
		eu = eu.SetLibraryID(*id)
	}
	return eu
}

// SetLibrary sets the library edge to Library.
func (eu *EventUpdate) SetLibrary(l *Library) *EventUpdate {
	return eu.SetLibraryID(l.ID)
}

// SetLocationID sets the location edge to Location by id.
func (eu *EventUpdate) SetLocationID(id int) *EventUpdate {
	eu.mutation.SetLocationID(id)
	return eu
}

// SetNillableLocationID sets the location edge to Location by id if the given value is not nil.
func (eu *EventUpdate) SetNillableLocationID(id *int) *EventUpdate {
	if id != nil {
		eu = eu.SetLocationID(*id)
	}
	return eu
}

// SetLocation sets the location edge to Location.
func (eu *EventUpdate) SetLocation(l *Location) *EventUpdate {
	return eu.SetLocationID(l.ID)
}

// SetNetworkID sets the network edge to Network by id.
func (eu *EventUpdate) SetNetworkID(id int) *EventUpdate {
	eu.mutation.SetNetworkID(id)
	return eu
}

// SetNillableNetworkID sets the network edge to Network by id if the given value is not nil.
func (eu *EventUpdate) SetNillableNetworkID(id *int) *EventUpdate {
	if id != nil {
		eu = eu.SetNetworkID(*id)
	}
	return eu
}

// SetNetwork sets the network edge to Network.
func (eu *EventUpdate) SetNetwork(n *Network) *EventUpdate {
	return eu.SetNetworkID(n.ID)
}

// SetOsID sets the os edge to OSContext by id.
func (eu *EventUpdate) SetOsID(id int) *EventUpdate {
	eu.mutation.SetOsID(id)
	return eu
}

// SetNillableOsID sets the os edge to OSContext by id if the given value is not nil.
func (eu *EventUpdate) SetNillableOsID(id *int) *EventUpdate {
	if id != nil {
		eu = eu.SetOsID(*id)
	}
	return eu
}

// SetOs sets the os edge to OSContext.
func (eu *EventUpdate) SetOs(o *OSContext) *EventUpdate {
	return eu.SetOsID(o.ID)
}

// SetPageID sets the page edge to Page by id.
func (eu *EventUpdate) SetPageID(id int) *EventUpdate {
	eu.mutation.SetPageID(id)
	return eu
}

// SetNillablePageID sets the page edge to Page by id if the given value is not nil.
func (eu *EventUpdate) SetNillablePageID(id *int) *EventUpdate {
	if id != nil {
		eu = eu.SetPageID(*id)
	}
	return eu
}

// SetPage sets the page edge to Page.
func (eu *EventUpdate) SetPage(p *Page) *EventUpdate {
	return eu.SetPageID(p.ID)
}

// SetReferrerID sets the referrer edge to Referrer by id.
func (eu *EventUpdate) SetReferrerID(id int) *EventUpdate {
	eu.mutation.SetReferrerID(id)
	return eu
}

// SetNillableReferrerID sets the referrer edge to Referrer by id if the given value is not nil.
func (eu *EventUpdate) SetNillableReferrerID(id *int) *EventUpdate {
	if id != nil {
		eu = eu.SetReferrerID(*id)
	}
	return eu
}

// SetReferrer sets the referrer edge to Referrer.
func (eu *EventUpdate) SetReferrer(r *Referrer) *EventUpdate {
	return eu.SetReferrerID(r.ID)
}

// SetScreenID sets the screen edge to Screen by id.
func (eu *EventUpdate) SetScreenID(id int) *EventUpdate {
	eu.mutation.SetScreenID(id)
	return eu
}

// SetNillableScreenID sets the screen edge to Screen by id if the given value is not nil.
func (eu *EventUpdate) SetNillableScreenID(id *int) *EventUpdate {
	if id != nil {
		eu = eu.SetScreenID(*id)
	}
	return eu
}

// SetScreen sets the screen edge to Screen.
func (eu *EventUpdate) SetScreen(s *Screen) *EventUpdate {
	return eu.SetScreenID(s.ID)
}

// SetSessionID sets the session edge to Session by id.
func (eu *EventUpdate) SetSessionID(id uuid.UUID) *EventUpdate {
	eu.mutation.SetSessionID(id)
	return eu
}

// SetNillableSessionID sets the session edge to Session by id if the given value is not nil.
func (eu *EventUpdate) SetNillableSessionID(id *uuid.UUID) *EventUpdate {
	if id != nil {
		eu = eu.SetSessionID(*id)
	}
	return eu
}

// SetSession sets the session edge to Session.
func (eu *EventUpdate) SetSession(s *Session) *EventUpdate {
	return eu.SetSessionID(s.ID)
}

// SetTimingID sets the timing edge to Timing by id.
func (eu *EventUpdate) SetTimingID(id int) *EventUpdate {
	eu.mutation.SetTimingID(id)
	return eu
}

// SetNillableTimingID sets the timing edge to Timing by id if the given value is not nil.
func (eu *EventUpdate) SetNillableTimingID(id *int) *EventUpdate {
	if id != nil {
		eu = eu.SetTimingID(*id)
	}
	return eu
}

// SetTiming sets the timing edge to Timing.
func (eu *EventUpdate) SetTiming(t *Timing) *EventUpdate {
	return eu.SetTimingID(t.ID)
}

// SetViewportID sets the viewport edge to Viewport by id.
func (eu *EventUpdate) SetViewportID(id int) *EventUpdate {
	eu.mutation.SetViewportID(id)
	return eu
}

// SetNillableViewportID sets the viewport edge to Viewport by id if the given value is not nil.
func (eu *EventUpdate) SetNillableViewportID(id *int) *EventUpdate {
	if id != nil {
		eu = eu.SetViewportID(*id)
	}
	return eu
}

// SetViewport sets the viewport edge to Viewport.
func (eu *EventUpdate) SetViewport(v *Viewport) *EventUpdate {
	return eu.SetViewportID(v.ID)
}

// SetUserID sets the user edge to User by id.
func (eu *EventUpdate) SetUserID(id string) *EventUpdate {
	eu.mutation.SetUserID(id)
	return eu
}

// SetNillableUserID sets the user edge to User by id if the given value is not nil.
func (eu *EventUpdate) SetNillableUserID(id *string) *EventUpdate {
	if id != nil {
		eu = eu.SetUserID(*id)
	}
	return eu
}

// SetUser sets the user edge to User.
func (eu *EventUpdate) SetUser(u *User) *EventUpdate {
	return eu.SetUserID(u.ID)
}

// Mutation returns the EventMutation object of the builder.
func (eu *EventUpdate) Mutation() *EventMutation {
	return eu.mutation
}

// ClearAction clears the action edge to Action.
func (eu *EventUpdate) ClearAction() *EventUpdate {
	eu.mutation.ClearAction()
	return eu
}

// ClearAlias clears the alias edge to Alias.
func (eu *EventUpdate) ClearAlias() *EventUpdate {
	eu.mutation.ClearAlias()
	return eu
}

// ClearApp clears the app edge to App.
func (eu *EventUpdate) ClearApp() *EventUpdate {
	eu.mutation.ClearApp()
	return eu
}

// ClearBrowser clears the browser edge to Browser.
func (eu *EventUpdate) ClearBrowser() *EventUpdate {
	eu.mutation.ClearBrowser()
	return eu
}

// ClearCampaign clears the campaign edge to Campaign.
func (eu *EventUpdate) ClearCampaign() *EventUpdate {
	eu.mutation.ClearCampaign()
	return eu
}

// ClearConnectivity clears the connectivity edge to Connectivity.
func (eu *EventUpdate) ClearConnectivity() *EventUpdate {
	eu.mutation.ClearConnectivity()
	return eu
}

// ClearDevice clears the device edge to Device.
func (eu *EventUpdate) ClearDevice() *EventUpdate {
	eu.mutation.ClearDevice()
	return eu
}

// ClearExtra clears the extra edge to Extra.
func (eu *EventUpdate) ClearExtra() *EventUpdate {
	eu.mutation.ClearExtra()
	return eu
}

// ClearGroup clears the group edge to Group.
func (eu *EventUpdate) ClearGroup() *EventUpdate {
	eu.mutation.ClearGroup()
	return eu
}

// ClearLibrary clears the library edge to Library.
func (eu *EventUpdate) ClearLibrary() *EventUpdate {
	eu.mutation.ClearLibrary()
	return eu
}

// ClearLocation clears the location edge to Location.
func (eu *EventUpdate) ClearLocation() *EventUpdate {
	eu.mutation.ClearLocation()
	return eu
}

// ClearNetwork clears the network edge to Network.
func (eu *EventUpdate) ClearNetwork() *EventUpdate {
	eu.mutation.ClearNetwork()
	return eu
}

// ClearOs clears the os edge to OSContext.
func (eu *EventUpdate) ClearOs() *EventUpdate {
	eu.mutation.ClearOs()
	return eu
}

// ClearPage clears the page edge to Page.
func (eu *EventUpdate) ClearPage() *EventUpdate {
	eu.mutation.ClearPage()
	return eu
}

// ClearReferrer clears the referrer edge to Referrer.
func (eu *EventUpdate) ClearReferrer() *EventUpdate {
	eu.mutation.ClearReferrer()
	return eu
}

// ClearScreen clears the screen edge to Screen.
func (eu *EventUpdate) ClearScreen() *EventUpdate {
	eu.mutation.ClearScreen()
	return eu
}

// ClearSession clears the session edge to Session.
func (eu *EventUpdate) ClearSession() *EventUpdate {
	eu.mutation.ClearSession()
	return eu
}

// ClearTiming clears the timing edge to Timing.
func (eu *EventUpdate) ClearTiming() *EventUpdate {
	eu.mutation.ClearTiming()
	return eu
}

// ClearViewport clears the viewport edge to Viewport.
func (eu *EventUpdate) ClearViewport() *EventUpdate {
	eu.mutation.ClearViewport()
	return eu
}

// ClearUser clears the user edge to User.
func (eu *EventUpdate) ClearUser() *EventUpdate {
	eu.mutation.ClearUser()
	return eu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (eu *EventUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := eu.mutation.Event(); ok {
		if err := event.EventValidator(v); err != nil {
			return 0, &ValidationError{Name: "event", err: fmt.Errorf("ent: validator failed for field \"event\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(eu.hooks) == 0 {
		affected, err = eu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EventMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			eu.mutation = mutation
			affected, err = eu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(eu.hooks) - 1; i >= 0; i-- {
			mut = eu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EventUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EventUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EventUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eu *EventUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   event.Table,
			Columns: event.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: event.FieldID,
			},
		},
	}
	if ps := eu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.TrackingID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: event.FieldTrackingID,
		})
	}
	if value, ok := eu.mutation.Event(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: event.FieldEvent,
		})
	}
	if value, ok := eu.mutation.NonInteractive(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: event.FieldNonInteractive,
		})
	}
	if value, ok := eu.mutation.Channel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: event.FieldChannel,
		})
	}
	if eu.mutation.ChannelCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: event.FieldChannel,
		})
	}
	if value, ok := eu.mutation.Platform(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: event.FieldPlatform,
		})
	}
	if eu.mutation.PlatformCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: event.FieldPlatform,
		})
	}
	if value, ok := eu.mutation.Properties(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: event.FieldProperties,
		})
	}
	if eu.mutation.PropertiesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: event.FieldProperties,
		})
	}
	if value, ok := eu.mutation.Timestamp(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: event.FieldTimestamp,
		})
	}
	if eu.mutation.ActionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   event.ActionTable,
			Columns: []string{event.ActionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: action.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.ActionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   event.ActionTable,
			Columns: []string{event.ActionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: action.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.AliasCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   event.AliasTable,
			Columns: []string{event.AliasColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: alias.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.AliasIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   event.AliasTable,
			Columns: []string{event.AliasColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: alias.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.AppTable,
			Columns: []string{event.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.AppTable,
			Columns: []string{event.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.BrowserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   event.BrowserTable,
			Columns: []string{event.BrowserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: browser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.BrowserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   event.BrowserTable,
			Columns: []string{event.BrowserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: browser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.CampaignCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.CampaignTable,
			Columns: []string{event.CampaignColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: campaign.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.CampaignIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.CampaignTable,
			Columns: []string{event.CampaignColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: campaign.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.ConnectivityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   event.ConnectivityTable,
			Columns: []string{event.ConnectivityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: connectivity.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.ConnectivityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   event.ConnectivityTable,
			Columns: []string{event.ConnectivityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: connectivity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.DeviceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.DeviceTable,
			Columns: []string{event.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: device.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.DeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.DeviceTable,
			Columns: []string{event.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: device.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.ExtraCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.ExtraTable,
			Columns: []string{event.ExtraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: extra.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.ExtraIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.ExtraTable,
			Columns: []string{event.ExtraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: extra.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.GroupTable,
			Columns: []string{event.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.GroupTable,
			Columns: []string{event.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.LibraryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.LibraryTable,
			Columns: []string{event.LibraryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: library.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.LibraryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.LibraryTable,
			Columns: []string{event.LibraryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: library.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.LocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.LocationTable,
			Columns: []string{event.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: location.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.LocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.LocationTable,
			Columns: []string{event.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: location.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.NetworkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.NetworkTable,
			Columns: []string{event.NetworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: network.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.NetworkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.NetworkTable,
			Columns: []string{event.NetworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: network.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.OsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.OsTable,
			Columns: []string{event.OsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: oscontext.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.OsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.OsTable,
			Columns: []string{event.OsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: oscontext.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.PageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.PageTable,
			Columns: []string{event.PageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: page.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.PageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.PageTable,
			Columns: []string{event.PageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: page.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.ReferrerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.ReferrerTable,
			Columns: []string{event.ReferrerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: referrer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.ReferrerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.ReferrerTable,
			Columns: []string{event.ReferrerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: referrer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.ScreenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.ScreenTable,
			Columns: []string{event.ScreenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: screen.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.ScreenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.ScreenTable,
			Columns: []string{event.ScreenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: screen.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.SessionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.SessionTable,
			Columns: []string{event.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: session.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.SessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.SessionTable,
			Columns: []string{event.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: session.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.TimingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.TimingTable,
			Columns: []string{event.TimingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: timing.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.TimingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.TimingTable,
			Columns: []string{event.TimingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: timing.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.ViewportCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.ViewportTable,
			Columns: []string{event.ViewportColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: viewport.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.ViewportIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.ViewportTable,
			Columns: []string{event.ViewportColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: viewport.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.UserTable,
			Columns: []string{event.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.UserTable,
			Columns: []string{event.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{event.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// EventUpdateOne is the builder for updating a single Event entity.
type EventUpdateOne struct {
	config
	hooks    []Hook
	mutation *EventMutation
}

// SetTrackingID sets the tracking_id field.
func (euo *EventUpdateOne) SetTrackingID(s string) *EventUpdateOne {
	euo.mutation.SetTrackingID(s)
	return euo
}

// SetEvent sets the event field.
func (euo *EventUpdateOne) SetEvent(e event.Event) *EventUpdateOne {
	euo.mutation.SetEvent(e)
	return euo
}

// SetNonInteractive sets the non_interactive field.
func (euo *EventUpdateOne) SetNonInteractive(b bool) *EventUpdateOne {
	euo.mutation.SetNonInteractive(b)
	return euo
}

// SetChannel sets the channel field.
func (euo *EventUpdateOne) SetChannel(s string) *EventUpdateOne {
	euo.mutation.SetChannel(s)
	return euo
}

// SetNillableChannel sets the channel field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableChannel(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetChannel(*s)
	}
	return euo
}

// ClearChannel clears the value of channel.
func (euo *EventUpdateOne) ClearChannel() *EventUpdateOne {
	euo.mutation.ClearChannel()
	return euo
}

// SetPlatform sets the platform field.
func (euo *EventUpdateOne) SetPlatform(s string) *EventUpdateOne {
	euo.mutation.SetPlatform(s)
	return euo
}

// SetNillablePlatform sets the platform field if the given value is not nil.
func (euo *EventUpdateOne) SetNillablePlatform(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetPlatform(*s)
	}
	return euo
}

// ClearPlatform clears the value of platform.
func (euo *EventUpdateOne) ClearPlatform() *EventUpdateOne {
	euo.mutation.ClearPlatform()
	return euo
}

// SetProperties sets the properties field.
func (euo *EventUpdateOne) SetProperties(m map[string]interface{}) *EventUpdateOne {
	euo.mutation.SetProperties(m)
	return euo
}

// ClearProperties clears the value of properties.
func (euo *EventUpdateOne) ClearProperties() *EventUpdateOne {
	euo.mutation.ClearProperties()
	return euo
}

// SetTimestamp sets the timestamp field.
func (euo *EventUpdateOne) SetTimestamp(t time.Time) *EventUpdateOne {
	euo.mutation.SetTimestamp(t)
	return euo
}

// SetActionID sets the action edge to Action by id.
func (euo *EventUpdateOne) SetActionID(id int) *EventUpdateOne {
	euo.mutation.SetActionID(id)
	return euo
}

// SetNillableActionID sets the action edge to Action by id if the given value is not nil.
func (euo *EventUpdateOne) SetNillableActionID(id *int) *EventUpdateOne {
	if id != nil {
		euo = euo.SetActionID(*id)
	}
	return euo
}

// SetAction sets the action edge to Action.
func (euo *EventUpdateOne) SetAction(a *Action) *EventUpdateOne {
	return euo.SetActionID(a.ID)
}

// SetAliasID sets the alias edge to Alias by id.
func (euo *EventUpdateOne) SetAliasID(id int) *EventUpdateOne {
	euo.mutation.SetAliasID(id)
	return euo
}

// SetNillableAliasID sets the alias edge to Alias by id if the given value is not nil.
func (euo *EventUpdateOne) SetNillableAliasID(id *int) *EventUpdateOne {
	if id != nil {
		euo = euo.SetAliasID(*id)
	}
	return euo
}

// SetAlias sets the alias edge to Alias.
func (euo *EventUpdateOne) SetAlias(a *Alias) *EventUpdateOne {
	return euo.SetAliasID(a.ID)
}

// SetAppID sets the app edge to App by id.
func (euo *EventUpdateOne) SetAppID(id int) *EventUpdateOne {
	euo.mutation.SetAppID(id)
	return euo
}

// SetNillableAppID sets the app edge to App by id if the given value is not nil.
func (euo *EventUpdateOne) SetNillableAppID(id *int) *EventUpdateOne {
	if id != nil {
		euo = euo.SetAppID(*id)
	}
	return euo
}

// SetApp sets the app edge to App.
func (euo *EventUpdateOne) SetApp(a *App) *EventUpdateOne {
	return euo.SetAppID(a.ID)
}

// SetBrowserID sets the browser edge to Browser by id.
func (euo *EventUpdateOne) SetBrowserID(id int) *EventUpdateOne {
	euo.mutation.SetBrowserID(id)
	return euo
}

// SetNillableBrowserID sets the browser edge to Browser by id if the given value is not nil.
func (euo *EventUpdateOne) SetNillableBrowserID(id *int) *EventUpdateOne {
	if id != nil {
		euo = euo.SetBrowserID(*id)
	}
	return euo
}

// SetBrowser sets the browser edge to Browser.
func (euo *EventUpdateOne) SetBrowser(b *Browser) *EventUpdateOne {
	return euo.SetBrowserID(b.ID)
}

// SetCampaignID sets the campaign edge to Campaign by id.
func (euo *EventUpdateOne) SetCampaignID(id int) *EventUpdateOne {
	euo.mutation.SetCampaignID(id)
	return euo
}

// SetNillableCampaignID sets the campaign edge to Campaign by id if the given value is not nil.
func (euo *EventUpdateOne) SetNillableCampaignID(id *int) *EventUpdateOne {
	if id != nil {
		euo = euo.SetCampaignID(*id)
	}
	return euo
}

// SetCampaign sets the campaign edge to Campaign.
func (euo *EventUpdateOne) SetCampaign(c *Campaign) *EventUpdateOne {
	return euo.SetCampaignID(c.ID)
}

// SetConnectivityID sets the connectivity edge to Connectivity by id.
func (euo *EventUpdateOne) SetConnectivityID(id int) *EventUpdateOne {
	euo.mutation.SetConnectivityID(id)
	return euo
}

// SetNillableConnectivityID sets the connectivity edge to Connectivity by id if the given value is not nil.
func (euo *EventUpdateOne) SetNillableConnectivityID(id *int) *EventUpdateOne {
	if id != nil {
		euo = euo.SetConnectivityID(*id)
	}
	return euo
}

// SetConnectivity sets the connectivity edge to Connectivity.
func (euo *EventUpdateOne) SetConnectivity(c *Connectivity) *EventUpdateOne {
	return euo.SetConnectivityID(c.ID)
}

// SetDeviceID sets the device edge to Device by id.
func (euo *EventUpdateOne) SetDeviceID(id string) *EventUpdateOne {
	euo.mutation.SetDeviceID(id)
	return euo
}

// SetNillableDeviceID sets the device edge to Device by id if the given value is not nil.
func (euo *EventUpdateOne) SetNillableDeviceID(id *string) *EventUpdateOne {
	if id != nil {
		euo = euo.SetDeviceID(*id)
	}
	return euo
}

// SetDevice sets the device edge to Device.
func (euo *EventUpdateOne) SetDevice(d *Device) *EventUpdateOne {
	return euo.SetDeviceID(d.ID)
}

// SetExtraID sets the extra edge to Extra by id.
func (euo *EventUpdateOne) SetExtraID(id int) *EventUpdateOne {
	euo.mutation.SetExtraID(id)
	return euo
}

// SetNillableExtraID sets the extra edge to Extra by id if the given value is not nil.
func (euo *EventUpdateOne) SetNillableExtraID(id *int) *EventUpdateOne {
	if id != nil {
		euo = euo.SetExtraID(*id)
	}
	return euo
}

// SetExtra sets the extra edge to Extra.
func (euo *EventUpdateOne) SetExtra(e *Extra) *EventUpdateOne {
	return euo.SetExtraID(e.ID)
}

// SetGroupID sets the group edge to Group by id.
func (euo *EventUpdateOne) SetGroupID(id int) *EventUpdateOne {
	euo.mutation.SetGroupID(id)
	return euo
}

// SetNillableGroupID sets the group edge to Group by id if the given value is not nil.
func (euo *EventUpdateOne) SetNillableGroupID(id *int) *EventUpdateOne {
	if id != nil {
		euo = euo.SetGroupID(*id)
	}
	return euo
}

// SetGroup sets the group edge to Group.
func (euo *EventUpdateOne) SetGroup(g *Group) *EventUpdateOne {
	return euo.SetGroupID(g.ID)
}

// SetLibraryID sets the library edge to Library by id.
func (euo *EventUpdateOne) SetLibraryID(id int) *EventUpdateOne {
	euo.mutation.SetLibraryID(id)
	return euo
}

// SetNillableLibraryID sets the library edge to Library by id if the given value is not nil.
func (euo *EventUpdateOne) SetNillableLibraryID(id *int) *EventUpdateOne {
	if id != nil {
		euo = euo.SetLibraryID(*id)
	}
	return euo
}

// SetLibrary sets the library edge to Library.
func (euo *EventUpdateOne) SetLibrary(l *Library) *EventUpdateOne {
	return euo.SetLibraryID(l.ID)
}

// SetLocationID sets the location edge to Location by id.
func (euo *EventUpdateOne) SetLocationID(id int) *EventUpdateOne {
	euo.mutation.SetLocationID(id)
	return euo
}

// SetNillableLocationID sets the location edge to Location by id if the given value is not nil.
func (euo *EventUpdateOne) SetNillableLocationID(id *int) *EventUpdateOne {
	if id != nil {
		euo = euo.SetLocationID(*id)
	}
	return euo
}

// SetLocation sets the location edge to Location.
func (euo *EventUpdateOne) SetLocation(l *Location) *EventUpdateOne {
	return euo.SetLocationID(l.ID)
}

// SetNetworkID sets the network edge to Network by id.
func (euo *EventUpdateOne) SetNetworkID(id int) *EventUpdateOne {
	euo.mutation.SetNetworkID(id)
	return euo
}

// SetNillableNetworkID sets the network edge to Network by id if the given value is not nil.
func (euo *EventUpdateOne) SetNillableNetworkID(id *int) *EventUpdateOne {
	if id != nil {
		euo = euo.SetNetworkID(*id)
	}
	return euo
}

// SetNetwork sets the network edge to Network.
func (euo *EventUpdateOne) SetNetwork(n *Network) *EventUpdateOne {
	return euo.SetNetworkID(n.ID)
}

// SetOsID sets the os edge to OSContext by id.
func (euo *EventUpdateOne) SetOsID(id int) *EventUpdateOne {
	euo.mutation.SetOsID(id)
	return euo
}

// SetNillableOsID sets the os edge to OSContext by id if the given value is not nil.
func (euo *EventUpdateOne) SetNillableOsID(id *int) *EventUpdateOne {
	if id != nil {
		euo = euo.SetOsID(*id)
	}
	return euo
}

// SetOs sets the os edge to OSContext.
func (euo *EventUpdateOne) SetOs(o *OSContext) *EventUpdateOne {
	return euo.SetOsID(o.ID)
}

// SetPageID sets the page edge to Page by id.
func (euo *EventUpdateOne) SetPageID(id int) *EventUpdateOne {
	euo.mutation.SetPageID(id)
	return euo
}

// SetNillablePageID sets the page edge to Page by id if the given value is not nil.
func (euo *EventUpdateOne) SetNillablePageID(id *int) *EventUpdateOne {
	if id != nil {
		euo = euo.SetPageID(*id)
	}
	return euo
}

// SetPage sets the page edge to Page.
func (euo *EventUpdateOne) SetPage(p *Page) *EventUpdateOne {
	return euo.SetPageID(p.ID)
}

// SetReferrerID sets the referrer edge to Referrer by id.
func (euo *EventUpdateOne) SetReferrerID(id int) *EventUpdateOne {
	euo.mutation.SetReferrerID(id)
	return euo
}

// SetNillableReferrerID sets the referrer edge to Referrer by id if the given value is not nil.
func (euo *EventUpdateOne) SetNillableReferrerID(id *int) *EventUpdateOne {
	if id != nil {
		euo = euo.SetReferrerID(*id)
	}
	return euo
}

// SetReferrer sets the referrer edge to Referrer.
func (euo *EventUpdateOne) SetReferrer(r *Referrer) *EventUpdateOne {
	return euo.SetReferrerID(r.ID)
}

// SetScreenID sets the screen edge to Screen by id.
func (euo *EventUpdateOne) SetScreenID(id int) *EventUpdateOne {
	euo.mutation.SetScreenID(id)
	return euo
}

// SetNillableScreenID sets the screen edge to Screen by id if the given value is not nil.
func (euo *EventUpdateOne) SetNillableScreenID(id *int) *EventUpdateOne {
	if id != nil {
		euo = euo.SetScreenID(*id)
	}
	return euo
}

// SetScreen sets the screen edge to Screen.
func (euo *EventUpdateOne) SetScreen(s *Screen) *EventUpdateOne {
	return euo.SetScreenID(s.ID)
}

// SetSessionID sets the session edge to Session by id.
func (euo *EventUpdateOne) SetSessionID(id uuid.UUID) *EventUpdateOne {
	euo.mutation.SetSessionID(id)
	return euo
}

// SetNillableSessionID sets the session edge to Session by id if the given value is not nil.
func (euo *EventUpdateOne) SetNillableSessionID(id *uuid.UUID) *EventUpdateOne {
	if id != nil {
		euo = euo.SetSessionID(*id)
	}
	return euo
}

// SetSession sets the session edge to Session.
func (euo *EventUpdateOne) SetSession(s *Session) *EventUpdateOne {
	return euo.SetSessionID(s.ID)
}

// SetTimingID sets the timing edge to Timing by id.
func (euo *EventUpdateOne) SetTimingID(id int) *EventUpdateOne {
	euo.mutation.SetTimingID(id)
	return euo
}

// SetNillableTimingID sets the timing edge to Timing by id if the given value is not nil.
func (euo *EventUpdateOne) SetNillableTimingID(id *int) *EventUpdateOne {
	if id != nil {
		euo = euo.SetTimingID(*id)
	}
	return euo
}

// SetTiming sets the timing edge to Timing.
func (euo *EventUpdateOne) SetTiming(t *Timing) *EventUpdateOne {
	return euo.SetTimingID(t.ID)
}

// SetViewportID sets the viewport edge to Viewport by id.
func (euo *EventUpdateOne) SetViewportID(id int) *EventUpdateOne {
	euo.mutation.SetViewportID(id)
	return euo
}

// SetNillableViewportID sets the viewport edge to Viewport by id if the given value is not nil.
func (euo *EventUpdateOne) SetNillableViewportID(id *int) *EventUpdateOne {
	if id != nil {
		euo = euo.SetViewportID(*id)
	}
	return euo
}

// SetViewport sets the viewport edge to Viewport.
func (euo *EventUpdateOne) SetViewport(v *Viewport) *EventUpdateOne {
	return euo.SetViewportID(v.ID)
}

// SetUserID sets the user edge to User by id.
func (euo *EventUpdateOne) SetUserID(id string) *EventUpdateOne {
	euo.mutation.SetUserID(id)
	return euo
}

// SetNillableUserID sets the user edge to User by id if the given value is not nil.
func (euo *EventUpdateOne) SetNillableUserID(id *string) *EventUpdateOne {
	if id != nil {
		euo = euo.SetUserID(*id)
	}
	return euo
}

// SetUser sets the user edge to User.
func (euo *EventUpdateOne) SetUser(u *User) *EventUpdateOne {
	return euo.SetUserID(u.ID)
}

// Mutation returns the EventMutation object of the builder.
func (euo *EventUpdateOne) Mutation() *EventMutation {
	return euo.mutation
}

// ClearAction clears the action edge to Action.
func (euo *EventUpdateOne) ClearAction() *EventUpdateOne {
	euo.mutation.ClearAction()
	return euo
}

// ClearAlias clears the alias edge to Alias.
func (euo *EventUpdateOne) ClearAlias() *EventUpdateOne {
	euo.mutation.ClearAlias()
	return euo
}

// ClearApp clears the app edge to App.
func (euo *EventUpdateOne) ClearApp() *EventUpdateOne {
	euo.mutation.ClearApp()
	return euo
}

// ClearBrowser clears the browser edge to Browser.
func (euo *EventUpdateOne) ClearBrowser() *EventUpdateOne {
	euo.mutation.ClearBrowser()
	return euo
}

// ClearCampaign clears the campaign edge to Campaign.
func (euo *EventUpdateOne) ClearCampaign() *EventUpdateOne {
	euo.mutation.ClearCampaign()
	return euo
}

// ClearConnectivity clears the connectivity edge to Connectivity.
func (euo *EventUpdateOne) ClearConnectivity() *EventUpdateOne {
	euo.mutation.ClearConnectivity()
	return euo
}

// ClearDevice clears the device edge to Device.
func (euo *EventUpdateOne) ClearDevice() *EventUpdateOne {
	euo.mutation.ClearDevice()
	return euo
}

// ClearExtra clears the extra edge to Extra.
func (euo *EventUpdateOne) ClearExtra() *EventUpdateOne {
	euo.mutation.ClearExtra()
	return euo
}

// ClearGroup clears the group edge to Group.
func (euo *EventUpdateOne) ClearGroup() *EventUpdateOne {
	euo.mutation.ClearGroup()
	return euo
}

// ClearLibrary clears the library edge to Library.
func (euo *EventUpdateOne) ClearLibrary() *EventUpdateOne {
	euo.mutation.ClearLibrary()
	return euo
}

// ClearLocation clears the location edge to Location.
func (euo *EventUpdateOne) ClearLocation() *EventUpdateOne {
	euo.mutation.ClearLocation()
	return euo
}

// ClearNetwork clears the network edge to Network.
func (euo *EventUpdateOne) ClearNetwork() *EventUpdateOne {
	euo.mutation.ClearNetwork()
	return euo
}

// ClearOs clears the os edge to OSContext.
func (euo *EventUpdateOne) ClearOs() *EventUpdateOne {
	euo.mutation.ClearOs()
	return euo
}

// ClearPage clears the page edge to Page.
func (euo *EventUpdateOne) ClearPage() *EventUpdateOne {
	euo.mutation.ClearPage()
	return euo
}

// ClearReferrer clears the referrer edge to Referrer.
func (euo *EventUpdateOne) ClearReferrer() *EventUpdateOne {
	euo.mutation.ClearReferrer()
	return euo
}

// ClearScreen clears the screen edge to Screen.
func (euo *EventUpdateOne) ClearScreen() *EventUpdateOne {
	euo.mutation.ClearScreen()
	return euo
}

// ClearSession clears the session edge to Session.
func (euo *EventUpdateOne) ClearSession() *EventUpdateOne {
	euo.mutation.ClearSession()
	return euo
}

// ClearTiming clears the timing edge to Timing.
func (euo *EventUpdateOne) ClearTiming() *EventUpdateOne {
	euo.mutation.ClearTiming()
	return euo
}

// ClearViewport clears the viewport edge to Viewport.
func (euo *EventUpdateOne) ClearViewport() *EventUpdateOne {
	euo.mutation.ClearViewport()
	return euo
}

// ClearUser clears the user edge to User.
func (euo *EventUpdateOne) ClearUser() *EventUpdateOne {
	euo.mutation.ClearUser()
	return euo
}

// Save executes the query and returns the updated entity.
func (euo *EventUpdateOne) Save(ctx context.Context) (*Event, error) {
	if v, ok := euo.mutation.Event(); ok {
		if err := event.EventValidator(v); err != nil {
			return nil, &ValidationError{Name: "event", err: fmt.Errorf("ent: validator failed for field \"event\": %w", err)}
		}
	}

	var (
		err  error
		node *Event
	)
	if len(euo.hooks) == 0 {
		node, err = euo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EventMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			euo.mutation = mutation
			node, err = euo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(euo.hooks) - 1; i >= 0; i-- {
			mut = euo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, euo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EventUpdateOne) SaveX(ctx context.Context) *Event {
	e, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return e
}

// Exec executes the query on the entity.
func (euo *EventUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EventUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (euo *EventUpdateOne) sqlSave(ctx context.Context) (e *Event, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   event.Table,
			Columns: event.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: event.FieldID,
			},
		},
	}
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Event.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := euo.mutation.TrackingID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: event.FieldTrackingID,
		})
	}
	if value, ok := euo.mutation.Event(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: event.FieldEvent,
		})
	}
	if value, ok := euo.mutation.NonInteractive(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: event.FieldNonInteractive,
		})
	}
	if value, ok := euo.mutation.Channel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: event.FieldChannel,
		})
	}
	if euo.mutation.ChannelCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: event.FieldChannel,
		})
	}
	if value, ok := euo.mutation.Platform(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: event.FieldPlatform,
		})
	}
	if euo.mutation.PlatformCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: event.FieldPlatform,
		})
	}
	if value, ok := euo.mutation.Properties(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: event.FieldProperties,
		})
	}
	if euo.mutation.PropertiesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: event.FieldProperties,
		})
	}
	if value, ok := euo.mutation.Timestamp(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: event.FieldTimestamp,
		})
	}
	if euo.mutation.ActionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   event.ActionTable,
			Columns: []string{event.ActionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: action.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.ActionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   event.ActionTable,
			Columns: []string{event.ActionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: action.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.AliasCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   event.AliasTable,
			Columns: []string{event.AliasColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: alias.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.AliasIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   event.AliasTable,
			Columns: []string{event.AliasColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: alias.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.AppTable,
			Columns: []string{event.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.AppTable,
			Columns: []string{event.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.BrowserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   event.BrowserTable,
			Columns: []string{event.BrowserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: browser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.BrowserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   event.BrowserTable,
			Columns: []string{event.BrowserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: browser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.CampaignCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.CampaignTable,
			Columns: []string{event.CampaignColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: campaign.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.CampaignIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.CampaignTable,
			Columns: []string{event.CampaignColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: campaign.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.ConnectivityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   event.ConnectivityTable,
			Columns: []string{event.ConnectivityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: connectivity.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.ConnectivityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   event.ConnectivityTable,
			Columns: []string{event.ConnectivityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: connectivity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.DeviceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.DeviceTable,
			Columns: []string{event.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: device.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.DeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.DeviceTable,
			Columns: []string{event.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: device.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.ExtraCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.ExtraTable,
			Columns: []string{event.ExtraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: extra.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.ExtraIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.ExtraTable,
			Columns: []string{event.ExtraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: extra.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.GroupTable,
			Columns: []string{event.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.GroupTable,
			Columns: []string{event.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.LibraryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.LibraryTable,
			Columns: []string{event.LibraryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: library.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.LibraryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.LibraryTable,
			Columns: []string{event.LibraryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: library.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.LocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.LocationTable,
			Columns: []string{event.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: location.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.LocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.LocationTable,
			Columns: []string{event.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: location.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.NetworkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.NetworkTable,
			Columns: []string{event.NetworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: network.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.NetworkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.NetworkTable,
			Columns: []string{event.NetworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: network.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.OsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.OsTable,
			Columns: []string{event.OsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: oscontext.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.OsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.OsTable,
			Columns: []string{event.OsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: oscontext.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.PageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.PageTable,
			Columns: []string{event.PageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: page.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.PageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.PageTable,
			Columns: []string{event.PageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: page.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.ReferrerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.ReferrerTable,
			Columns: []string{event.ReferrerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: referrer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.ReferrerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.ReferrerTable,
			Columns: []string{event.ReferrerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: referrer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.ScreenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.ScreenTable,
			Columns: []string{event.ScreenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: screen.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.ScreenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.ScreenTable,
			Columns: []string{event.ScreenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: screen.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.SessionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.SessionTable,
			Columns: []string{event.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: session.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.SessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.SessionTable,
			Columns: []string{event.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: session.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.TimingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.TimingTable,
			Columns: []string{event.TimingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: timing.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.TimingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.TimingTable,
			Columns: []string{event.TimingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: timing.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.ViewportCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.ViewportTable,
			Columns: []string{event.ViewportColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: viewport.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.ViewportIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.ViewportTable,
			Columns: []string{event.ViewportColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: viewport.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.UserTable,
			Columns: []string{event.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.UserTable,
			Columns: []string{event.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	e = &Event{config: euo.config}
	_spec.Assign = e.assignValues
	_spec.ScanValues = e.scanValues()
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{event.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return e, nil
}
