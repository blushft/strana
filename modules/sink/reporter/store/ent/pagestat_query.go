// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"github.com/blushft/strana/modules/sink/reporter/store/ent/app"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/hostname"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/pagestat"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/pathname"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/predicate"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// PageStatQuery is the builder for querying PageStat entities.
type PageStatQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	unique     []string
	predicates []predicate.PageStat
	// eager-loading edges.
	withApp      *AppQuery
	withHostname *HostnameQuery
	withPathname *PathnameQuery
	withFKs      bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the builder.
func (psq *PageStatQuery) Where(ps ...predicate.PageStat) *PageStatQuery {
	psq.predicates = append(psq.predicates, ps...)
	return psq
}

// Limit adds a limit step to the query.
func (psq *PageStatQuery) Limit(limit int) *PageStatQuery {
	psq.limit = &limit
	return psq
}

// Offset adds an offset step to the query.
func (psq *PageStatQuery) Offset(offset int) *PageStatQuery {
	psq.offset = &offset
	return psq
}

// Order adds an order step to the query.
func (psq *PageStatQuery) Order(o ...OrderFunc) *PageStatQuery {
	psq.order = append(psq.order, o...)
	return psq
}

// QueryApp chains the current query on the app edge.
func (psq *PageStatQuery) QueryApp() *AppQuery {
	query := &AppQuery{config: psq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(pagestat.Table, pagestat.FieldID, psq.sqlQuery()),
			sqlgraph.To(app.Table, app.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, pagestat.AppTable, pagestat.AppColumn),
		)
		fromU = sqlgraph.SetNeighbors(psq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHostname chains the current query on the hostname edge.
func (psq *PageStatQuery) QueryHostname() *HostnameQuery {
	query := &HostnameQuery{config: psq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(pagestat.Table, pagestat.FieldID, psq.sqlQuery()),
			sqlgraph.To(hostname.Table, hostname.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, pagestat.HostnameTable, pagestat.HostnameColumn),
		)
		fromU = sqlgraph.SetNeighbors(psq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPathname chains the current query on the pathname edge.
func (psq *PageStatQuery) QueryPathname() *PathnameQuery {
	query := &PathnameQuery{config: psq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(pagestat.Table, pagestat.FieldID, psq.sqlQuery()),
			sqlgraph.To(pathname.Table, pathname.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, pagestat.PathnameTable, pagestat.PathnameColumn),
		)
		fromU = sqlgraph.SetNeighbors(psq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first PageStat entity in the query. Returns *NotFoundError when no pagestat was found.
func (psq *PageStatQuery) First(ctx context.Context) (*PageStat, error) {
	psSlice, err := psq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(psSlice) == 0 {
		return nil, &NotFoundError{pagestat.Label}
	}
	return psSlice[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (psq *PageStatQuery) FirstX(ctx context.Context) *PageStat {
	ps, err := psq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return ps
}

// FirstID returns the first PageStat id in the query. Returns *NotFoundError when no id was found.
func (psq *PageStatQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = psq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{pagestat.Label}
		return
	}
	return ids[0], nil
}

// FirstXID is like FirstID, but panics if an error occurs.
func (psq *PageStatQuery) FirstXID(ctx context.Context) int {
	id, err := psq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only PageStat entity in the query, returns an error if not exactly one entity was returned.
func (psq *PageStatQuery) Only(ctx context.Context) (*PageStat, error) {
	psSlice, err := psq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(psSlice) {
	case 1:
		return psSlice[0], nil
	case 0:
		return nil, &NotFoundError{pagestat.Label}
	default:
		return nil, &NotSingularError{pagestat.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (psq *PageStatQuery) OnlyX(ctx context.Context) *PageStat {
	ps, err := psq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return ps
}

// OnlyID returns the only PageStat id in the query, returns an error if not exactly one id was returned.
func (psq *PageStatQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = psq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{pagestat.Label}
	default:
		err = &NotSingularError{pagestat.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (psq *PageStatQuery) OnlyIDX(ctx context.Context) int {
	id, err := psq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of PageStats.
func (psq *PageStatQuery) All(ctx context.Context) ([]*PageStat, error) {
	if err := psq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return psq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (psq *PageStatQuery) AllX(ctx context.Context) []*PageStat {
	psSlice, err := psq.All(ctx)
	if err != nil {
		panic(err)
	}
	return psSlice
}

// IDs executes the query and returns a list of PageStat ids.
func (psq *PageStatQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := psq.Select(pagestat.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (psq *PageStatQuery) IDsX(ctx context.Context) []int {
	ids, err := psq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (psq *PageStatQuery) Count(ctx context.Context) (int, error) {
	if err := psq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return psq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (psq *PageStatQuery) CountX(ctx context.Context) int {
	count, err := psq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (psq *PageStatQuery) Exist(ctx context.Context) (bool, error) {
	if err := psq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return psq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (psq *PageStatQuery) ExistX(ctx context.Context) bool {
	exist, err := psq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (psq *PageStatQuery) Clone() *PageStatQuery {
	return &PageStatQuery{
		config:     psq.config,
		limit:      psq.limit,
		offset:     psq.offset,
		order:      append([]OrderFunc{}, psq.order...),
		unique:     append([]string{}, psq.unique...),
		predicates: append([]predicate.PageStat{}, psq.predicates...),
		// clone intermediate query.
		sql:  psq.sql.Clone(),
		path: psq.path,
	}
}

//  WithApp tells the query-builder to eager-loads the nodes that are connected to
// the "app" edge. The optional arguments used to configure the query builder of the edge.
func (psq *PageStatQuery) WithApp(opts ...func(*AppQuery)) *PageStatQuery {
	query := &AppQuery{config: psq.config}
	for _, opt := range opts {
		opt(query)
	}
	psq.withApp = query
	return psq
}

//  WithHostname tells the query-builder to eager-loads the nodes that are connected to
// the "hostname" edge. The optional arguments used to configure the query builder of the edge.
func (psq *PageStatQuery) WithHostname(opts ...func(*HostnameQuery)) *PageStatQuery {
	query := &HostnameQuery{config: psq.config}
	for _, opt := range opts {
		opt(query)
	}
	psq.withHostname = query
	return psq
}

//  WithPathname tells the query-builder to eager-loads the nodes that are connected to
// the "pathname" edge. The optional arguments used to configure the query builder of the edge.
func (psq *PageStatQuery) WithPathname(opts ...func(*PathnameQuery)) *PageStatQuery {
	query := &PathnameQuery{config: psq.config}
	for _, opt := range opts {
		opt(query)
	}
	psq.withPathname = query
	return psq
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Pageviews int `json:"pageviews,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.PageStat.Query().
//		GroupBy(pagestat.FieldPageviews).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (psq *PageStatQuery) GroupBy(field string, fields ...string) *PageStatGroupBy {
	group := &PageStatGroupBy{config: psq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := psq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return psq.sqlQuery(), nil
	}
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		Pageviews int `json:"pageviews,omitempty"`
//	}
//
//	client.PageStat.Query().
//		Select(pagestat.FieldPageviews).
//		Scan(ctx, &v)
//
func (psq *PageStatQuery) Select(field string, fields ...string) *PageStatSelect {
	selector := &PageStatSelect{config: psq.config}
	selector.fields = append([]string{field}, fields...)
	selector.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := psq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return psq.sqlQuery(), nil
	}
	return selector
}

func (psq *PageStatQuery) prepareQuery(ctx context.Context) error {
	if psq.path != nil {
		prev, err := psq.path(ctx)
		if err != nil {
			return err
		}
		psq.sql = prev
	}
	return nil
}

func (psq *PageStatQuery) sqlAll(ctx context.Context) ([]*PageStat, error) {
	var (
		nodes       = []*PageStat{}
		withFKs     = psq.withFKs
		_spec       = psq.querySpec()
		loadedTypes = [3]bool{
			psq.withApp != nil,
			psq.withHostname != nil,
			psq.withPathname != nil,
		}
	)
	if psq.withApp != nil || psq.withHostname != nil || psq.withPathname != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, pagestat.ForeignKeys...)
	}
	_spec.ScanValues = func() []interface{} {
		node := &PageStat{config: psq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		if withFKs {
			values = append(values, node.fkValues()...)
		}
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, psq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := psq.withApp; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*PageStat)
		for i := range nodes {
			if fk := nodes[i].app_page_stats; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(app.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "app_page_stats" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.App = n
			}
		}
	}

	if query := psq.withHostname; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*PageStat)
		for i := range nodes {
			if fk := nodes[i].hostname_page_stats; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(hostname.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "hostname_page_stats" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Hostname = n
			}
		}
	}

	if query := psq.withPathname; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*PageStat)
		for i := range nodes {
			if fk := nodes[i].pathname_page_stats; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(pathname.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "pathname_page_stats" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Pathname = n
			}
		}
	}

	return nodes, nil
}

func (psq *PageStatQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := psq.querySpec()
	return sqlgraph.CountNodes(ctx, psq.driver, _spec)
}

func (psq *PageStatQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := psq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (psq *PageStatQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pagestat.Table,
			Columns: pagestat.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: pagestat.FieldID,
			},
		},
		From:   psq.sql,
		Unique: true,
	}
	if ps := psq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := psq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := psq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := psq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (psq *PageStatQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(psq.driver.Dialect())
	t1 := builder.Table(pagestat.Table)
	selector := builder.Select(t1.Columns(pagestat.Columns...)...).From(t1)
	if psq.sql != nil {
		selector = psq.sql
		selector.Select(selector.Columns(pagestat.Columns...)...)
	}
	for _, p := range psq.predicates {
		p(selector)
	}
	for _, p := range psq.order {
		p(selector)
	}
	if offset := psq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := psq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// PageStatGroupBy is the builder for group-by PageStat entities.
type PageStatGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (psgb *PageStatGroupBy) Aggregate(fns ...AggregateFunc) *PageStatGroupBy {
	psgb.fns = append(psgb.fns, fns...)
	return psgb
}

// Scan applies the group-by query and scan the result into the given value.
func (psgb *PageStatGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := psgb.path(ctx)
	if err != nil {
		return err
	}
	psgb.sql = query
	return psgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (psgb *PageStatGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := psgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (psgb *PageStatGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(psgb.fields) > 1 {
		return nil, errors.New("ent: PageStatGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := psgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (psgb *PageStatGroupBy) StringsX(ctx context.Context) []string {
	v, err := psgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from group-by. It is only allowed when querying group-by with one field.
func (psgb *PageStatGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = psgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{pagestat.Label}
	default:
		err = fmt.Errorf("ent: PageStatGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (psgb *PageStatGroupBy) StringX(ctx context.Context) string {
	v, err := psgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (psgb *PageStatGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(psgb.fields) > 1 {
		return nil, errors.New("ent: PageStatGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := psgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (psgb *PageStatGroupBy) IntsX(ctx context.Context) []int {
	v, err := psgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from group-by. It is only allowed when querying group-by with one field.
func (psgb *PageStatGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = psgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{pagestat.Label}
	default:
		err = fmt.Errorf("ent: PageStatGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (psgb *PageStatGroupBy) IntX(ctx context.Context) int {
	v, err := psgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (psgb *PageStatGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(psgb.fields) > 1 {
		return nil, errors.New("ent: PageStatGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := psgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (psgb *PageStatGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := psgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from group-by. It is only allowed when querying group-by with one field.
func (psgb *PageStatGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = psgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{pagestat.Label}
	default:
		err = fmt.Errorf("ent: PageStatGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (psgb *PageStatGroupBy) Float64X(ctx context.Context) float64 {
	v, err := psgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (psgb *PageStatGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(psgb.fields) > 1 {
		return nil, errors.New("ent: PageStatGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := psgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (psgb *PageStatGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := psgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from group-by. It is only allowed when querying group-by with one field.
func (psgb *PageStatGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = psgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{pagestat.Label}
	default:
		err = fmt.Errorf("ent: PageStatGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (psgb *PageStatGroupBy) BoolX(ctx context.Context) bool {
	v, err := psgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (psgb *PageStatGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := psgb.sqlQuery().Query()
	if err := psgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (psgb *PageStatGroupBy) sqlQuery() *sql.Selector {
	selector := psgb.sql
	columns := make([]string, 0, len(psgb.fields)+len(psgb.fns))
	columns = append(columns, psgb.fields...)
	for _, fn := range psgb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(psgb.fields...)
}

// PageStatSelect is the builder for select fields of PageStat entities.
type PageStatSelect struct {
	config
	fields []string
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Scan applies the selector query and scan the result into the given value.
func (pss *PageStatSelect) Scan(ctx context.Context, v interface{}) error {
	query, err := pss.path(ctx)
	if err != nil {
		return err
	}
	pss.sql = query
	return pss.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (pss *PageStatSelect) ScanX(ctx context.Context, v interface{}) {
	if err := pss.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (pss *PageStatSelect) Strings(ctx context.Context) ([]string, error) {
	if len(pss.fields) > 1 {
		return nil, errors.New("ent: PageStatSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := pss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (pss *PageStatSelect) StringsX(ctx context.Context) []string {
	v, err := pss.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from selector. It is only allowed when selecting one field.
func (pss *PageStatSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = pss.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{pagestat.Label}
	default:
		err = fmt.Errorf("ent: PageStatSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (pss *PageStatSelect) StringX(ctx context.Context) string {
	v, err := pss.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (pss *PageStatSelect) Ints(ctx context.Context) ([]int, error) {
	if len(pss.fields) > 1 {
		return nil, errors.New("ent: PageStatSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := pss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (pss *PageStatSelect) IntsX(ctx context.Context) []int {
	v, err := pss.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from selector. It is only allowed when selecting one field.
func (pss *PageStatSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = pss.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{pagestat.Label}
	default:
		err = fmt.Errorf("ent: PageStatSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (pss *PageStatSelect) IntX(ctx context.Context) int {
	v, err := pss.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (pss *PageStatSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(pss.fields) > 1 {
		return nil, errors.New("ent: PageStatSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := pss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (pss *PageStatSelect) Float64sX(ctx context.Context) []float64 {
	v, err := pss.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from selector. It is only allowed when selecting one field.
func (pss *PageStatSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = pss.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{pagestat.Label}
	default:
		err = fmt.Errorf("ent: PageStatSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (pss *PageStatSelect) Float64X(ctx context.Context) float64 {
	v, err := pss.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (pss *PageStatSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(pss.fields) > 1 {
		return nil, errors.New("ent: PageStatSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := pss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (pss *PageStatSelect) BoolsX(ctx context.Context) []bool {
	v, err := pss.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from selector. It is only allowed when selecting one field.
func (pss *PageStatSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = pss.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{pagestat.Label}
	default:
		err = fmt.Errorf("ent: PageStatSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (pss *PageStatSelect) BoolX(ctx context.Context) bool {
	v, err := pss.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pss *PageStatSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := pss.sqlQuery().Query()
	if err := pss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (pss *PageStatSelect) sqlQuery() sql.Querier {
	selector := pss.sql
	selector.Select(selector.Columns(pss.fields...)...)
	return selector
}
