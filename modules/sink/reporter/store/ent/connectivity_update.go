// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/blushft/strana/modules/sink/reporter/store/ent/connectivity"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/event"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/predicate"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/google/uuid"
)

// ConnectivityUpdate is the builder for updating Connectivity entities.
type ConnectivityUpdate struct {
	config
	hooks      []Hook
	mutation   *ConnectivityMutation
	predicates []predicate.Connectivity
}

// Where adds a new predicate for the builder.
func (cu *ConnectivityUpdate) Where(ps ...predicate.Connectivity) *ConnectivityUpdate {
	cu.predicates = append(cu.predicates, ps...)
	return cu
}

// SetBluetooth sets the bluetooth field.
func (cu *ConnectivityUpdate) SetBluetooth(b bool) *ConnectivityUpdate {
	cu.mutation.SetBluetooth(b)
	return cu
}

// SetCellular sets the cellular field.
func (cu *ConnectivityUpdate) SetCellular(b bool) *ConnectivityUpdate {
	cu.mutation.SetCellular(b)
	return cu
}

// SetWifi sets the wifi field.
func (cu *ConnectivityUpdate) SetWifi(b bool) *ConnectivityUpdate {
	cu.mutation.SetWifi(b)
	return cu
}

// SetEthernet sets the ethernet field.
func (cu *ConnectivityUpdate) SetEthernet(b bool) *ConnectivityUpdate {
	cu.mutation.SetEthernet(b)
	return cu
}

// SetCarrier sets the carrier field.
func (cu *ConnectivityUpdate) SetCarrier(b bool) *ConnectivityUpdate {
	cu.mutation.SetCarrier(b)
	return cu
}

// SetIsp sets the isp field.
func (cu *ConnectivityUpdate) SetIsp(b bool) *ConnectivityUpdate {
	cu.mutation.SetIsp(b)
	return cu
}

// SetEventID sets the event edge to Event by id.
func (cu *ConnectivityUpdate) SetEventID(id uuid.UUID) *ConnectivityUpdate {
	cu.mutation.SetEventID(id)
	return cu
}

// SetNillableEventID sets the event edge to Event by id if the given value is not nil.
func (cu *ConnectivityUpdate) SetNillableEventID(id *uuid.UUID) *ConnectivityUpdate {
	if id != nil {
		cu = cu.SetEventID(*id)
	}
	return cu
}

// SetEvent sets the event edge to Event.
func (cu *ConnectivityUpdate) SetEvent(e *Event) *ConnectivityUpdate {
	return cu.SetEventID(e.ID)
}

// Mutation returns the ConnectivityMutation object of the builder.
func (cu *ConnectivityUpdate) Mutation() *ConnectivityMutation {
	return cu.mutation
}

// ClearEvent clears the event edge to Event.
func (cu *ConnectivityUpdate) ClearEvent() *ConnectivityUpdate {
	cu.mutation.ClearEvent()
	return cu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (cu *ConnectivityUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(cu.hooks) == 0 {
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ConnectivityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ConnectivityUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ConnectivityUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ConnectivityUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *ConnectivityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   connectivity.Table,
			Columns: connectivity.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: connectivity.FieldID,
			},
		},
	}
	if ps := cu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Bluetooth(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: connectivity.FieldBluetooth,
		})
	}
	if value, ok := cu.mutation.Cellular(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: connectivity.FieldCellular,
		})
	}
	if value, ok := cu.mutation.Wifi(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: connectivity.FieldWifi,
		})
	}
	if value, ok := cu.mutation.Ethernet(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: connectivity.FieldEthernet,
		})
	}
	if value, ok := cu.mutation.Carrier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: connectivity.FieldCarrier,
		})
	}
	if value, ok := cu.mutation.Isp(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: connectivity.FieldIsp,
		})
	}
	if cu.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   connectivity.EventTable,
			Columns: []string{connectivity.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   connectivity.EventTable,
			Columns: []string{connectivity.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{connectivity.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ConnectivityUpdateOne is the builder for updating a single Connectivity entity.
type ConnectivityUpdateOne struct {
	config
	hooks    []Hook
	mutation *ConnectivityMutation
}

// SetBluetooth sets the bluetooth field.
func (cuo *ConnectivityUpdateOne) SetBluetooth(b bool) *ConnectivityUpdateOne {
	cuo.mutation.SetBluetooth(b)
	return cuo
}

// SetCellular sets the cellular field.
func (cuo *ConnectivityUpdateOne) SetCellular(b bool) *ConnectivityUpdateOne {
	cuo.mutation.SetCellular(b)
	return cuo
}

// SetWifi sets the wifi field.
func (cuo *ConnectivityUpdateOne) SetWifi(b bool) *ConnectivityUpdateOne {
	cuo.mutation.SetWifi(b)
	return cuo
}

// SetEthernet sets the ethernet field.
func (cuo *ConnectivityUpdateOne) SetEthernet(b bool) *ConnectivityUpdateOne {
	cuo.mutation.SetEthernet(b)
	return cuo
}

// SetCarrier sets the carrier field.
func (cuo *ConnectivityUpdateOne) SetCarrier(b bool) *ConnectivityUpdateOne {
	cuo.mutation.SetCarrier(b)
	return cuo
}

// SetIsp sets the isp field.
func (cuo *ConnectivityUpdateOne) SetIsp(b bool) *ConnectivityUpdateOne {
	cuo.mutation.SetIsp(b)
	return cuo
}

// SetEventID sets the event edge to Event by id.
func (cuo *ConnectivityUpdateOne) SetEventID(id uuid.UUID) *ConnectivityUpdateOne {
	cuo.mutation.SetEventID(id)
	return cuo
}

// SetNillableEventID sets the event edge to Event by id if the given value is not nil.
func (cuo *ConnectivityUpdateOne) SetNillableEventID(id *uuid.UUID) *ConnectivityUpdateOne {
	if id != nil {
		cuo = cuo.SetEventID(*id)
	}
	return cuo
}

// SetEvent sets the event edge to Event.
func (cuo *ConnectivityUpdateOne) SetEvent(e *Event) *ConnectivityUpdateOne {
	return cuo.SetEventID(e.ID)
}

// Mutation returns the ConnectivityMutation object of the builder.
func (cuo *ConnectivityUpdateOne) Mutation() *ConnectivityMutation {
	return cuo.mutation
}

// ClearEvent clears the event edge to Event.
func (cuo *ConnectivityUpdateOne) ClearEvent() *ConnectivityUpdateOne {
	cuo.mutation.ClearEvent()
	return cuo
}

// Save executes the query and returns the updated entity.
func (cuo *ConnectivityUpdateOne) Save(ctx context.Context) (*Connectivity, error) {

	var (
		err  error
		node *Connectivity
	)
	if len(cuo.hooks) == 0 {
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ConnectivityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ConnectivityUpdateOne) SaveX(ctx context.Context) *Connectivity {
	c, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return c
}

// Exec executes the query on the entity.
func (cuo *ConnectivityUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ConnectivityUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *ConnectivityUpdateOne) sqlSave(ctx context.Context) (c *Connectivity, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   connectivity.Table,
			Columns: connectivity.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: connectivity.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Connectivity.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := cuo.mutation.Bluetooth(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: connectivity.FieldBluetooth,
		})
	}
	if value, ok := cuo.mutation.Cellular(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: connectivity.FieldCellular,
		})
	}
	if value, ok := cuo.mutation.Wifi(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: connectivity.FieldWifi,
		})
	}
	if value, ok := cuo.mutation.Ethernet(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: connectivity.FieldEthernet,
		})
	}
	if value, ok := cuo.mutation.Carrier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: connectivity.FieldCarrier,
		})
	}
	if value, ok := cuo.mutation.Isp(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: connectivity.FieldIsp,
		})
	}
	if cuo.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   connectivity.EventTable,
			Columns: []string{connectivity.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   connectivity.EventTable,
			Columns: []string{connectivity.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	c = &Connectivity{config: cuo.config}
	_spec.Assign = c.assignValues
	_spec.ScanValues = c.scanValues()
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{connectivity.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return c, nil
}
