// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/blushft/strana/modules/sink/reporter/store/ent/viewport"
	"github.com/facebook/ent/dialect/sql"
)

// Viewport is the model entity for the Viewport schema.
type Viewport struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Density holds the value of the "density" field.
	Density int `json:"density,omitempty"`
	// Width holds the value of the "width" field.
	Width int `json:"width,omitempty"`
	// Height holds the value of the "height" field.
	Height int `json:"height,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ViewportQuery when eager-loading is set.
	Edges ViewportEdges `json:"edges"`
}

// ViewportEdges holds the relations/edges for other nodes in the graph.
type ViewportEdges struct {
	// Events holds the value of the events edge.
	Events []*Event
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EventsOrErr returns the Events value or an error if the edge
// was not loaded in eager-loading.
func (e ViewportEdges) EventsOrErr() ([]*Event, error) {
	if e.loadedTypes[0] {
		return e.Events, nil
	}
	return nil, &NotLoadedError{edge: "events"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Viewport) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
		&sql.NullInt64{}, // density
		&sql.NullInt64{}, // width
		&sql.NullInt64{}, // height
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Viewport fields.
func (v *Viewport) assignValues(values ...interface{}) error {
	if m, n := len(values), len(viewport.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	v.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field density", values[0])
	} else if value.Valid {
		v.Density = int(value.Int64)
	}
	if value, ok := values[1].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field width", values[1])
	} else if value.Valid {
		v.Width = int(value.Int64)
	}
	if value, ok := values[2].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field height", values[2])
	} else if value.Valid {
		v.Height = int(value.Int64)
	}
	return nil
}

// QueryEvents queries the events edge of the Viewport.
func (v *Viewport) QueryEvents() *EventQuery {
	return (&ViewportClient{config: v.config}).QueryEvents(v)
}

// Update returns a builder for updating this Viewport.
// Note that, you need to call Viewport.Unwrap() before calling this method, if this Viewport
// was returned from a transaction, and the transaction was committed or rolled back.
func (v *Viewport) Update() *ViewportUpdateOne {
	return (&ViewportClient{config: v.config}).UpdateOne(v)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (v *Viewport) Unwrap() *Viewport {
	tx, ok := v.config.driver.(*txDriver)
	if !ok {
		panic("ent: Viewport is not a transactional entity")
	}
	v.config.driver = tx.drv
	return v
}

// String implements the fmt.Stringer.
func (v *Viewport) String() string {
	var builder strings.Builder
	builder.WriteString("Viewport(")
	builder.WriteString(fmt.Sprintf("id=%v", v.ID))
	builder.WriteString(", density=")
	builder.WriteString(fmt.Sprintf("%v", v.Density))
	builder.WriteString(", width=")
	builder.WriteString(fmt.Sprintf("%v", v.Width))
	builder.WriteString(", height=")
	builder.WriteString(fmt.Sprintf("%v", v.Height))
	builder.WriteByte(')')
	return builder.String()
}

// Viewports is a parsable slice of Viewport.
type Viewports []*Viewport

func (v Viewports) config(cfg config) {
	for _i := range v {
		v[_i].config = cfg
	}
}
