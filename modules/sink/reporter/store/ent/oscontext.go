// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/blushft/strana/modules/sink/reporter/store/ent/oscontext"
	"github.com/facebook/ent/dialect/sql"
)

// OSContext is the model entity for the OSContext schema.
type OSContext struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Family holds the value of the "family" field.
	Family string `json:"family,omitempty"`
	// Platform holds the value of the "platform" field.
	Platform string `json:"platform,omitempty"`
	// Version holds the value of the "version" field.
	Version string `json:"version,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OSContextQuery when eager-loading is set.
	Edges OSContextEdges `json:"edges"`
}

// OSContextEdges holds the relations/edges for other nodes in the graph.
type OSContextEdges struct {
	// Events holds the value of the events edge.
	Events []*Event
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EventsOrErr returns the Events value or an error if the edge
// was not loaded in eager-loading.
func (e OSContextEdges) EventsOrErr() ([]*Event, error) {
	if e.loadedTypes[0] {
		return e.Events, nil
	}
	return nil, &NotLoadedError{edge: "events"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OSContext) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // name
		&sql.NullString{}, // family
		&sql.NullString{}, // platform
		&sql.NullString{}, // version
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OSContext fields.
func (oc *OSContext) assignValues(values ...interface{}) error {
	if m, n := len(values), len(oscontext.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	oc.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		oc.Name = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field family", values[1])
	} else if value.Valid {
		oc.Family = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field platform", values[2])
	} else if value.Valid {
		oc.Platform = value.String
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field version", values[3])
	} else if value.Valid {
		oc.Version = value.String
	}
	return nil
}

// QueryEvents queries the events edge of the OSContext.
func (oc *OSContext) QueryEvents() *EventQuery {
	return (&OSContextClient{config: oc.config}).QueryEvents(oc)
}

// Update returns a builder for updating this OSContext.
// Note that, you need to call OSContext.Unwrap() before calling this method, if this OSContext
// was returned from a transaction, and the transaction was committed or rolled back.
func (oc *OSContext) Update() *OSContextUpdateOne {
	return (&OSContextClient{config: oc.config}).UpdateOne(oc)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (oc *OSContext) Unwrap() *OSContext {
	tx, ok := oc.config.driver.(*txDriver)
	if !ok {
		panic("ent: OSContext is not a transactional entity")
	}
	oc.config.driver = tx.drv
	return oc
}

// String implements the fmt.Stringer.
func (oc *OSContext) String() string {
	var builder strings.Builder
	builder.WriteString("OSContext(")
	builder.WriteString(fmt.Sprintf("id=%v", oc.ID))
	builder.WriteString(", name=")
	builder.WriteString(oc.Name)
	builder.WriteString(", family=")
	builder.WriteString(oc.Family)
	builder.WriteString(", platform=")
	builder.WriteString(oc.Platform)
	builder.WriteString(", version=")
	builder.WriteString(oc.Version)
	builder.WriteByte(')')
	return builder.String()
}

// OSContexts is a parsable slice of OSContext.
type OSContexts []*OSContext

func (oc OSContexts) config(cfg config) {
	for _i := range oc {
		oc[_i].config = cfg
	}
}
