// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/blushft/strana/modules/sink/reporter/store/ent/event"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/extra"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/predicate"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/google/uuid"
)

// ExtraUpdate is the builder for updating Extra entities.
type ExtraUpdate struct {
	config
	hooks      []Hook
	mutation   *ExtraMutation
	predicates []predicate.Extra
}

// Where adds a new predicate for the builder.
func (eu *ExtraUpdate) Where(ps ...predicate.Extra) *ExtraUpdate {
	eu.predicates = append(eu.predicates, ps...)
	return eu
}

// SetValues sets the values field.
func (eu *ExtraUpdate) SetValues(m map[string]interface{}) *ExtraUpdate {
	eu.mutation.SetValues(m)
	return eu
}

// AddEventIDs adds the event edge to Event by ids.
func (eu *ExtraUpdate) AddEventIDs(ids ...uuid.UUID) *ExtraUpdate {
	eu.mutation.AddEventIDs(ids...)
	return eu
}

// AddEvent adds the event edges to Event.
func (eu *ExtraUpdate) AddEvent(e ...*Event) *ExtraUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.AddEventIDs(ids...)
}

// Mutation returns the ExtraMutation object of the builder.
func (eu *ExtraUpdate) Mutation() *ExtraMutation {
	return eu.mutation
}

// RemoveEventIDs removes the event edge to Event by ids.
func (eu *ExtraUpdate) RemoveEventIDs(ids ...uuid.UUID) *ExtraUpdate {
	eu.mutation.RemoveEventIDs(ids...)
	return eu
}

// RemoveEvent removes event edges to Event.
func (eu *ExtraUpdate) RemoveEvent(e ...*Event) *ExtraUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.RemoveEventIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (eu *ExtraUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(eu.hooks) == 0 {
		affected, err = eu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ExtraMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			eu.mutation = mutation
			affected, err = eu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(eu.hooks) - 1; i >= 0; i-- {
			mut = eu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (eu *ExtraUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *ExtraUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *ExtraUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eu *ExtraUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   extra.Table,
			Columns: extra.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: extra.FieldID,
			},
		},
	}
	if ps := eu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.Values(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: extra.FieldValues,
		})
	}
	if nodes := eu.mutation.RemovedEventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   extra.EventTable,
			Columns: []string{extra.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   extra.EventTable,
			Columns: []string{extra.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{extra.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ExtraUpdateOne is the builder for updating a single Extra entity.
type ExtraUpdateOne struct {
	config
	hooks    []Hook
	mutation *ExtraMutation
}

// SetValues sets the values field.
func (euo *ExtraUpdateOne) SetValues(m map[string]interface{}) *ExtraUpdateOne {
	euo.mutation.SetValues(m)
	return euo
}

// AddEventIDs adds the event edge to Event by ids.
func (euo *ExtraUpdateOne) AddEventIDs(ids ...uuid.UUID) *ExtraUpdateOne {
	euo.mutation.AddEventIDs(ids...)
	return euo
}

// AddEvent adds the event edges to Event.
func (euo *ExtraUpdateOne) AddEvent(e ...*Event) *ExtraUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.AddEventIDs(ids...)
}

// Mutation returns the ExtraMutation object of the builder.
func (euo *ExtraUpdateOne) Mutation() *ExtraMutation {
	return euo.mutation
}

// RemoveEventIDs removes the event edge to Event by ids.
func (euo *ExtraUpdateOne) RemoveEventIDs(ids ...uuid.UUID) *ExtraUpdateOne {
	euo.mutation.RemoveEventIDs(ids...)
	return euo
}

// RemoveEvent removes event edges to Event.
func (euo *ExtraUpdateOne) RemoveEvent(e ...*Event) *ExtraUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.RemoveEventIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (euo *ExtraUpdateOne) Save(ctx context.Context) (*Extra, error) {

	var (
		err  error
		node *Extra
	)
	if len(euo.hooks) == 0 {
		node, err = euo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ExtraMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			euo.mutation = mutation
			node, err = euo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(euo.hooks) - 1; i >= 0; i-- {
			mut = euo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, euo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (euo *ExtraUpdateOne) SaveX(ctx context.Context) *Extra {
	e, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return e
}

// Exec executes the query on the entity.
func (euo *ExtraUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *ExtraUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (euo *ExtraUpdateOne) sqlSave(ctx context.Context) (e *Extra, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   extra.Table,
			Columns: extra.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: extra.FieldID,
			},
		},
	}
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Extra.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := euo.mutation.Values(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: extra.FieldValues,
		})
	}
	if nodes := euo.mutation.RemovedEventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   extra.EventTable,
			Columns: []string{extra.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   extra.EventTable,
			Columns: []string{extra.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	e = &Extra{config: euo.config}
	_spec.Assign = e.assignValues
	_spec.ScanValues = e.scanValues()
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{extra.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return e, nil
}
