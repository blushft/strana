// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/blushft/strana/modules/sink/reporter/store/ent/page"
	"github.com/facebook/ent/dialect/sql"
)

// Page is the model entity for the Page schema.
type Page struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Hostname holds the value of the "hostname" field.
	Hostname string `json:"hostname,omitempty"`
	// Path holds the value of the "path" field.
	Path string `json:"path,omitempty"`
	// Referrer holds the value of the "referrer" field.
	Referrer string `json:"referrer,omitempty"`
	// Search holds the value of the "search" field.
	Search string `json:"search,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Hash holds the value of the "hash" field.
	Hash string `json:"hash,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PageQuery when eager-loading is set.
	Edges PageEdges `json:"edges"`
}

// PageEdges holds the relations/edges for other nodes in the graph.
type PageEdges struct {
	// Events holds the value of the events edge.
	Events []*Event
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EventsOrErr returns the Events value or an error if the edge
// was not loaded in eager-loading.
func (e PageEdges) EventsOrErr() ([]*Event, error) {
	if e.loadedTypes[0] {
		return e.Events, nil
	}
	return nil, &NotLoadedError{edge: "events"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Page) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // hostname
		&sql.NullString{}, // path
		&sql.NullString{}, // referrer
		&sql.NullString{}, // search
		&sql.NullString{}, // title
		&sql.NullString{}, // hash
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Page fields.
func (pa *Page) assignValues(values ...interface{}) error {
	if m, n := len(values), len(page.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	pa.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field hostname", values[0])
	} else if value.Valid {
		pa.Hostname = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field path", values[1])
	} else if value.Valid {
		pa.Path = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field referrer", values[2])
	} else if value.Valid {
		pa.Referrer = value.String
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field search", values[3])
	} else if value.Valid {
		pa.Search = value.String
	}
	if value, ok := values[4].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field title", values[4])
	} else if value.Valid {
		pa.Title = value.String
	}
	if value, ok := values[5].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field hash", values[5])
	} else if value.Valid {
		pa.Hash = value.String
	}
	return nil
}

// QueryEvents queries the events edge of the Page.
func (pa *Page) QueryEvents() *EventQuery {
	return (&PageClient{config: pa.config}).QueryEvents(pa)
}

// Update returns a builder for updating this Page.
// Note that, you need to call Page.Unwrap() before calling this method, if this Page
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *Page) Update() *PageUpdateOne {
	return (&PageClient{config: pa.config}).UpdateOne(pa)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (pa *Page) Unwrap() *Page {
	tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: Page is not a transactional entity")
	}
	pa.config.driver = tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *Page) String() string {
	var builder strings.Builder
	builder.WriteString("Page(")
	builder.WriteString(fmt.Sprintf("id=%v", pa.ID))
	builder.WriteString(", hostname=")
	builder.WriteString(pa.Hostname)
	builder.WriteString(", path=")
	builder.WriteString(pa.Path)
	builder.WriteString(", referrer=")
	builder.WriteString(pa.Referrer)
	builder.WriteString(", search=")
	builder.WriteString(pa.Search)
	builder.WriteString(", title=")
	builder.WriteString(pa.Title)
	builder.WriteString(", hash=")
	builder.WriteString(pa.Hash)
	builder.WriteByte(')')
	return builder.String()
}

// Pages is a parsable slice of Page.
type Pages []*Page

func (pa Pages) config(cfg config) {
	for _i := range pa {
		pa[_i].config = cfg
	}
}
