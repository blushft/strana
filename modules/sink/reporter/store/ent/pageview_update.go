// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/blushft/strana/modules/sink/reporter/store/ent/app"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/pageview"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/predicate"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/session"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/user"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/google/uuid"
)

// PageViewUpdate is the builder for updating PageView entities.
type PageViewUpdate struct {
	config
	hooks      []Hook
	mutation   *PageViewMutation
	predicates []predicate.PageView
}

// Where adds a new predicate for the builder.
func (pvu *PageViewUpdate) Where(ps ...predicate.PageView) *PageViewUpdate {
	pvu.predicates = append(pvu.predicates, ps...)
	return pvu
}

// SetHostname sets the hostname field.
func (pvu *PageViewUpdate) SetHostname(s string) *PageViewUpdate {
	pvu.mutation.SetHostname(s)
	return pvu
}

// SetPathname sets the pathname field.
func (pvu *PageViewUpdate) SetPathname(s string) *PageViewUpdate {
	pvu.mutation.SetPathname(s)
	return pvu
}

// SetReferrer sets the referrer field.
func (pvu *PageViewUpdate) SetReferrer(s string) *PageViewUpdate {
	pvu.mutation.SetReferrer(s)
	return pvu
}

// SetIsEntry sets the is_entry field.
func (pvu *PageViewUpdate) SetIsEntry(b bool) *PageViewUpdate {
	pvu.mutation.SetIsEntry(b)
	return pvu
}

// SetIsFinished sets the is_finished field.
func (pvu *PageViewUpdate) SetIsFinished(b bool) *PageViewUpdate {
	pvu.mutation.SetIsFinished(b)
	return pvu
}

// SetDuration sets the duration field.
func (pvu *PageViewUpdate) SetDuration(i int) *PageViewUpdate {
	pvu.mutation.ResetDuration()
	pvu.mutation.SetDuration(i)
	return pvu
}

// AddDuration adds i to duration.
func (pvu *PageViewUpdate) AddDuration(i int) *PageViewUpdate {
	pvu.mutation.AddDuration(i)
	return pvu
}

// SetTimestamp sets the timestamp field.
func (pvu *PageViewUpdate) SetTimestamp(t time.Time) *PageViewUpdate {
	pvu.mutation.SetTimestamp(t)
	return pvu
}

// SetUserAgent sets the user_agent field.
func (pvu *PageViewUpdate) SetUserAgent(s string) *PageViewUpdate {
	pvu.mutation.SetUserAgent(s)
	return pvu
}

// SetNillableUserAgent sets the user_agent field if the given value is not nil.
func (pvu *PageViewUpdate) SetNillableUserAgent(s *string) *PageViewUpdate {
	if s != nil {
		pvu.SetUserAgent(*s)
	}
	return pvu
}

// ClearUserAgent clears the value of user_agent.
func (pvu *PageViewUpdate) ClearUserAgent() *PageViewUpdate {
	pvu.mutation.ClearUserAgent()
	return pvu
}

// SetIPAddress sets the ip_address field.
func (pvu *PageViewUpdate) SetIPAddress(s string) *PageViewUpdate {
	pvu.mutation.SetIPAddress(s)
	return pvu
}

// SetNillableIPAddress sets the ip_address field if the given value is not nil.
func (pvu *PageViewUpdate) SetNillableIPAddress(s *string) *PageViewUpdate {
	if s != nil {
		pvu.SetIPAddress(*s)
	}
	return pvu
}

// ClearIPAddress clears the value of ip_address.
func (pvu *PageViewUpdate) ClearIPAddress() *PageViewUpdate {
	pvu.mutation.ClearIPAddress()
	return pvu
}

// SetScreenDim sets the screen_dim field.
func (pvu *PageViewUpdate) SetScreenDim(s string) *PageViewUpdate {
	pvu.mutation.SetScreenDim(s)
	return pvu
}

// SetNillableScreenDim sets the screen_dim field if the given value is not nil.
func (pvu *PageViewUpdate) SetNillableScreenDim(s *string) *PageViewUpdate {
	if s != nil {
		pvu.SetScreenDim(*s)
	}
	return pvu
}

// ClearScreenDim clears the value of screen_dim.
func (pvu *PageViewUpdate) ClearScreenDim() *PageViewUpdate {
	pvu.mutation.ClearScreenDim()
	return pvu
}

// SetExtra sets the extra field.
func (pvu *PageViewUpdate) SetExtra(m map[string]interface{}) *PageViewUpdate {
	pvu.mutation.SetExtra(m)
	return pvu
}

// ClearExtra clears the value of extra.
func (pvu *PageViewUpdate) ClearExtra() *PageViewUpdate {
	pvu.mutation.ClearExtra()
	return pvu
}

// SetAppID sets the app edge to App by id.
func (pvu *PageViewUpdate) SetAppID(id int) *PageViewUpdate {
	pvu.mutation.SetAppID(id)
	return pvu
}

// SetNillableAppID sets the app edge to App by id if the given value is not nil.
func (pvu *PageViewUpdate) SetNillableAppID(id *int) *PageViewUpdate {
	if id != nil {
		pvu = pvu.SetAppID(*id)
	}
	return pvu
}

// SetApp sets the app edge to App.
func (pvu *PageViewUpdate) SetApp(a *App) *PageViewUpdate {
	return pvu.SetAppID(a.ID)
}

// SetSessionID sets the session edge to Session by id.
func (pvu *PageViewUpdate) SetSessionID(id uuid.UUID) *PageViewUpdate {
	pvu.mutation.SetSessionID(id)
	return pvu
}

// SetNillableSessionID sets the session edge to Session by id if the given value is not nil.
func (pvu *PageViewUpdate) SetNillableSessionID(id *uuid.UUID) *PageViewUpdate {
	if id != nil {
		pvu = pvu.SetSessionID(*id)
	}
	return pvu
}

// SetSession sets the session edge to Session.
func (pvu *PageViewUpdate) SetSession(s *Session) *PageViewUpdate {
	return pvu.SetSessionID(s.ID)
}

// SetUserID sets the user edge to User by id.
func (pvu *PageViewUpdate) SetUserID(id string) *PageViewUpdate {
	pvu.mutation.SetUserID(id)
	return pvu
}

// SetNillableUserID sets the user edge to User by id if the given value is not nil.
func (pvu *PageViewUpdate) SetNillableUserID(id *string) *PageViewUpdate {
	if id != nil {
		pvu = pvu.SetUserID(*id)
	}
	return pvu
}

// SetUser sets the user edge to User.
func (pvu *PageViewUpdate) SetUser(u *User) *PageViewUpdate {
	return pvu.SetUserID(u.ID)
}

// Mutation returns the PageViewMutation object of the builder.
func (pvu *PageViewUpdate) Mutation() *PageViewMutation {
	return pvu.mutation
}

// ClearApp clears the app edge to App.
func (pvu *PageViewUpdate) ClearApp() *PageViewUpdate {
	pvu.mutation.ClearApp()
	return pvu
}

// ClearSession clears the session edge to Session.
func (pvu *PageViewUpdate) ClearSession() *PageViewUpdate {
	pvu.mutation.ClearSession()
	return pvu
}

// ClearUser clears the user edge to User.
func (pvu *PageViewUpdate) ClearUser() *PageViewUpdate {
	pvu.mutation.ClearUser()
	return pvu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (pvu *PageViewUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(pvu.hooks) == 0 {
		affected, err = pvu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PageViewMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pvu.mutation = mutation
			affected, err = pvu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pvu.hooks) - 1; i >= 0; i-- {
			mut = pvu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pvu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pvu *PageViewUpdate) SaveX(ctx context.Context) int {
	affected, err := pvu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pvu *PageViewUpdate) Exec(ctx context.Context) error {
	_, err := pvu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pvu *PageViewUpdate) ExecX(ctx context.Context) {
	if err := pvu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pvu *PageViewUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pageview.Table,
			Columns: pageview.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: pageview.FieldID,
			},
		},
	}
	if ps := pvu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pvu.mutation.Hostname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pageview.FieldHostname,
		})
	}
	if value, ok := pvu.mutation.Pathname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pageview.FieldPathname,
		})
	}
	if value, ok := pvu.mutation.Referrer(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pageview.FieldReferrer,
		})
	}
	if value, ok := pvu.mutation.IsEntry(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: pageview.FieldIsEntry,
		})
	}
	if value, ok := pvu.mutation.IsFinished(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: pageview.FieldIsFinished,
		})
	}
	if value, ok := pvu.mutation.Duration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pageview.FieldDuration,
		})
	}
	if value, ok := pvu.mutation.AddedDuration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pageview.FieldDuration,
		})
	}
	if value, ok := pvu.mutation.Timestamp(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pageview.FieldTimestamp,
		})
	}
	if value, ok := pvu.mutation.UserAgent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pageview.FieldUserAgent,
		})
	}
	if pvu.mutation.UserAgentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pageview.FieldUserAgent,
		})
	}
	if value, ok := pvu.mutation.IPAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pageview.FieldIPAddress,
		})
	}
	if pvu.mutation.IPAddressCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pageview.FieldIPAddress,
		})
	}
	if value, ok := pvu.mutation.ScreenDim(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pageview.FieldScreenDim,
		})
	}
	if pvu.mutation.ScreenDimCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pageview.FieldScreenDim,
		})
	}
	if value, ok := pvu.mutation.Extra(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: pageview.FieldExtra,
		})
	}
	if pvu.mutation.ExtraCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: pageview.FieldExtra,
		})
	}
	if pvu.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pageview.AppTable,
			Columns: []string{pageview.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pvu.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pageview.AppTable,
			Columns: []string{pageview.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pvu.mutation.SessionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pageview.SessionTable,
			Columns: []string{pageview.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: session.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pvu.mutation.SessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pageview.SessionTable,
			Columns: []string{pageview.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: session.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pvu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pageview.UserTable,
			Columns: []string{pageview.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pvu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pageview.UserTable,
			Columns: []string{pageview.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pvu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pageview.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PageViewUpdateOne is the builder for updating a single PageView entity.
type PageViewUpdateOne struct {
	config
	hooks    []Hook
	mutation *PageViewMutation
}

// SetHostname sets the hostname field.
func (pvuo *PageViewUpdateOne) SetHostname(s string) *PageViewUpdateOne {
	pvuo.mutation.SetHostname(s)
	return pvuo
}

// SetPathname sets the pathname field.
func (pvuo *PageViewUpdateOne) SetPathname(s string) *PageViewUpdateOne {
	pvuo.mutation.SetPathname(s)
	return pvuo
}

// SetReferrer sets the referrer field.
func (pvuo *PageViewUpdateOne) SetReferrer(s string) *PageViewUpdateOne {
	pvuo.mutation.SetReferrer(s)
	return pvuo
}

// SetIsEntry sets the is_entry field.
func (pvuo *PageViewUpdateOne) SetIsEntry(b bool) *PageViewUpdateOne {
	pvuo.mutation.SetIsEntry(b)
	return pvuo
}

// SetIsFinished sets the is_finished field.
func (pvuo *PageViewUpdateOne) SetIsFinished(b bool) *PageViewUpdateOne {
	pvuo.mutation.SetIsFinished(b)
	return pvuo
}

// SetDuration sets the duration field.
func (pvuo *PageViewUpdateOne) SetDuration(i int) *PageViewUpdateOne {
	pvuo.mutation.ResetDuration()
	pvuo.mutation.SetDuration(i)
	return pvuo
}

// AddDuration adds i to duration.
func (pvuo *PageViewUpdateOne) AddDuration(i int) *PageViewUpdateOne {
	pvuo.mutation.AddDuration(i)
	return pvuo
}

// SetTimestamp sets the timestamp field.
func (pvuo *PageViewUpdateOne) SetTimestamp(t time.Time) *PageViewUpdateOne {
	pvuo.mutation.SetTimestamp(t)
	return pvuo
}

// SetUserAgent sets the user_agent field.
func (pvuo *PageViewUpdateOne) SetUserAgent(s string) *PageViewUpdateOne {
	pvuo.mutation.SetUserAgent(s)
	return pvuo
}

// SetNillableUserAgent sets the user_agent field if the given value is not nil.
func (pvuo *PageViewUpdateOne) SetNillableUserAgent(s *string) *PageViewUpdateOne {
	if s != nil {
		pvuo.SetUserAgent(*s)
	}
	return pvuo
}

// ClearUserAgent clears the value of user_agent.
func (pvuo *PageViewUpdateOne) ClearUserAgent() *PageViewUpdateOne {
	pvuo.mutation.ClearUserAgent()
	return pvuo
}

// SetIPAddress sets the ip_address field.
func (pvuo *PageViewUpdateOne) SetIPAddress(s string) *PageViewUpdateOne {
	pvuo.mutation.SetIPAddress(s)
	return pvuo
}

// SetNillableIPAddress sets the ip_address field if the given value is not nil.
func (pvuo *PageViewUpdateOne) SetNillableIPAddress(s *string) *PageViewUpdateOne {
	if s != nil {
		pvuo.SetIPAddress(*s)
	}
	return pvuo
}

// ClearIPAddress clears the value of ip_address.
func (pvuo *PageViewUpdateOne) ClearIPAddress() *PageViewUpdateOne {
	pvuo.mutation.ClearIPAddress()
	return pvuo
}

// SetScreenDim sets the screen_dim field.
func (pvuo *PageViewUpdateOne) SetScreenDim(s string) *PageViewUpdateOne {
	pvuo.mutation.SetScreenDim(s)
	return pvuo
}

// SetNillableScreenDim sets the screen_dim field if the given value is not nil.
func (pvuo *PageViewUpdateOne) SetNillableScreenDim(s *string) *PageViewUpdateOne {
	if s != nil {
		pvuo.SetScreenDim(*s)
	}
	return pvuo
}

// ClearScreenDim clears the value of screen_dim.
func (pvuo *PageViewUpdateOne) ClearScreenDim() *PageViewUpdateOne {
	pvuo.mutation.ClearScreenDim()
	return pvuo
}

// SetExtra sets the extra field.
func (pvuo *PageViewUpdateOne) SetExtra(m map[string]interface{}) *PageViewUpdateOne {
	pvuo.mutation.SetExtra(m)
	return pvuo
}

// ClearExtra clears the value of extra.
func (pvuo *PageViewUpdateOne) ClearExtra() *PageViewUpdateOne {
	pvuo.mutation.ClearExtra()
	return pvuo
}

// SetAppID sets the app edge to App by id.
func (pvuo *PageViewUpdateOne) SetAppID(id int) *PageViewUpdateOne {
	pvuo.mutation.SetAppID(id)
	return pvuo
}

// SetNillableAppID sets the app edge to App by id if the given value is not nil.
func (pvuo *PageViewUpdateOne) SetNillableAppID(id *int) *PageViewUpdateOne {
	if id != nil {
		pvuo = pvuo.SetAppID(*id)
	}
	return pvuo
}

// SetApp sets the app edge to App.
func (pvuo *PageViewUpdateOne) SetApp(a *App) *PageViewUpdateOne {
	return pvuo.SetAppID(a.ID)
}

// SetSessionID sets the session edge to Session by id.
func (pvuo *PageViewUpdateOne) SetSessionID(id uuid.UUID) *PageViewUpdateOne {
	pvuo.mutation.SetSessionID(id)
	return pvuo
}

// SetNillableSessionID sets the session edge to Session by id if the given value is not nil.
func (pvuo *PageViewUpdateOne) SetNillableSessionID(id *uuid.UUID) *PageViewUpdateOne {
	if id != nil {
		pvuo = pvuo.SetSessionID(*id)
	}
	return pvuo
}

// SetSession sets the session edge to Session.
func (pvuo *PageViewUpdateOne) SetSession(s *Session) *PageViewUpdateOne {
	return pvuo.SetSessionID(s.ID)
}

// SetUserID sets the user edge to User by id.
func (pvuo *PageViewUpdateOne) SetUserID(id string) *PageViewUpdateOne {
	pvuo.mutation.SetUserID(id)
	return pvuo
}

// SetNillableUserID sets the user edge to User by id if the given value is not nil.
func (pvuo *PageViewUpdateOne) SetNillableUserID(id *string) *PageViewUpdateOne {
	if id != nil {
		pvuo = pvuo.SetUserID(*id)
	}
	return pvuo
}

// SetUser sets the user edge to User.
func (pvuo *PageViewUpdateOne) SetUser(u *User) *PageViewUpdateOne {
	return pvuo.SetUserID(u.ID)
}

// Mutation returns the PageViewMutation object of the builder.
func (pvuo *PageViewUpdateOne) Mutation() *PageViewMutation {
	return pvuo.mutation
}

// ClearApp clears the app edge to App.
func (pvuo *PageViewUpdateOne) ClearApp() *PageViewUpdateOne {
	pvuo.mutation.ClearApp()
	return pvuo
}

// ClearSession clears the session edge to Session.
func (pvuo *PageViewUpdateOne) ClearSession() *PageViewUpdateOne {
	pvuo.mutation.ClearSession()
	return pvuo
}

// ClearUser clears the user edge to User.
func (pvuo *PageViewUpdateOne) ClearUser() *PageViewUpdateOne {
	pvuo.mutation.ClearUser()
	return pvuo
}

// Save executes the query and returns the updated entity.
func (pvuo *PageViewUpdateOne) Save(ctx context.Context) (*PageView, error) {

	var (
		err  error
		node *PageView
	)
	if len(pvuo.hooks) == 0 {
		node, err = pvuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PageViewMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pvuo.mutation = mutation
			node, err = pvuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pvuo.hooks) - 1; i >= 0; i-- {
			mut = pvuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pvuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pvuo *PageViewUpdateOne) SaveX(ctx context.Context) *PageView {
	pv, err := pvuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return pv
}

// Exec executes the query on the entity.
func (pvuo *PageViewUpdateOne) Exec(ctx context.Context) error {
	_, err := pvuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pvuo *PageViewUpdateOne) ExecX(ctx context.Context) {
	if err := pvuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pvuo *PageViewUpdateOne) sqlSave(ctx context.Context) (pv *PageView, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pageview.Table,
			Columns: pageview.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: pageview.FieldID,
			},
		},
	}
	id, ok := pvuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing PageView.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := pvuo.mutation.Hostname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pageview.FieldHostname,
		})
	}
	if value, ok := pvuo.mutation.Pathname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pageview.FieldPathname,
		})
	}
	if value, ok := pvuo.mutation.Referrer(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pageview.FieldReferrer,
		})
	}
	if value, ok := pvuo.mutation.IsEntry(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: pageview.FieldIsEntry,
		})
	}
	if value, ok := pvuo.mutation.IsFinished(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: pageview.FieldIsFinished,
		})
	}
	if value, ok := pvuo.mutation.Duration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pageview.FieldDuration,
		})
	}
	if value, ok := pvuo.mutation.AddedDuration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: pageview.FieldDuration,
		})
	}
	if value, ok := pvuo.mutation.Timestamp(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pageview.FieldTimestamp,
		})
	}
	if value, ok := pvuo.mutation.UserAgent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pageview.FieldUserAgent,
		})
	}
	if pvuo.mutation.UserAgentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pageview.FieldUserAgent,
		})
	}
	if value, ok := pvuo.mutation.IPAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pageview.FieldIPAddress,
		})
	}
	if pvuo.mutation.IPAddressCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pageview.FieldIPAddress,
		})
	}
	if value, ok := pvuo.mutation.ScreenDim(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pageview.FieldScreenDim,
		})
	}
	if pvuo.mutation.ScreenDimCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pageview.FieldScreenDim,
		})
	}
	if value, ok := pvuo.mutation.Extra(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: pageview.FieldExtra,
		})
	}
	if pvuo.mutation.ExtraCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: pageview.FieldExtra,
		})
	}
	if pvuo.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pageview.AppTable,
			Columns: []string{pageview.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pvuo.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pageview.AppTable,
			Columns: []string{pageview.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pvuo.mutation.SessionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pageview.SessionTable,
			Columns: []string{pageview.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: session.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pvuo.mutation.SessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pageview.SessionTable,
			Columns: []string{pageview.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: session.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pvuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pageview.UserTable,
			Columns: []string{pageview.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pvuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pageview.UserTable,
			Columns: []string{pageview.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	pv = &PageView{config: pvuo.config}
	_spec.Assign = pv.assignValues
	_spec.ScanValues = pv.scanValues()
	if err = sqlgraph.UpdateNode(ctx, pvuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pageview.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return pv, nil
}
