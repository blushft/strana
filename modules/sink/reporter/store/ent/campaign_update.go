// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/blushft/strana/modules/sink/reporter/store/ent/campaign"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/event"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/predicate"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/google/uuid"
)

// CampaignUpdate is the builder for updating Campaign entities.
type CampaignUpdate struct {
	config
	hooks      []Hook
	mutation   *CampaignMutation
	predicates []predicate.Campaign
}

// Where adds a new predicate for the builder.
func (cu *CampaignUpdate) Where(ps ...predicate.Campaign) *CampaignUpdate {
	cu.predicates = append(cu.predicates, ps...)
	return cu
}

// SetName sets the name field.
func (cu *CampaignUpdate) SetName(s string) *CampaignUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetSource sets the source field.
func (cu *CampaignUpdate) SetSource(s string) *CampaignUpdate {
	cu.mutation.SetSource(s)
	return cu
}

// SetNillableSource sets the source field if the given value is not nil.
func (cu *CampaignUpdate) SetNillableSource(s *string) *CampaignUpdate {
	if s != nil {
		cu.SetSource(*s)
	}
	return cu
}

// ClearSource clears the value of source.
func (cu *CampaignUpdate) ClearSource() *CampaignUpdate {
	cu.mutation.ClearSource()
	return cu
}

// SetMedium sets the medium field.
func (cu *CampaignUpdate) SetMedium(s string) *CampaignUpdate {
	cu.mutation.SetMedium(s)
	return cu
}

// SetNillableMedium sets the medium field if the given value is not nil.
func (cu *CampaignUpdate) SetNillableMedium(s *string) *CampaignUpdate {
	if s != nil {
		cu.SetMedium(*s)
	}
	return cu
}

// ClearMedium clears the value of medium.
func (cu *CampaignUpdate) ClearMedium() *CampaignUpdate {
	cu.mutation.ClearMedium()
	return cu
}

// SetTerm sets the term field.
func (cu *CampaignUpdate) SetTerm(s string) *CampaignUpdate {
	cu.mutation.SetTerm(s)
	return cu
}

// SetNillableTerm sets the term field if the given value is not nil.
func (cu *CampaignUpdate) SetNillableTerm(s *string) *CampaignUpdate {
	if s != nil {
		cu.SetTerm(*s)
	}
	return cu
}

// ClearTerm clears the value of term.
func (cu *CampaignUpdate) ClearTerm() *CampaignUpdate {
	cu.mutation.ClearTerm()
	return cu
}

// SetContent sets the content field.
func (cu *CampaignUpdate) SetContent(s string) *CampaignUpdate {
	cu.mutation.SetContent(s)
	return cu
}

// SetNillableContent sets the content field if the given value is not nil.
func (cu *CampaignUpdate) SetNillableContent(s *string) *CampaignUpdate {
	if s != nil {
		cu.SetContent(*s)
	}
	return cu
}

// ClearContent clears the value of content.
func (cu *CampaignUpdate) ClearContent() *CampaignUpdate {
	cu.mutation.ClearContent()
	return cu
}

// AddEventIDs adds the events edge to Event by ids.
func (cu *CampaignUpdate) AddEventIDs(ids ...uuid.UUID) *CampaignUpdate {
	cu.mutation.AddEventIDs(ids...)
	return cu
}

// AddEvents adds the events edges to Event.
func (cu *CampaignUpdate) AddEvents(e ...*Event) *CampaignUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cu.AddEventIDs(ids...)
}

// Mutation returns the CampaignMutation object of the builder.
func (cu *CampaignUpdate) Mutation() *CampaignMutation {
	return cu.mutation
}

// RemoveEventIDs removes the events edge to Event by ids.
func (cu *CampaignUpdate) RemoveEventIDs(ids ...uuid.UUID) *CampaignUpdate {
	cu.mutation.RemoveEventIDs(ids...)
	return cu
}

// RemoveEvents removes events edges to Event.
func (cu *CampaignUpdate) RemoveEvents(e ...*Event) *CampaignUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cu.RemoveEventIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (cu *CampaignUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(cu.hooks) == 0 {
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CampaignMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CampaignUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CampaignUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CampaignUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *CampaignUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   campaign.Table,
			Columns: campaign.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: campaign.FieldID,
			},
		},
	}
	if ps := cu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: campaign.FieldName,
		})
	}
	if value, ok := cu.mutation.Source(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: campaign.FieldSource,
		})
	}
	if cu.mutation.SourceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: campaign.FieldSource,
		})
	}
	if value, ok := cu.mutation.Medium(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: campaign.FieldMedium,
		})
	}
	if cu.mutation.MediumCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: campaign.FieldMedium,
		})
	}
	if value, ok := cu.mutation.Term(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: campaign.FieldTerm,
		})
	}
	if cu.mutation.TermCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: campaign.FieldTerm,
		})
	}
	if value, ok := cu.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: campaign.FieldContent,
		})
	}
	if cu.mutation.ContentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: campaign.FieldContent,
		})
	}
	if nodes := cu.mutation.RemovedEventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   campaign.EventsTable,
			Columns: []string{campaign.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   campaign.EventsTable,
			Columns: []string{campaign.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{campaign.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// CampaignUpdateOne is the builder for updating a single Campaign entity.
type CampaignUpdateOne struct {
	config
	hooks    []Hook
	mutation *CampaignMutation
}

// SetName sets the name field.
func (cuo *CampaignUpdateOne) SetName(s string) *CampaignUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetSource sets the source field.
func (cuo *CampaignUpdateOne) SetSource(s string) *CampaignUpdateOne {
	cuo.mutation.SetSource(s)
	return cuo
}

// SetNillableSource sets the source field if the given value is not nil.
func (cuo *CampaignUpdateOne) SetNillableSource(s *string) *CampaignUpdateOne {
	if s != nil {
		cuo.SetSource(*s)
	}
	return cuo
}

// ClearSource clears the value of source.
func (cuo *CampaignUpdateOne) ClearSource() *CampaignUpdateOne {
	cuo.mutation.ClearSource()
	return cuo
}

// SetMedium sets the medium field.
func (cuo *CampaignUpdateOne) SetMedium(s string) *CampaignUpdateOne {
	cuo.mutation.SetMedium(s)
	return cuo
}

// SetNillableMedium sets the medium field if the given value is not nil.
func (cuo *CampaignUpdateOne) SetNillableMedium(s *string) *CampaignUpdateOne {
	if s != nil {
		cuo.SetMedium(*s)
	}
	return cuo
}

// ClearMedium clears the value of medium.
func (cuo *CampaignUpdateOne) ClearMedium() *CampaignUpdateOne {
	cuo.mutation.ClearMedium()
	return cuo
}

// SetTerm sets the term field.
func (cuo *CampaignUpdateOne) SetTerm(s string) *CampaignUpdateOne {
	cuo.mutation.SetTerm(s)
	return cuo
}

// SetNillableTerm sets the term field if the given value is not nil.
func (cuo *CampaignUpdateOne) SetNillableTerm(s *string) *CampaignUpdateOne {
	if s != nil {
		cuo.SetTerm(*s)
	}
	return cuo
}

// ClearTerm clears the value of term.
func (cuo *CampaignUpdateOne) ClearTerm() *CampaignUpdateOne {
	cuo.mutation.ClearTerm()
	return cuo
}

// SetContent sets the content field.
func (cuo *CampaignUpdateOne) SetContent(s string) *CampaignUpdateOne {
	cuo.mutation.SetContent(s)
	return cuo
}

// SetNillableContent sets the content field if the given value is not nil.
func (cuo *CampaignUpdateOne) SetNillableContent(s *string) *CampaignUpdateOne {
	if s != nil {
		cuo.SetContent(*s)
	}
	return cuo
}

// ClearContent clears the value of content.
func (cuo *CampaignUpdateOne) ClearContent() *CampaignUpdateOne {
	cuo.mutation.ClearContent()
	return cuo
}

// AddEventIDs adds the events edge to Event by ids.
func (cuo *CampaignUpdateOne) AddEventIDs(ids ...uuid.UUID) *CampaignUpdateOne {
	cuo.mutation.AddEventIDs(ids...)
	return cuo
}

// AddEvents adds the events edges to Event.
func (cuo *CampaignUpdateOne) AddEvents(e ...*Event) *CampaignUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cuo.AddEventIDs(ids...)
}

// Mutation returns the CampaignMutation object of the builder.
func (cuo *CampaignUpdateOne) Mutation() *CampaignMutation {
	return cuo.mutation
}

// RemoveEventIDs removes the events edge to Event by ids.
func (cuo *CampaignUpdateOne) RemoveEventIDs(ids ...uuid.UUID) *CampaignUpdateOne {
	cuo.mutation.RemoveEventIDs(ids...)
	return cuo
}

// RemoveEvents removes events edges to Event.
func (cuo *CampaignUpdateOne) RemoveEvents(e ...*Event) *CampaignUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cuo.RemoveEventIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (cuo *CampaignUpdateOne) Save(ctx context.Context) (*Campaign, error) {

	var (
		err  error
		node *Campaign
	)
	if len(cuo.hooks) == 0 {
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CampaignMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CampaignUpdateOne) SaveX(ctx context.Context) *Campaign {
	c, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return c
}

// Exec executes the query on the entity.
func (cuo *CampaignUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CampaignUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *CampaignUpdateOne) sqlSave(ctx context.Context) (c *Campaign, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   campaign.Table,
			Columns: campaign.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: campaign.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Campaign.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := cuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: campaign.FieldName,
		})
	}
	if value, ok := cuo.mutation.Source(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: campaign.FieldSource,
		})
	}
	if cuo.mutation.SourceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: campaign.FieldSource,
		})
	}
	if value, ok := cuo.mutation.Medium(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: campaign.FieldMedium,
		})
	}
	if cuo.mutation.MediumCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: campaign.FieldMedium,
		})
	}
	if value, ok := cuo.mutation.Term(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: campaign.FieldTerm,
		})
	}
	if cuo.mutation.TermCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: campaign.FieldTerm,
		})
	}
	if value, ok := cuo.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: campaign.FieldContent,
		})
	}
	if cuo.mutation.ContentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: campaign.FieldContent,
		})
	}
	if nodes := cuo.mutation.RemovedEventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   campaign.EventsTable,
			Columns: []string{campaign.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   campaign.EventsTable,
			Columns: []string{campaign.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	c = &Campaign{config: cuo.config}
	_spec.Assign = c.assignValues
	_spec.ScanValues = c.scanValues()
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{campaign.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return c, nil
}
