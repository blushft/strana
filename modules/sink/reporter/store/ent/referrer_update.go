// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/blushft/strana/modules/sink/reporter/store/ent/event"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/predicate"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/referrer"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/google/uuid"
)

// ReferrerUpdate is the builder for updating Referrer entities.
type ReferrerUpdate struct {
	config
	hooks      []Hook
	mutation   *ReferrerMutation
	predicates []predicate.Referrer
}

// Where adds a new predicate for the builder.
func (ru *ReferrerUpdate) Where(ps ...predicate.Referrer) *ReferrerUpdate {
	ru.predicates = append(ru.predicates, ps...)
	return ru
}

// SetName sets the name field.
func (ru *ReferrerUpdate) SetName(s string) *ReferrerUpdate {
	ru.mutation.SetName(s)
	return ru
}

// SetType sets the type field.
func (ru *ReferrerUpdate) SetType(s string) *ReferrerUpdate {
	ru.mutation.SetType(s)
	return ru
}

// SetNillableType sets the type field if the given value is not nil.
func (ru *ReferrerUpdate) SetNillableType(s *string) *ReferrerUpdate {
	if s != nil {
		ru.SetType(*s)
	}
	return ru
}

// ClearType clears the value of type.
func (ru *ReferrerUpdate) ClearType() *ReferrerUpdate {
	ru.mutation.ClearType()
	return ru
}

// SetHostname sets the hostname field.
func (ru *ReferrerUpdate) SetHostname(s string) *ReferrerUpdate {
	ru.mutation.SetHostname(s)
	return ru
}

// SetNillableHostname sets the hostname field if the given value is not nil.
func (ru *ReferrerUpdate) SetNillableHostname(s *string) *ReferrerUpdate {
	if s != nil {
		ru.SetHostname(*s)
	}
	return ru
}

// ClearHostname clears the value of hostname.
func (ru *ReferrerUpdate) ClearHostname() *ReferrerUpdate {
	ru.mutation.ClearHostname()
	return ru
}

// SetLink sets the link field.
func (ru *ReferrerUpdate) SetLink(s string) *ReferrerUpdate {
	ru.mutation.SetLink(s)
	return ru
}

// SetNillableLink sets the link field if the given value is not nil.
func (ru *ReferrerUpdate) SetNillableLink(s *string) *ReferrerUpdate {
	if s != nil {
		ru.SetLink(*s)
	}
	return ru
}

// ClearLink clears the value of link.
func (ru *ReferrerUpdate) ClearLink() *ReferrerUpdate {
	ru.mutation.ClearLink()
	return ru
}

// AddEventIDs adds the events edge to Event by ids.
func (ru *ReferrerUpdate) AddEventIDs(ids ...uuid.UUID) *ReferrerUpdate {
	ru.mutation.AddEventIDs(ids...)
	return ru
}

// AddEvents adds the events edges to Event.
func (ru *ReferrerUpdate) AddEvents(e ...*Event) *ReferrerUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ru.AddEventIDs(ids...)
}

// Mutation returns the ReferrerMutation object of the builder.
func (ru *ReferrerUpdate) Mutation() *ReferrerMutation {
	return ru.mutation
}

// RemoveEventIDs removes the events edge to Event by ids.
func (ru *ReferrerUpdate) RemoveEventIDs(ids ...uuid.UUID) *ReferrerUpdate {
	ru.mutation.RemoveEventIDs(ids...)
	return ru
}

// RemoveEvents removes events edges to Event.
func (ru *ReferrerUpdate) RemoveEvents(e ...*Event) *ReferrerUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ru.RemoveEventIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (ru *ReferrerUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(ru.hooks) == 0 {
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReferrerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *ReferrerUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *ReferrerUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *ReferrerUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ru *ReferrerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   referrer.Table,
			Columns: referrer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: referrer.FieldID,
			},
		},
	}
	if ps := ru.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: referrer.FieldName,
		})
	}
	if value, ok := ru.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: referrer.FieldType,
		})
	}
	if ru.mutation.TypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: referrer.FieldType,
		})
	}
	if value, ok := ru.mutation.Hostname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: referrer.FieldHostname,
		})
	}
	if ru.mutation.HostnameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: referrer.FieldHostname,
		})
	}
	if value, ok := ru.mutation.Link(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: referrer.FieldLink,
		})
	}
	if ru.mutation.LinkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: referrer.FieldLink,
		})
	}
	if nodes := ru.mutation.RemovedEventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   referrer.EventsTable,
			Columns: []string{referrer.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   referrer.EventsTable,
			Columns: []string{referrer.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{referrer.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ReferrerUpdateOne is the builder for updating a single Referrer entity.
type ReferrerUpdateOne struct {
	config
	hooks    []Hook
	mutation *ReferrerMutation
}

// SetName sets the name field.
func (ruo *ReferrerUpdateOne) SetName(s string) *ReferrerUpdateOne {
	ruo.mutation.SetName(s)
	return ruo
}

// SetType sets the type field.
func (ruo *ReferrerUpdateOne) SetType(s string) *ReferrerUpdateOne {
	ruo.mutation.SetType(s)
	return ruo
}

// SetNillableType sets the type field if the given value is not nil.
func (ruo *ReferrerUpdateOne) SetNillableType(s *string) *ReferrerUpdateOne {
	if s != nil {
		ruo.SetType(*s)
	}
	return ruo
}

// ClearType clears the value of type.
func (ruo *ReferrerUpdateOne) ClearType() *ReferrerUpdateOne {
	ruo.mutation.ClearType()
	return ruo
}

// SetHostname sets the hostname field.
func (ruo *ReferrerUpdateOne) SetHostname(s string) *ReferrerUpdateOne {
	ruo.mutation.SetHostname(s)
	return ruo
}

// SetNillableHostname sets the hostname field if the given value is not nil.
func (ruo *ReferrerUpdateOne) SetNillableHostname(s *string) *ReferrerUpdateOne {
	if s != nil {
		ruo.SetHostname(*s)
	}
	return ruo
}

// ClearHostname clears the value of hostname.
func (ruo *ReferrerUpdateOne) ClearHostname() *ReferrerUpdateOne {
	ruo.mutation.ClearHostname()
	return ruo
}

// SetLink sets the link field.
func (ruo *ReferrerUpdateOne) SetLink(s string) *ReferrerUpdateOne {
	ruo.mutation.SetLink(s)
	return ruo
}

// SetNillableLink sets the link field if the given value is not nil.
func (ruo *ReferrerUpdateOne) SetNillableLink(s *string) *ReferrerUpdateOne {
	if s != nil {
		ruo.SetLink(*s)
	}
	return ruo
}

// ClearLink clears the value of link.
func (ruo *ReferrerUpdateOne) ClearLink() *ReferrerUpdateOne {
	ruo.mutation.ClearLink()
	return ruo
}

// AddEventIDs adds the events edge to Event by ids.
func (ruo *ReferrerUpdateOne) AddEventIDs(ids ...uuid.UUID) *ReferrerUpdateOne {
	ruo.mutation.AddEventIDs(ids...)
	return ruo
}

// AddEvents adds the events edges to Event.
func (ruo *ReferrerUpdateOne) AddEvents(e ...*Event) *ReferrerUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ruo.AddEventIDs(ids...)
}

// Mutation returns the ReferrerMutation object of the builder.
func (ruo *ReferrerUpdateOne) Mutation() *ReferrerMutation {
	return ruo.mutation
}

// RemoveEventIDs removes the events edge to Event by ids.
func (ruo *ReferrerUpdateOne) RemoveEventIDs(ids ...uuid.UUID) *ReferrerUpdateOne {
	ruo.mutation.RemoveEventIDs(ids...)
	return ruo
}

// RemoveEvents removes events edges to Event.
func (ruo *ReferrerUpdateOne) RemoveEvents(e ...*Event) *ReferrerUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ruo.RemoveEventIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (ruo *ReferrerUpdateOne) Save(ctx context.Context) (*Referrer, error) {

	var (
		err  error
		node *Referrer
	)
	if len(ruo.hooks) == 0 {
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReferrerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			mut = ruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *ReferrerUpdateOne) SaveX(ctx context.Context) *Referrer {
	r, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return r
}

// Exec executes the query on the entity.
func (ruo *ReferrerUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *ReferrerUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ruo *ReferrerUpdateOne) sqlSave(ctx context.Context) (r *Referrer, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   referrer.Table,
			Columns: referrer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: referrer.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Referrer.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := ruo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: referrer.FieldName,
		})
	}
	if value, ok := ruo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: referrer.FieldType,
		})
	}
	if ruo.mutation.TypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: referrer.FieldType,
		})
	}
	if value, ok := ruo.mutation.Hostname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: referrer.FieldHostname,
		})
	}
	if ruo.mutation.HostnameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: referrer.FieldHostname,
		})
	}
	if value, ok := ruo.mutation.Link(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: referrer.FieldLink,
		})
	}
	if ruo.mutation.LinkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: referrer.FieldLink,
		})
	}
	if nodes := ruo.mutation.RemovedEventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   referrer.EventsTable,
			Columns: []string{referrer.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   referrer.EventsTable,
			Columns: []string{referrer.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	r = &Referrer{config: ruo.config}
	_spec.Assign = r.assignValues
	_spec.ScanValues = r.scanValues()
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{referrer.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return r, nil
}
