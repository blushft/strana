// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"github.com/blushft/strana/modules/sink/reporter/store/ent/extra"
	"github.com/facebook/ent/dialect/sql"
)

// Extra is the model entity for the Extra schema.
type Extra struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Values holds the value of the "values" field.
	Values map[string]interface{} `json:"values,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ExtraQuery when eager-loading is set.
	Edges ExtraEdges `json:"edges"`
}

// ExtraEdges holds the relations/edges for other nodes in the graph.
type ExtraEdges struct {
	// Event holds the value of the event edge.
	Event []*Event
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EventOrErr returns the Event value or an error if the edge
// was not loaded in eager-loading.
func (e ExtraEdges) EventOrErr() ([]*Event, error) {
	if e.loadedTypes[0] {
		return e.Event, nil
	}
	return nil, &NotLoadedError{edge: "event"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Extra) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
		&[]byte{},        // values
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Extra fields.
func (e *Extra) assignValues(values ...interface{}) error {
	if m, n := len(values), len(extra.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	e.ID = int(value.Int64)
	values = values[1:]

	if value, ok := values[0].(*[]byte); !ok {
		return fmt.Errorf("unexpected type %T for field values", values[0])
	} else if value != nil && len(*value) > 0 {
		if err := json.Unmarshal(*value, &e.Values); err != nil {
			return fmt.Errorf("unmarshal field values: %v", err)
		}
	}
	return nil
}

// QueryEvent queries the event edge of the Extra.
func (e *Extra) QueryEvent() *EventQuery {
	return (&ExtraClient{config: e.config}).QueryEvent(e)
}

// Update returns a builder for updating this Extra.
// Note that, you need to call Extra.Unwrap() before calling this method, if this Extra
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Extra) Update() *ExtraUpdateOne {
	return (&ExtraClient{config: e.config}).UpdateOne(e)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (e *Extra) Unwrap() *Extra {
	tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Extra is not a transactional entity")
	}
	e.config.driver = tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Extra) String() string {
	var builder strings.Builder
	builder.WriteString("Extra(")
	builder.WriteString(fmt.Sprintf("id=%v", e.ID))
	builder.WriteString(", values=")
	builder.WriteString(fmt.Sprintf("%v", e.Values))
	builder.WriteByte(')')
	return builder.String()
}

// Extras is a parsable slice of Extra.
type Extras []*Extra

func (e Extras) config(cfg config) {
	for _i := range e {
		e[_i].config = cfg
	}
}
