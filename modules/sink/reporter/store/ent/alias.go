// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/blushft/strana/modules/sink/reporter/store/ent/alias"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/event"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/user"
	"github.com/facebook/ent/dialect/sql"
	"github.com/google/uuid"
)

// Alias is the model entity for the Alias schema.
type Alias struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// From holds the value of the "from" field.
	From string `json:"from,omitempty"`
	// To holds the value of the "to" field.
	To string `json:"to,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AliasQuery when eager-loading is set.
	Edges        AliasEdges `json:"edges"`
	event_alias  *uuid.UUID
	user_aliases *string
}

// AliasEdges holds the relations/edges for other nodes in the graph.
type AliasEdges struct {
	// Event holds the value of the event edge.
	Event *Event
	// User holds the value of the user edge.
	User *User
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// EventOrErr returns the Event value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AliasEdges) EventOrErr() (*Event, error) {
	if e.loadedTypes[0] {
		if e.Event == nil {
			// The edge event was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: event.Label}
		}
		return e.Event, nil
	}
	return nil, &NotLoadedError{edge: "event"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AliasEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Alias) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // from
		&sql.NullString{}, // to
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Alias) fkValues() []interface{} {
	return []interface{}{
		&uuid.UUID{},      // event_alias
		&sql.NullString{}, // user_aliases
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Alias fields.
func (a *Alias) assignValues(values ...interface{}) error {
	if m, n := len(values), len(alias.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	a.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field from", values[0])
	} else if value.Valid {
		a.From = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field to", values[1])
	} else if value.Valid {
		a.To = value.String
	}
	values = values[2:]
	if len(values) == len(alias.ForeignKeys) {
		if value, ok := values[0].(*uuid.UUID); !ok {
			return fmt.Errorf("unexpected type %T for field event_alias", values[0])
		} else if value != nil {
			a.event_alias = value
		}
		if value, ok := values[1].(*sql.NullString); !ok {
			return fmt.Errorf("unexpected type %T for field user_aliases", values[1])
		} else if value.Valid {
			a.user_aliases = new(string)
			*a.user_aliases = value.String
		}
	}
	return nil
}

// QueryEvent queries the event edge of the Alias.
func (a *Alias) QueryEvent() *EventQuery {
	return (&AliasClient{config: a.config}).QueryEvent(a)
}

// QueryUser queries the user edge of the Alias.
func (a *Alias) QueryUser() *UserQuery {
	return (&AliasClient{config: a.config}).QueryUser(a)
}

// Update returns a builder for updating this Alias.
// Note that, you need to call Alias.Unwrap() before calling this method, if this Alias
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Alias) Update() *AliasUpdateOne {
	return (&AliasClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (a *Alias) Unwrap() *Alias {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Alias is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Alias) String() string {
	var builder strings.Builder
	builder.WriteString("Alias(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", from=")
	builder.WriteString(a.From)
	builder.WriteString(", to=")
	builder.WriteString(a.To)
	builder.WriteByte(')')
	return builder.String()
}

// AliasSlice is a parsable slice of Alias.
type AliasSlice []*Alias

func (a AliasSlice) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
