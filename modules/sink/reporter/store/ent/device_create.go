// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/blushft/strana/modules/sink/reporter/store/ent/device"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/event"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/google/uuid"
)

// DeviceCreate is the builder for creating a Device entity.
type DeviceCreate struct {
	config
	mutation *DeviceMutation
	hooks    []Hook
}

// SetManufacturer sets the manufacturer field.
func (dc *DeviceCreate) SetManufacturer(s string) *DeviceCreate {
	dc.mutation.SetManufacturer(s)
	return dc
}

// SetNillableManufacturer sets the manufacturer field if the given value is not nil.
func (dc *DeviceCreate) SetNillableManufacturer(s *string) *DeviceCreate {
	if s != nil {
		dc.SetManufacturer(*s)
	}
	return dc
}

// SetModel sets the model field.
func (dc *DeviceCreate) SetModel(s string) *DeviceCreate {
	dc.mutation.SetModel(s)
	return dc
}

// SetNillableModel sets the model field if the given value is not nil.
func (dc *DeviceCreate) SetNillableModel(s *string) *DeviceCreate {
	if s != nil {
		dc.SetModel(*s)
	}
	return dc
}

// SetName sets the name field.
func (dc *DeviceCreate) SetName(s string) *DeviceCreate {
	dc.mutation.SetName(s)
	return dc
}

// SetNillableName sets the name field if the given value is not nil.
func (dc *DeviceCreate) SetNillableName(s *string) *DeviceCreate {
	if s != nil {
		dc.SetName(*s)
	}
	return dc
}

// SetType sets the type field.
func (dc *DeviceCreate) SetType(s string) *DeviceCreate {
	dc.mutation.SetType(s)
	return dc
}

// SetNillableType sets the type field if the given value is not nil.
func (dc *DeviceCreate) SetNillableType(s *string) *DeviceCreate {
	if s != nil {
		dc.SetType(*s)
	}
	return dc
}

// SetVersion sets the version field.
func (dc *DeviceCreate) SetVersion(s string) *DeviceCreate {
	dc.mutation.SetVersion(s)
	return dc
}

// SetNillableVersion sets the version field if the given value is not nil.
func (dc *DeviceCreate) SetNillableVersion(s *string) *DeviceCreate {
	if s != nil {
		dc.SetVersion(*s)
	}
	return dc
}

// SetMobile sets the mobile field.
func (dc *DeviceCreate) SetMobile(b bool) *DeviceCreate {
	dc.mutation.SetMobile(b)
	return dc
}

// SetNillableMobile sets the mobile field if the given value is not nil.
func (dc *DeviceCreate) SetNillableMobile(b *bool) *DeviceCreate {
	if b != nil {
		dc.SetMobile(*b)
	}
	return dc
}

// SetTablet sets the tablet field.
func (dc *DeviceCreate) SetTablet(b bool) *DeviceCreate {
	dc.mutation.SetTablet(b)
	return dc
}

// SetNillableTablet sets the tablet field if the given value is not nil.
func (dc *DeviceCreate) SetNillableTablet(b *bool) *DeviceCreate {
	if b != nil {
		dc.SetTablet(*b)
	}
	return dc
}

// SetDesktop sets the desktop field.
func (dc *DeviceCreate) SetDesktop(b bool) *DeviceCreate {
	dc.mutation.SetDesktop(b)
	return dc
}

// SetNillableDesktop sets the desktop field if the given value is not nil.
func (dc *DeviceCreate) SetNillableDesktop(b *bool) *DeviceCreate {
	if b != nil {
		dc.SetDesktop(*b)
	}
	return dc
}

// SetProperties sets the properties field.
func (dc *DeviceCreate) SetProperties(m map[string]interface{}) *DeviceCreate {
	dc.mutation.SetProperties(m)
	return dc
}

// SetID sets the id field.
func (dc *DeviceCreate) SetID(s string) *DeviceCreate {
	dc.mutation.SetID(s)
	return dc
}

// AddEventIDs adds the events edge to Event by ids.
func (dc *DeviceCreate) AddEventIDs(ids ...uuid.UUID) *DeviceCreate {
	dc.mutation.AddEventIDs(ids...)
	return dc
}

// AddEvents adds the events edges to Event.
func (dc *DeviceCreate) AddEvents(e ...*Event) *DeviceCreate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return dc.AddEventIDs(ids...)
}

// Mutation returns the DeviceMutation object of the builder.
func (dc *DeviceCreate) Mutation() *DeviceMutation {
	return dc.mutation
}

// Save creates the Device in the database.
func (dc *DeviceCreate) Save(ctx context.Context) (*Device, error) {
	if err := dc.preSave(); err != nil {
		return nil, err
	}
	var (
		err  error
		node *Device
	)
	if len(dc.hooks) == 0 {
		node, err = dc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DeviceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			dc.mutation = mutation
			node, err = dc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dc.hooks) - 1; i >= 0; i-- {
			mut = dc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DeviceCreate) SaveX(ctx context.Context) *Device {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (dc *DeviceCreate) preSave() error {
	return nil
}

func (dc *DeviceCreate) sqlSave(ctx context.Context) (*Device, error) {
	d, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return d, nil
}

func (dc *DeviceCreate) createSpec() (*Device, *sqlgraph.CreateSpec) {
	var (
		d     = &Device{config: dc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: device.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: device.FieldID,
			},
		}
	)
	if id, ok := dc.mutation.ID(); ok {
		d.ID = id
		_spec.ID.Value = id
	}
	if value, ok := dc.mutation.Manufacturer(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: device.FieldManufacturer,
		})
		d.Manufacturer = value
	}
	if value, ok := dc.mutation.Model(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: device.FieldModel,
		})
		d.Model = value
	}
	if value, ok := dc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: device.FieldName,
		})
		d.Name = value
	}
	if value, ok := dc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: device.FieldType,
		})
		d.Type = value
	}
	if value, ok := dc.mutation.Version(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: device.FieldVersion,
		})
		d.Version = value
	}
	if value, ok := dc.mutation.Mobile(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: device.FieldMobile,
		})
		d.Mobile = value
	}
	if value, ok := dc.mutation.Tablet(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: device.FieldTablet,
		})
		d.Tablet = value
	}
	if value, ok := dc.mutation.Desktop(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: device.FieldDesktop,
		})
		d.Desktop = value
	}
	if value, ok := dc.mutation.Properties(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: device.FieldProperties,
		})
		d.Properties = value
	}
	if nodes := dc.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   device.EventsTable,
			Columns: []string{device.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return d, _spec
}

// DeviceCreateBulk is the builder for creating a bulk of Device entities.
type DeviceCreateBulk struct {
	config
	builders []*DeviceCreate
}

// Save creates the Device entities in the database.
func (dcb *DeviceCreateBulk) Save(ctx context.Context) ([]*Device, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Device, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				if err := builder.preSave(); err != nil {
					return nil, err
				}
				mutation, ok := m.(*DeviceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (dcb *DeviceCreateBulk) SaveX(ctx context.Context) []*Device {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
