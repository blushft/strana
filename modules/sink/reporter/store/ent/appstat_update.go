// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/blushft/strana/modules/sink/reporter/store/ent/app"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/appstat"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/predicate"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// AppStatUpdate is the builder for updating AppStat entities.
type AppStatUpdate struct {
	config
	hooks      []Hook
	mutation   *AppStatMutation
	predicates []predicate.AppStat
}

// Where adds a new predicate for the builder.
func (asu *AppStatUpdate) Where(ps ...predicate.AppStat) *AppStatUpdate {
	asu.predicates = append(asu.predicates, ps...)
	return asu
}

// SetPageviews sets the pageviews field.
func (asu *AppStatUpdate) SetPageviews(i int) *AppStatUpdate {
	asu.mutation.ResetPageviews()
	asu.mutation.SetPageviews(i)
	return asu
}

// AddPageviews adds i to pageviews.
func (asu *AppStatUpdate) AddPageviews(i int) *AppStatUpdate {
	asu.mutation.AddPageviews(i)
	return asu
}

// SetVisitors sets the visitors field.
func (asu *AppStatUpdate) SetVisitors(i int) *AppStatUpdate {
	asu.mutation.ResetVisitors()
	asu.mutation.SetVisitors(i)
	return asu
}

// AddVisitors adds i to visitors.
func (asu *AppStatUpdate) AddVisitors(i int) *AppStatUpdate {
	asu.mutation.AddVisitors(i)
	return asu
}

// SetSessions sets the sessions field.
func (asu *AppStatUpdate) SetSessions(i int) *AppStatUpdate {
	asu.mutation.ResetSessions()
	asu.mutation.SetSessions(i)
	return asu
}

// AddSessions adds i to sessions.
func (asu *AppStatUpdate) AddSessions(i int) *AppStatUpdate {
	asu.mutation.AddSessions(i)
	return asu
}

// SetBouceRate sets the bouce_rate field.
func (asu *AppStatUpdate) SetBouceRate(f float64) *AppStatUpdate {
	asu.mutation.ResetBouceRate()
	asu.mutation.SetBouceRate(f)
	return asu
}

// AddBouceRate adds f to bouce_rate.
func (asu *AppStatUpdate) AddBouceRate(f float64) *AppStatUpdate {
	asu.mutation.AddBouceRate(f)
	return asu
}

// SetKnownDurations sets the known_durations field.
func (asu *AppStatUpdate) SetKnownDurations(i int) *AppStatUpdate {
	asu.mutation.ResetKnownDurations()
	asu.mutation.SetKnownDurations(i)
	return asu
}

// AddKnownDurations adds i to known_durations.
func (asu *AppStatUpdate) AddKnownDurations(i int) *AppStatUpdate {
	asu.mutation.AddKnownDurations(i)
	return asu
}

// SetAvgDuration sets the avg_duration field.
func (asu *AppStatUpdate) SetAvgDuration(f float64) *AppStatUpdate {
	asu.mutation.ResetAvgDuration()
	asu.mutation.SetAvgDuration(f)
	return asu
}

// AddAvgDuration adds f to avg_duration.
func (asu *AppStatUpdate) AddAvgDuration(f float64) *AppStatUpdate {
	asu.mutation.AddAvgDuration(f)
	return asu
}

// SetDate sets the date field.
func (asu *AppStatUpdate) SetDate(t time.Time) *AppStatUpdate {
	asu.mutation.SetDate(t)
	return asu
}

// SetAppID sets the app edge to App by id.
func (asu *AppStatUpdate) SetAppID(id int) *AppStatUpdate {
	asu.mutation.SetAppID(id)
	return asu
}

// SetNillableAppID sets the app edge to App by id if the given value is not nil.
func (asu *AppStatUpdate) SetNillableAppID(id *int) *AppStatUpdate {
	if id != nil {
		asu = asu.SetAppID(*id)
	}
	return asu
}

// SetApp sets the app edge to App.
func (asu *AppStatUpdate) SetApp(a *App) *AppStatUpdate {
	return asu.SetAppID(a.ID)
}

// Mutation returns the AppStatMutation object of the builder.
func (asu *AppStatUpdate) Mutation() *AppStatMutation {
	return asu.mutation
}

// ClearApp clears the app edge to App.
func (asu *AppStatUpdate) ClearApp() *AppStatUpdate {
	asu.mutation.ClearApp()
	return asu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (asu *AppStatUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(asu.hooks) == 0 {
		affected, err = asu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppStatMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			asu.mutation = mutation
			affected, err = asu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(asu.hooks) - 1; i >= 0; i-- {
			mut = asu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, asu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (asu *AppStatUpdate) SaveX(ctx context.Context) int {
	affected, err := asu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (asu *AppStatUpdate) Exec(ctx context.Context) error {
	_, err := asu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asu *AppStatUpdate) ExecX(ctx context.Context) {
	if err := asu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (asu *AppStatUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appstat.Table,
			Columns: appstat.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: appstat.FieldID,
			},
		},
	}
	if ps := asu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := asu.mutation.Pageviews(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: appstat.FieldPageviews,
		})
	}
	if value, ok := asu.mutation.AddedPageviews(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: appstat.FieldPageviews,
		})
	}
	if value, ok := asu.mutation.Visitors(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: appstat.FieldVisitors,
		})
	}
	if value, ok := asu.mutation.AddedVisitors(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: appstat.FieldVisitors,
		})
	}
	if value, ok := asu.mutation.Sessions(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: appstat.FieldSessions,
		})
	}
	if value, ok := asu.mutation.AddedSessions(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: appstat.FieldSessions,
		})
	}
	if value, ok := asu.mutation.BouceRate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: appstat.FieldBouceRate,
		})
	}
	if value, ok := asu.mutation.AddedBouceRate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: appstat.FieldBouceRate,
		})
	}
	if value, ok := asu.mutation.KnownDurations(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: appstat.FieldKnownDurations,
		})
	}
	if value, ok := asu.mutation.AddedKnownDurations(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: appstat.FieldKnownDurations,
		})
	}
	if value, ok := asu.mutation.AvgDuration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: appstat.FieldAvgDuration,
		})
	}
	if value, ok := asu.mutation.AddedAvgDuration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: appstat.FieldAvgDuration,
		})
	}
	if value, ok := asu.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: appstat.FieldDate,
		})
	}
	if asu.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appstat.AppTable,
			Columns: []string{appstat.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asu.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appstat.AppTable,
			Columns: []string{appstat.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, asu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appstat.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// AppStatUpdateOne is the builder for updating a single AppStat entity.
type AppStatUpdateOne struct {
	config
	hooks    []Hook
	mutation *AppStatMutation
}

// SetPageviews sets the pageviews field.
func (asuo *AppStatUpdateOne) SetPageviews(i int) *AppStatUpdateOne {
	asuo.mutation.ResetPageviews()
	asuo.mutation.SetPageviews(i)
	return asuo
}

// AddPageviews adds i to pageviews.
func (asuo *AppStatUpdateOne) AddPageviews(i int) *AppStatUpdateOne {
	asuo.mutation.AddPageviews(i)
	return asuo
}

// SetVisitors sets the visitors field.
func (asuo *AppStatUpdateOne) SetVisitors(i int) *AppStatUpdateOne {
	asuo.mutation.ResetVisitors()
	asuo.mutation.SetVisitors(i)
	return asuo
}

// AddVisitors adds i to visitors.
func (asuo *AppStatUpdateOne) AddVisitors(i int) *AppStatUpdateOne {
	asuo.mutation.AddVisitors(i)
	return asuo
}

// SetSessions sets the sessions field.
func (asuo *AppStatUpdateOne) SetSessions(i int) *AppStatUpdateOne {
	asuo.mutation.ResetSessions()
	asuo.mutation.SetSessions(i)
	return asuo
}

// AddSessions adds i to sessions.
func (asuo *AppStatUpdateOne) AddSessions(i int) *AppStatUpdateOne {
	asuo.mutation.AddSessions(i)
	return asuo
}

// SetBouceRate sets the bouce_rate field.
func (asuo *AppStatUpdateOne) SetBouceRate(f float64) *AppStatUpdateOne {
	asuo.mutation.ResetBouceRate()
	asuo.mutation.SetBouceRate(f)
	return asuo
}

// AddBouceRate adds f to bouce_rate.
func (asuo *AppStatUpdateOne) AddBouceRate(f float64) *AppStatUpdateOne {
	asuo.mutation.AddBouceRate(f)
	return asuo
}

// SetKnownDurations sets the known_durations field.
func (asuo *AppStatUpdateOne) SetKnownDurations(i int) *AppStatUpdateOne {
	asuo.mutation.ResetKnownDurations()
	asuo.mutation.SetKnownDurations(i)
	return asuo
}

// AddKnownDurations adds i to known_durations.
func (asuo *AppStatUpdateOne) AddKnownDurations(i int) *AppStatUpdateOne {
	asuo.mutation.AddKnownDurations(i)
	return asuo
}

// SetAvgDuration sets the avg_duration field.
func (asuo *AppStatUpdateOne) SetAvgDuration(f float64) *AppStatUpdateOne {
	asuo.mutation.ResetAvgDuration()
	asuo.mutation.SetAvgDuration(f)
	return asuo
}

// AddAvgDuration adds f to avg_duration.
func (asuo *AppStatUpdateOne) AddAvgDuration(f float64) *AppStatUpdateOne {
	asuo.mutation.AddAvgDuration(f)
	return asuo
}

// SetDate sets the date field.
func (asuo *AppStatUpdateOne) SetDate(t time.Time) *AppStatUpdateOne {
	asuo.mutation.SetDate(t)
	return asuo
}

// SetAppID sets the app edge to App by id.
func (asuo *AppStatUpdateOne) SetAppID(id int) *AppStatUpdateOne {
	asuo.mutation.SetAppID(id)
	return asuo
}

// SetNillableAppID sets the app edge to App by id if the given value is not nil.
func (asuo *AppStatUpdateOne) SetNillableAppID(id *int) *AppStatUpdateOne {
	if id != nil {
		asuo = asuo.SetAppID(*id)
	}
	return asuo
}

// SetApp sets the app edge to App.
func (asuo *AppStatUpdateOne) SetApp(a *App) *AppStatUpdateOne {
	return asuo.SetAppID(a.ID)
}

// Mutation returns the AppStatMutation object of the builder.
func (asuo *AppStatUpdateOne) Mutation() *AppStatMutation {
	return asuo.mutation
}

// ClearApp clears the app edge to App.
func (asuo *AppStatUpdateOne) ClearApp() *AppStatUpdateOne {
	asuo.mutation.ClearApp()
	return asuo
}

// Save executes the query and returns the updated entity.
func (asuo *AppStatUpdateOne) Save(ctx context.Context) (*AppStat, error) {

	var (
		err  error
		node *AppStat
	)
	if len(asuo.hooks) == 0 {
		node, err = asuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppStatMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			asuo.mutation = mutation
			node, err = asuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(asuo.hooks) - 1; i >= 0; i-- {
			mut = asuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, asuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (asuo *AppStatUpdateOne) SaveX(ctx context.Context) *AppStat {
	as, err := asuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return as
}

// Exec executes the query on the entity.
func (asuo *AppStatUpdateOne) Exec(ctx context.Context) error {
	_, err := asuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asuo *AppStatUpdateOne) ExecX(ctx context.Context) {
	if err := asuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (asuo *AppStatUpdateOne) sqlSave(ctx context.Context) (as *AppStat, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appstat.Table,
			Columns: appstat.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: appstat.FieldID,
			},
		},
	}
	id, ok := asuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing AppStat.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := asuo.mutation.Pageviews(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: appstat.FieldPageviews,
		})
	}
	if value, ok := asuo.mutation.AddedPageviews(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: appstat.FieldPageviews,
		})
	}
	if value, ok := asuo.mutation.Visitors(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: appstat.FieldVisitors,
		})
	}
	if value, ok := asuo.mutation.AddedVisitors(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: appstat.FieldVisitors,
		})
	}
	if value, ok := asuo.mutation.Sessions(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: appstat.FieldSessions,
		})
	}
	if value, ok := asuo.mutation.AddedSessions(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: appstat.FieldSessions,
		})
	}
	if value, ok := asuo.mutation.BouceRate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: appstat.FieldBouceRate,
		})
	}
	if value, ok := asuo.mutation.AddedBouceRate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: appstat.FieldBouceRate,
		})
	}
	if value, ok := asuo.mutation.KnownDurations(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: appstat.FieldKnownDurations,
		})
	}
	if value, ok := asuo.mutation.AddedKnownDurations(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: appstat.FieldKnownDurations,
		})
	}
	if value, ok := asuo.mutation.AvgDuration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: appstat.FieldAvgDuration,
		})
	}
	if value, ok := asuo.mutation.AddedAvgDuration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: appstat.FieldAvgDuration,
		})
	}
	if value, ok := asuo.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: appstat.FieldDate,
		})
	}
	if asuo.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appstat.AppTable,
			Columns: []string{appstat.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asuo.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appstat.AppTable,
			Columns: []string{appstat.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	as = &AppStat{config: asuo.config}
	_spec.Assign = as.assignValues
	_spec.ScanValues = as.scanValues()
	if err = sqlgraph.UpdateNode(ctx, asuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appstat.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return as, nil
}
