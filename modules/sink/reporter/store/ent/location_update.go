// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/blushft/strana/modules/sink/reporter/store/ent/event"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/location"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/predicate"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/google/uuid"
)

// LocationUpdate is the builder for updating Location entities.
type LocationUpdate struct {
	config
	hooks      []Hook
	mutation   *LocationMutation
	predicates []predicate.Location
}

// Where adds a new predicate for the builder.
func (lu *LocationUpdate) Where(ps ...predicate.Location) *LocationUpdate {
	lu.predicates = append(lu.predicates, ps...)
	return lu
}

// SetStreet sets the street field.
func (lu *LocationUpdate) SetStreet(s string) *LocationUpdate {
	lu.mutation.SetStreet(s)
	return lu
}

// SetNillableStreet sets the street field if the given value is not nil.
func (lu *LocationUpdate) SetNillableStreet(s *string) *LocationUpdate {
	if s != nil {
		lu.SetStreet(*s)
	}
	return lu
}

// ClearStreet clears the value of street.
func (lu *LocationUpdate) ClearStreet() *LocationUpdate {
	lu.mutation.ClearStreet()
	return lu
}

// SetCity sets the city field.
func (lu *LocationUpdate) SetCity(s string) *LocationUpdate {
	lu.mutation.SetCity(s)
	return lu
}

// SetNillableCity sets the city field if the given value is not nil.
func (lu *LocationUpdate) SetNillableCity(s *string) *LocationUpdate {
	if s != nil {
		lu.SetCity(*s)
	}
	return lu
}

// ClearCity clears the value of city.
func (lu *LocationUpdate) ClearCity() *LocationUpdate {
	lu.mutation.ClearCity()
	return lu
}

// SetState sets the state field.
func (lu *LocationUpdate) SetState(s string) *LocationUpdate {
	lu.mutation.SetState(s)
	return lu
}

// SetNillableState sets the state field if the given value is not nil.
func (lu *LocationUpdate) SetNillableState(s *string) *LocationUpdate {
	if s != nil {
		lu.SetState(*s)
	}
	return lu
}

// ClearState clears the value of state.
func (lu *LocationUpdate) ClearState() *LocationUpdate {
	lu.mutation.ClearState()
	return lu
}

// SetPostalcode sets the postalcode field.
func (lu *LocationUpdate) SetPostalcode(s string) *LocationUpdate {
	lu.mutation.SetPostalcode(s)
	return lu
}

// SetNillablePostalcode sets the postalcode field if the given value is not nil.
func (lu *LocationUpdate) SetNillablePostalcode(s *string) *LocationUpdate {
	if s != nil {
		lu.SetPostalcode(*s)
	}
	return lu
}

// ClearPostalcode clears the value of postalcode.
func (lu *LocationUpdate) ClearPostalcode() *LocationUpdate {
	lu.mutation.ClearPostalcode()
	return lu
}

// SetRegion sets the region field.
func (lu *LocationUpdate) SetRegion(s string) *LocationUpdate {
	lu.mutation.SetRegion(s)
	return lu
}

// SetNillableRegion sets the region field if the given value is not nil.
func (lu *LocationUpdate) SetNillableRegion(s *string) *LocationUpdate {
	if s != nil {
		lu.SetRegion(*s)
	}
	return lu
}

// ClearRegion clears the value of region.
func (lu *LocationUpdate) ClearRegion() *LocationUpdate {
	lu.mutation.ClearRegion()
	return lu
}

// SetLocale sets the locale field.
func (lu *LocationUpdate) SetLocale(s string) *LocationUpdate {
	lu.mutation.SetLocale(s)
	return lu
}

// SetNillableLocale sets the locale field if the given value is not nil.
func (lu *LocationUpdate) SetNillableLocale(s *string) *LocationUpdate {
	if s != nil {
		lu.SetLocale(*s)
	}
	return lu
}

// ClearLocale clears the value of locale.
func (lu *LocationUpdate) ClearLocale() *LocationUpdate {
	lu.mutation.ClearLocale()
	return lu
}

// SetCountry sets the country field.
func (lu *LocationUpdate) SetCountry(s string) *LocationUpdate {
	lu.mutation.SetCountry(s)
	return lu
}

// SetNillableCountry sets the country field if the given value is not nil.
func (lu *LocationUpdate) SetNillableCountry(s *string) *LocationUpdate {
	if s != nil {
		lu.SetCountry(*s)
	}
	return lu
}

// ClearCountry clears the value of country.
func (lu *LocationUpdate) ClearCountry() *LocationUpdate {
	lu.mutation.ClearCountry()
	return lu
}

// SetLongitude sets the longitude field.
func (lu *LocationUpdate) SetLongitude(f float64) *LocationUpdate {
	lu.mutation.ResetLongitude()
	lu.mutation.SetLongitude(f)
	return lu
}

// SetNillableLongitude sets the longitude field if the given value is not nil.
func (lu *LocationUpdate) SetNillableLongitude(f *float64) *LocationUpdate {
	if f != nil {
		lu.SetLongitude(*f)
	}
	return lu
}

// AddLongitude adds f to longitude.
func (lu *LocationUpdate) AddLongitude(f float64) *LocationUpdate {
	lu.mutation.AddLongitude(f)
	return lu
}

// ClearLongitude clears the value of longitude.
func (lu *LocationUpdate) ClearLongitude() *LocationUpdate {
	lu.mutation.ClearLongitude()
	return lu
}

// SetLatitude sets the latitude field.
func (lu *LocationUpdate) SetLatitude(f float64) *LocationUpdate {
	lu.mutation.ResetLatitude()
	lu.mutation.SetLatitude(f)
	return lu
}

// SetNillableLatitude sets the latitude field if the given value is not nil.
func (lu *LocationUpdate) SetNillableLatitude(f *float64) *LocationUpdate {
	if f != nil {
		lu.SetLatitude(*f)
	}
	return lu
}

// AddLatitude adds f to latitude.
func (lu *LocationUpdate) AddLatitude(f float64) *LocationUpdate {
	lu.mutation.AddLatitude(f)
	return lu
}

// ClearLatitude clears the value of latitude.
func (lu *LocationUpdate) ClearLatitude() *LocationUpdate {
	lu.mutation.ClearLatitude()
	return lu
}

// SetTimezone sets the timezone field.
func (lu *LocationUpdate) SetTimezone(s string) *LocationUpdate {
	lu.mutation.SetTimezone(s)
	return lu
}

// SetNillableTimezone sets the timezone field if the given value is not nil.
func (lu *LocationUpdate) SetNillableTimezone(s *string) *LocationUpdate {
	if s != nil {
		lu.SetTimezone(*s)
	}
	return lu
}

// ClearTimezone clears the value of timezone.
func (lu *LocationUpdate) ClearTimezone() *LocationUpdate {
	lu.mutation.ClearTimezone()
	return lu
}

// AddEventIDs adds the events edge to Event by ids.
func (lu *LocationUpdate) AddEventIDs(ids ...uuid.UUID) *LocationUpdate {
	lu.mutation.AddEventIDs(ids...)
	return lu
}

// AddEvents adds the events edges to Event.
func (lu *LocationUpdate) AddEvents(e ...*Event) *LocationUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return lu.AddEventIDs(ids...)
}

// Mutation returns the LocationMutation object of the builder.
func (lu *LocationUpdate) Mutation() *LocationMutation {
	return lu.mutation
}

// RemoveEventIDs removes the events edge to Event by ids.
func (lu *LocationUpdate) RemoveEventIDs(ids ...uuid.UUID) *LocationUpdate {
	lu.mutation.RemoveEventIDs(ids...)
	return lu
}

// RemoveEvents removes events edges to Event.
func (lu *LocationUpdate) RemoveEvents(e ...*Event) *LocationUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return lu.RemoveEventIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (lu *LocationUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(lu.hooks) == 0 {
		affected, err = lu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LocationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			lu.mutation = mutation
			affected, err = lu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(lu.hooks) - 1; i >= 0; i-- {
			mut = lu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, lu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (lu *LocationUpdate) SaveX(ctx context.Context) int {
	affected, err := lu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lu *LocationUpdate) Exec(ctx context.Context) error {
	_, err := lu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lu *LocationUpdate) ExecX(ctx context.Context) {
	if err := lu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (lu *LocationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   location.Table,
			Columns: location.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: location.FieldID,
			},
		},
	}
	if ps := lu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lu.mutation.Street(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: location.FieldStreet,
		})
	}
	if lu.mutation.StreetCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: location.FieldStreet,
		})
	}
	if value, ok := lu.mutation.City(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: location.FieldCity,
		})
	}
	if lu.mutation.CityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: location.FieldCity,
		})
	}
	if value, ok := lu.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: location.FieldState,
		})
	}
	if lu.mutation.StateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: location.FieldState,
		})
	}
	if value, ok := lu.mutation.Postalcode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: location.FieldPostalcode,
		})
	}
	if lu.mutation.PostalcodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: location.FieldPostalcode,
		})
	}
	if value, ok := lu.mutation.Region(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: location.FieldRegion,
		})
	}
	if lu.mutation.RegionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: location.FieldRegion,
		})
	}
	if value, ok := lu.mutation.Locale(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: location.FieldLocale,
		})
	}
	if lu.mutation.LocaleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: location.FieldLocale,
		})
	}
	if value, ok := lu.mutation.Country(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: location.FieldCountry,
		})
	}
	if lu.mutation.CountryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: location.FieldCountry,
		})
	}
	if value, ok := lu.mutation.Longitude(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: location.FieldLongitude,
		})
	}
	if value, ok := lu.mutation.AddedLongitude(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: location.FieldLongitude,
		})
	}
	if lu.mutation.LongitudeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: location.FieldLongitude,
		})
	}
	if value, ok := lu.mutation.Latitude(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: location.FieldLatitude,
		})
	}
	if value, ok := lu.mutation.AddedLatitude(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: location.FieldLatitude,
		})
	}
	if lu.mutation.LatitudeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: location.FieldLatitude,
		})
	}
	if value, ok := lu.mutation.Timezone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: location.FieldTimezone,
		})
	}
	if lu.mutation.TimezoneCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: location.FieldTimezone,
		})
	}
	if nodes := lu.mutation.RemovedEventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   location.EventsTable,
			Columns: []string{location.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   location.EventsTable,
			Columns: []string{location.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{location.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// LocationUpdateOne is the builder for updating a single Location entity.
type LocationUpdateOne struct {
	config
	hooks    []Hook
	mutation *LocationMutation
}

// SetStreet sets the street field.
func (luo *LocationUpdateOne) SetStreet(s string) *LocationUpdateOne {
	luo.mutation.SetStreet(s)
	return luo
}

// SetNillableStreet sets the street field if the given value is not nil.
func (luo *LocationUpdateOne) SetNillableStreet(s *string) *LocationUpdateOne {
	if s != nil {
		luo.SetStreet(*s)
	}
	return luo
}

// ClearStreet clears the value of street.
func (luo *LocationUpdateOne) ClearStreet() *LocationUpdateOne {
	luo.mutation.ClearStreet()
	return luo
}

// SetCity sets the city field.
func (luo *LocationUpdateOne) SetCity(s string) *LocationUpdateOne {
	luo.mutation.SetCity(s)
	return luo
}

// SetNillableCity sets the city field if the given value is not nil.
func (luo *LocationUpdateOne) SetNillableCity(s *string) *LocationUpdateOne {
	if s != nil {
		luo.SetCity(*s)
	}
	return luo
}

// ClearCity clears the value of city.
func (luo *LocationUpdateOne) ClearCity() *LocationUpdateOne {
	luo.mutation.ClearCity()
	return luo
}

// SetState sets the state field.
func (luo *LocationUpdateOne) SetState(s string) *LocationUpdateOne {
	luo.mutation.SetState(s)
	return luo
}

// SetNillableState sets the state field if the given value is not nil.
func (luo *LocationUpdateOne) SetNillableState(s *string) *LocationUpdateOne {
	if s != nil {
		luo.SetState(*s)
	}
	return luo
}

// ClearState clears the value of state.
func (luo *LocationUpdateOne) ClearState() *LocationUpdateOne {
	luo.mutation.ClearState()
	return luo
}

// SetPostalcode sets the postalcode field.
func (luo *LocationUpdateOne) SetPostalcode(s string) *LocationUpdateOne {
	luo.mutation.SetPostalcode(s)
	return luo
}

// SetNillablePostalcode sets the postalcode field if the given value is not nil.
func (luo *LocationUpdateOne) SetNillablePostalcode(s *string) *LocationUpdateOne {
	if s != nil {
		luo.SetPostalcode(*s)
	}
	return luo
}

// ClearPostalcode clears the value of postalcode.
func (luo *LocationUpdateOne) ClearPostalcode() *LocationUpdateOne {
	luo.mutation.ClearPostalcode()
	return luo
}

// SetRegion sets the region field.
func (luo *LocationUpdateOne) SetRegion(s string) *LocationUpdateOne {
	luo.mutation.SetRegion(s)
	return luo
}

// SetNillableRegion sets the region field if the given value is not nil.
func (luo *LocationUpdateOne) SetNillableRegion(s *string) *LocationUpdateOne {
	if s != nil {
		luo.SetRegion(*s)
	}
	return luo
}

// ClearRegion clears the value of region.
func (luo *LocationUpdateOne) ClearRegion() *LocationUpdateOne {
	luo.mutation.ClearRegion()
	return luo
}

// SetLocale sets the locale field.
func (luo *LocationUpdateOne) SetLocale(s string) *LocationUpdateOne {
	luo.mutation.SetLocale(s)
	return luo
}

// SetNillableLocale sets the locale field if the given value is not nil.
func (luo *LocationUpdateOne) SetNillableLocale(s *string) *LocationUpdateOne {
	if s != nil {
		luo.SetLocale(*s)
	}
	return luo
}

// ClearLocale clears the value of locale.
func (luo *LocationUpdateOne) ClearLocale() *LocationUpdateOne {
	luo.mutation.ClearLocale()
	return luo
}

// SetCountry sets the country field.
func (luo *LocationUpdateOne) SetCountry(s string) *LocationUpdateOne {
	luo.mutation.SetCountry(s)
	return luo
}

// SetNillableCountry sets the country field if the given value is not nil.
func (luo *LocationUpdateOne) SetNillableCountry(s *string) *LocationUpdateOne {
	if s != nil {
		luo.SetCountry(*s)
	}
	return luo
}

// ClearCountry clears the value of country.
func (luo *LocationUpdateOne) ClearCountry() *LocationUpdateOne {
	luo.mutation.ClearCountry()
	return luo
}

// SetLongitude sets the longitude field.
func (luo *LocationUpdateOne) SetLongitude(f float64) *LocationUpdateOne {
	luo.mutation.ResetLongitude()
	luo.mutation.SetLongitude(f)
	return luo
}

// SetNillableLongitude sets the longitude field if the given value is not nil.
func (luo *LocationUpdateOne) SetNillableLongitude(f *float64) *LocationUpdateOne {
	if f != nil {
		luo.SetLongitude(*f)
	}
	return luo
}

// AddLongitude adds f to longitude.
func (luo *LocationUpdateOne) AddLongitude(f float64) *LocationUpdateOne {
	luo.mutation.AddLongitude(f)
	return luo
}

// ClearLongitude clears the value of longitude.
func (luo *LocationUpdateOne) ClearLongitude() *LocationUpdateOne {
	luo.mutation.ClearLongitude()
	return luo
}

// SetLatitude sets the latitude field.
func (luo *LocationUpdateOne) SetLatitude(f float64) *LocationUpdateOne {
	luo.mutation.ResetLatitude()
	luo.mutation.SetLatitude(f)
	return luo
}

// SetNillableLatitude sets the latitude field if the given value is not nil.
func (luo *LocationUpdateOne) SetNillableLatitude(f *float64) *LocationUpdateOne {
	if f != nil {
		luo.SetLatitude(*f)
	}
	return luo
}

// AddLatitude adds f to latitude.
func (luo *LocationUpdateOne) AddLatitude(f float64) *LocationUpdateOne {
	luo.mutation.AddLatitude(f)
	return luo
}

// ClearLatitude clears the value of latitude.
func (luo *LocationUpdateOne) ClearLatitude() *LocationUpdateOne {
	luo.mutation.ClearLatitude()
	return luo
}

// SetTimezone sets the timezone field.
func (luo *LocationUpdateOne) SetTimezone(s string) *LocationUpdateOne {
	luo.mutation.SetTimezone(s)
	return luo
}

// SetNillableTimezone sets the timezone field if the given value is not nil.
func (luo *LocationUpdateOne) SetNillableTimezone(s *string) *LocationUpdateOne {
	if s != nil {
		luo.SetTimezone(*s)
	}
	return luo
}

// ClearTimezone clears the value of timezone.
func (luo *LocationUpdateOne) ClearTimezone() *LocationUpdateOne {
	luo.mutation.ClearTimezone()
	return luo
}

// AddEventIDs adds the events edge to Event by ids.
func (luo *LocationUpdateOne) AddEventIDs(ids ...uuid.UUID) *LocationUpdateOne {
	luo.mutation.AddEventIDs(ids...)
	return luo
}

// AddEvents adds the events edges to Event.
func (luo *LocationUpdateOne) AddEvents(e ...*Event) *LocationUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return luo.AddEventIDs(ids...)
}

// Mutation returns the LocationMutation object of the builder.
func (luo *LocationUpdateOne) Mutation() *LocationMutation {
	return luo.mutation
}

// RemoveEventIDs removes the events edge to Event by ids.
func (luo *LocationUpdateOne) RemoveEventIDs(ids ...uuid.UUID) *LocationUpdateOne {
	luo.mutation.RemoveEventIDs(ids...)
	return luo
}

// RemoveEvents removes events edges to Event.
func (luo *LocationUpdateOne) RemoveEvents(e ...*Event) *LocationUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return luo.RemoveEventIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (luo *LocationUpdateOne) Save(ctx context.Context) (*Location, error) {

	var (
		err  error
		node *Location
	)
	if len(luo.hooks) == 0 {
		node, err = luo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LocationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			luo.mutation = mutation
			node, err = luo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(luo.hooks) - 1; i >= 0; i-- {
			mut = luo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, luo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (luo *LocationUpdateOne) SaveX(ctx context.Context) *Location {
	l, err := luo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return l
}

// Exec executes the query on the entity.
func (luo *LocationUpdateOne) Exec(ctx context.Context) error {
	_, err := luo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luo *LocationUpdateOne) ExecX(ctx context.Context) {
	if err := luo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (luo *LocationUpdateOne) sqlSave(ctx context.Context) (l *Location, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   location.Table,
			Columns: location.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: location.FieldID,
			},
		},
	}
	id, ok := luo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Location.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := luo.mutation.Street(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: location.FieldStreet,
		})
	}
	if luo.mutation.StreetCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: location.FieldStreet,
		})
	}
	if value, ok := luo.mutation.City(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: location.FieldCity,
		})
	}
	if luo.mutation.CityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: location.FieldCity,
		})
	}
	if value, ok := luo.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: location.FieldState,
		})
	}
	if luo.mutation.StateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: location.FieldState,
		})
	}
	if value, ok := luo.mutation.Postalcode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: location.FieldPostalcode,
		})
	}
	if luo.mutation.PostalcodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: location.FieldPostalcode,
		})
	}
	if value, ok := luo.mutation.Region(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: location.FieldRegion,
		})
	}
	if luo.mutation.RegionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: location.FieldRegion,
		})
	}
	if value, ok := luo.mutation.Locale(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: location.FieldLocale,
		})
	}
	if luo.mutation.LocaleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: location.FieldLocale,
		})
	}
	if value, ok := luo.mutation.Country(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: location.FieldCountry,
		})
	}
	if luo.mutation.CountryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: location.FieldCountry,
		})
	}
	if value, ok := luo.mutation.Longitude(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: location.FieldLongitude,
		})
	}
	if value, ok := luo.mutation.AddedLongitude(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: location.FieldLongitude,
		})
	}
	if luo.mutation.LongitudeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: location.FieldLongitude,
		})
	}
	if value, ok := luo.mutation.Latitude(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: location.FieldLatitude,
		})
	}
	if value, ok := luo.mutation.AddedLatitude(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: location.FieldLatitude,
		})
	}
	if luo.mutation.LatitudeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: location.FieldLatitude,
		})
	}
	if value, ok := luo.mutation.Timezone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: location.FieldTimezone,
		})
	}
	if luo.mutation.TimezoneCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: location.FieldTimezone,
		})
	}
	if nodes := luo.mutation.RemovedEventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   location.EventsTable,
			Columns: []string{location.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   location.EventsTable,
			Columns: []string{location.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	l = &Location{config: luo.config}
	_spec.Assign = l.assignValues
	_spec.ScanValues = l.scanValues()
	if err = sqlgraph.UpdateNode(ctx, luo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{location.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return l, nil
}
