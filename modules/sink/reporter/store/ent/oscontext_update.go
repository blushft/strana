// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/blushft/strana/modules/sink/reporter/store/ent/event"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/oscontext"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/predicate"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/google/uuid"
)

// OSContextUpdate is the builder for updating OSContext entities.
type OSContextUpdate struct {
	config
	hooks      []Hook
	mutation   *OSContextMutation
	predicates []predicate.OSContext
}

// Where adds a new predicate for the builder.
func (ocu *OSContextUpdate) Where(ps ...predicate.OSContext) *OSContextUpdate {
	ocu.predicates = append(ocu.predicates, ps...)
	return ocu
}

// SetName sets the name field.
func (ocu *OSContextUpdate) SetName(s string) *OSContextUpdate {
	ocu.mutation.SetName(s)
	return ocu
}

// SetFamily sets the family field.
func (ocu *OSContextUpdate) SetFamily(s string) *OSContextUpdate {
	ocu.mutation.SetFamily(s)
	return ocu
}

// SetPlatform sets the platform field.
func (ocu *OSContextUpdate) SetPlatform(s string) *OSContextUpdate {
	ocu.mutation.SetPlatform(s)
	return ocu
}

// SetNillablePlatform sets the platform field if the given value is not nil.
func (ocu *OSContextUpdate) SetNillablePlatform(s *string) *OSContextUpdate {
	if s != nil {
		ocu.SetPlatform(*s)
	}
	return ocu
}

// ClearPlatform clears the value of platform.
func (ocu *OSContextUpdate) ClearPlatform() *OSContextUpdate {
	ocu.mutation.ClearPlatform()
	return ocu
}

// SetVersion sets the version field.
func (ocu *OSContextUpdate) SetVersion(s string) *OSContextUpdate {
	ocu.mutation.SetVersion(s)
	return ocu
}

// AddEventIDs adds the events edge to Event by ids.
func (ocu *OSContextUpdate) AddEventIDs(ids ...uuid.UUID) *OSContextUpdate {
	ocu.mutation.AddEventIDs(ids...)
	return ocu
}

// AddEvents adds the events edges to Event.
func (ocu *OSContextUpdate) AddEvents(e ...*Event) *OSContextUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ocu.AddEventIDs(ids...)
}

// Mutation returns the OSContextMutation object of the builder.
func (ocu *OSContextUpdate) Mutation() *OSContextMutation {
	return ocu.mutation
}

// RemoveEventIDs removes the events edge to Event by ids.
func (ocu *OSContextUpdate) RemoveEventIDs(ids ...uuid.UUID) *OSContextUpdate {
	ocu.mutation.RemoveEventIDs(ids...)
	return ocu
}

// RemoveEvents removes events edges to Event.
func (ocu *OSContextUpdate) RemoveEvents(e ...*Event) *OSContextUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ocu.RemoveEventIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (ocu *OSContextUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(ocu.hooks) == 0 {
		affected, err = ocu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OSContextMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ocu.mutation = mutation
			affected, err = ocu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ocu.hooks) - 1; i >= 0; i-- {
			mut = ocu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ocu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ocu *OSContextUpdate) SaveX(ctx context.Context) int {
	affected, err := ocu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ocu *OSContextUpdate) Exec(ctx context.Context) error {
	_, err := ocu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocu *OSContextUpdate) ExecX(ctx context.Context) {
	if err := ocu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ocu *OSContextUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   oscontext.Table,
			Columns: oscontext.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: oscontext.FieldID,
			},
		},
	}
	if ps := ocu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ocu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oscontext.FieldName,
		})
	}
	if value, ok := ocu.mutation.Family(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oscontext.FieldFamily,
		})
	}
	if value, ok := ocu.mutation.Platform(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oscontext.FieldPlatform,
		})
	}
	if ocu.mutation.PlatformCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: oscontext.FieldPlatform,
		})
	}
	if value, ok := ocu.mutation.Version(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oscontext.FieldVersion,
		})
	}
	if nodes := ocu.mutation.RemovedEventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   oscontext.EventsTable,
			Columns: []string{oscontext.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ocu.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   oscontext.EventsTable,
			Columns: []string{oscontext.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ocu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oscontext.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// OSContextUpdateOne is the builder for updating a single OSContext entity.
type OSContextUpdateOne struct {
	config
	hooks    []Hook
	mutation *OSContextMutation
}

// SetName sets the name field.
func (ocuo *OSContextUpdateOne) SetName(s string) *OSContextUpdateOne {
	ocuo.mutation.SetName(s)
	return ocuo
}

// SetFamily sets the family field.
func (ocuo *OSContextUpdateOne) SetFamily(s string) *OSContextUpdateOne {
	ocuo.mutation.SetFamily(s)
	return ocuo
}

// SetPlatform sets the platform field.
func (ocuo *OSContextUpdateOne) SetPlatform(s string) *OSContextUpdateOne {
	ocuo.mutation.SetPlatform(s)
	return ocuo
}

// SetNillablePlatform sets the platform field if the given value is not nil.
func (ocuo *OSContextUpdateOne) SetNillablePlatform(s *string) *OSContextUpdateOne {
	if s != nil {
		ocuo.SetPlatform(*s)
	}
	return ocuo
}

// ClearPlatform clears the value of platform.
func (ocuo *OSContextUpdateOne) ClearPlatform() *OSContextUpdateOne {
	ocuo.mutation.ClearPlatform()
	return ocuo
}

// SetVersion sets the version field.
func (ocuo *OSContextUpdateOne) SetVersion(s string) *OSContextUpdateOne {
	ocuo.mutation.SetVersion(s)
	return ocuo
}

// AddEventIDs adds the events edge to Event by ids.
func (ocuo *OSContextUpdateOne) AddEventIDs(ids ...uuid.UUID) *OSContextUpdateOne {
	ocuo.mutation.AddEventIDs(ids...)
	return ocuo
}

// AddEvents adds the events edges to Event.
func (ocuo *OSContextUpdateOne) AddEvents(e ...*Event) *OSContextUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ocuo.AddEventIDs(ids...)
}

// Mutation returns the OSContextMutation object of the builder.
func (ocuo *OSContextUpdateOne) Mutation() *OSContextMutation {
	return ocuo.mutation
}

// RemoveEventIDs removes the events edge to Event by ids.
func (ocuo *OSContextUpdateOne) RemoveEventIDs(ids ...uuid.UUID) *OSContextUpdateOne {
	ocuo.mutation.RemoveEventIDs(ids...)
	return ocuo
}

// RemoveEvents removes events edges to Event.
func (ocuo *OSContextUpdateOne) RemoveEvents(e ...*Event) *OSContextUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ocuo.RemoveEventIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (ocuo *OSContextUpdateOne) Save(ctx context.Context) (*OSContext, error) {

	var (
		err  error
		node *OSContext
	)
	if len(ocuo.hooks) == 0 {
		node, err = ocuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OSContextMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ocuo.mutation = mutation
			node, err = ocuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ocuo.hooks) - 1; i >= 0; i-- {
			mut = ocuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ocuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ocuo *OSContextUpdateOne) SaveX(ctx context.Context) *OSContext {
	oc, err := ocuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return oc
}

// Exec executes the query on the entity.
func (ocuo *OSContextUpdateOne) Exec(ctx context.Context) error {
	_, err := ocuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocuo *OSContextUpdateOne) ExecX(ctx context.Context) {
	if err := ocuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ocuo *OSContextUpdateOne) sqlSave(ctx context.Context) (oc *OSContext, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   oscontext.Table,
			Columns: oscontext.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: oscontext.FieldID,
			},
		},
	}
	id, ok := ocuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing OSContext.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := ocuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oscontext.FieldName,
		})
	}
	if value, ok := ocuo.mutation.Family(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oscontext.FieldFamily,
		})
	}
	if value, ok := ocuo.mutation.Platform(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oscontext.FieldPlatform,
		})
	}
	if ocuo.mutation.PlatformCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: oscontext.FieldPlatform,
		})
	}
	if value, ok := ocuo.mutation.Version(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oscontext.FieldVersion,
		})
	}
	if nodes := ocuo.mutation.RemovedEventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   oscontext.EventsTable,
			Columns: []string{oscontext.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ocuo.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   oscontext.EventsTable,
			Columns: []string{oscontext.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	oc = &OSContext{config: ocuo.config}
	_spec.Assign = oc.assignValues
	_spec.ScanValues = oc.scanValues()
	if err = sqlgraph.UpdateNode(ctx, ocuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oscontext.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return oc, nil
}
