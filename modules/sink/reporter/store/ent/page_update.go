// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/blushft/strana/modules/sink/reporter/store/ent/event"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/page"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/predicate"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/google/uuid"
)

// PageUpdate is the builder for updating Page entities.
type PageUpdate struct {
	config
	hooks      []Hook
	mutation   *PageMutation
	predicates []predicate.Page
}

// Where adds a new predicate for the builder.
func (pu *PageUpdate) Where(ps ...predicate.Page) *PageUpdate {
	pu.predicates = append(pu.predicates, ps...)
	return pu
}

// SetHostname sets the hostname field.
func (pu *PageUpdate) SetHostname(s string) *PageUpdate {
	pu.mutation.SetHostname(s)
	return pu
}

// SetPath sets the path field.
func (pu *PageUpdate) SetPath(s string) *PageUpdate {
	pu.mutation.SetPath(s)
	return pu
}

// SetReferrer sets the referrer field.
func (pu *PageUpdate) SetReferrer(s string) *PageUpdate {
	pu.mutation.SetReferrer(s)
	return pu
}

// SetNillableReferrer sets the referrer field if the given value is not nil.
func (pu *PageUpdate) SetNillableReferrer(s *string) *PageUpdate {
	if s != nil {
		pu.SetReferrer(*s)
	}
	return pu
}

// ClearReferrer clears the value of referrer.
func (pu *PageUpdate) ClearReferrer() *PageUpdate {
	pu.mutation.ClearReferrer()
	return pu
}

// SetSearch sets the search field.
func (pu *PageUpdate) SetSearch(s string) *PageUpdate {
	pu.mutation.SetSearch(s)
	return pu
}

// SetNillableSearch sets the search field if the given value is not nil.
func (pu *PageUpdate) SetNillableSearch(s *string) *PageUpdate {
	if s != nil {
		pu.SetSearch(*s)
	}
	return pu
}

// ClearSearch clears the value of search.
func (pu *PageUpdate) ClearSearch() *PageUpdate {
	pu.mutation.ClearSearch()
	return pu
}

// SetTitle sets the title field.
func (pu *PageUpdate) SetTitle(s string) *PageUpdate {
	pu.mutation.SetTitle(s)
	return pu
}

// SetNillableTitle sets the title field if the given value is not nil.
func (pu *PageUpdate) SetNillableTitle(s *string) *PageUpdate {
	if s != nil {
		pu.SetTitle(*s)
	}
	return pu
}

// ClearTitle clears the value of title.
func (pu *PageUpdate) ClearTitle() *PageUpdate {
	pu.mutation.ClearTitle()
	return pu
}

// SetHash sets the hash field.
func (pu *PageUpdate) SetHash(s string) *PageUpdate {
	pu.mutation.SetHash(s)
	return pu
}

// SetNillableHash sets the hash field if the given value is not nil.
func (pu *PageUpdate) SetNillableHash(s *string) *PageUpdate {
	if s != nil {
		pu.SetHash(*s)
	}
	return pu
}

// ClearHash clears the value of hash.
func (pu *PageUpdate) ClearHash() *PageUpdate {
	pu.mutation.ClearHash()
	return pu
}

// AddEventIDs adds the events edge to Event by ids.
func (pu *PageUpdate) AddEventIDs(ids ...uuid.UUID) *PageUpdate {
	pu.mutation.AddEventIDs(ids...)
	return pu
}

// AddEvents adds the events edges to Event.
func (pu *PageUpdate) AddEvents(e ...*Event) *PageUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return pu.AddEventIDs(ids...)
}

// Mutation returns the PageMutation object of the builder.
func (pu *PageUpdate) Mutation() *PageMutation {
	return pu.mutation
}

// RemoveEventIDs removes the events edge to Event by ids.
func (pu *PageUpdate) RemoveEventIDs(ids ...uuid.UUID) *PageUpdate {
	pu.mutation.RemoveEventIDs(ids...)
	return pu
}

// RemoveEvents removes events edges to Event.
func (pu *PageUpdate) RemoveEvents(e ...*Event) *PageUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return pu.RemoveEventIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (pu *PageUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PageUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PageUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PageUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   page.Table,
			Columns: page.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: page.FieldID,
			},
		},
	}
	if ps := pu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Hostname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: page.FieldHostname,
		})
	}
	if value, ok := pu.mutation.Path(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: page.FieldPath,
		})
	}
	if value, ok := pu.mutation.Referrer(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: page.FieldReferrer,
		})
	}
	if pu.mutation.ReferrerCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: page.FieldReferrer,
		})
	}
	if value, ok := pu.mutation.Search(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: page.FieldSearch,
		})
	}
	if pu.mutation.SearchCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: page.FieldSearch,
		})
	}
	if value, ok := pu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: page.FieldTitle,
		})
	}
	if pu.mutation.TitleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: page.FieldTitle,
		})
	}
	if value, ok := pu.mutation.Hash(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: page.FieldHash,
		})
	}
	if pu.mutation.HashCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: page.FieldHash,
		})
	}
	if nodes := pu.mutation.RemovedEventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   page.EventsTable,
			Columns: []string{page.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   page.EventsTable,
			Columns: []string{page.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{page.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PageUpdateOne is the builder for updating a single Page entity.
type PageUpdateOne struct {
	config
	hooks    []Hook
	mutation *PageMutation
}

// SetHostname sets the hostname field.
func (puo *PageUpdateOne) SetHostname(s string) *PageUpdateOne {
	puo.mutation.SetHostname(s)
	return puo
}

// SetPath sets the path field.
func (puo *PageUpdateOne) SetPath(s string) *PageUpdateOne {
	puo.mutation.SetPath(s)
	return puo
}

// SetReferrer sets the referrer field.
func (puo *PageUpdateOne) SetReferrer(s string) *PageUpdateOne {
	puo.mutation.SetReferrer(s)
	return puo
}

// SetNillableReferrer sets the referrer field if the given value is not nil.
func (puo *PageUpdateOne) SetNillableReferrer(s *string) *PageUpdateOne {
	if s != nil {
		puo.SetReferrer(*s)
	}
	return puo
}

// ClearReferrer clears the value of referrer.
func (puo *PageUpdateOne) ClearReferrer() *PageUpdateOne {
	puo.mutation.ClearReferrer()
	return puo
}

// SetSearch sets the search field.
func (puo *PageUpdateOne) SetSearch(s string) *PageUpdateOne {
	puo.mutation.SetSearch(s)
	return puo
}

// SetNillableSearch sets the search field if the given value is not nil.
func (puo *PageUpdateOne) SetNillableSearch(s *string) *PageUpdateOne {
	if s != nil {
		puo.SetSearch(*s)
	}
	return puo
}

// ClearSearch clears the value of search.
func (puo *PageUpdateOne) ClearSearch() *PageUpdateOne {
	puo.mutation.ClearSearch()
	return puo
}

// SetTitle sets the title field.
func (puo *PageUpdateOne) SetTitle(s string) *PageUpdateOne {
	puo.mutation.SetTitle(s)
	return puo
}

// SetNillableTitle sets the title field if the given value is not nil.
func (puo *PageUpdateOne) SetNillableTitle(s *string) *PageUpdateOne {
	if s != nil {
		puo.SetTitle(*s)
	}
	return puo
}

// ClearTitle clears the value of title.
func (puo *PageUpdateOne) ClearTitle() *PageUpdateOne {
	puo.mutation.ClearTitle()
	return puo
}

// SetHash sets the hash field.
func (puo *PageUpdateOne) SetHash(s string) *PageUpdateOne {
	puo.mutation.SetHash(s)
	return puo
}

// SetNillableHash sets the hash field if the given value is not nil.
func (puo *PageUpdateOne) SetNillableHash(s *string) *PageUpdateOne {
	if s != nil {
		puo.SetHash(*s)
	}
	return puo
}

// ClearHash clears the value of hash.
func (puo *PageUpdateOne) ClearHash() *PageUpdateOne {
	puo.mutation.ClearHash()
	return puo
}

// AddEventIDs adds the events edge to Event by ids.
func (puo *PageUpdateOne) AddEventIDs(ids ...uuid.UUID) *PageUpdateOne {
	puo.mutation.AddEventIDs(ids...)
	return puo
}

// AddEvents adds the events edges to Event.
func (puo *PageUpdateOne) AddEvents(e ...*Event) *PageUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return puo.AddEventIDs(ids...)
}

// Mutation returns the PageMutation object of the builder.
func (puo *PageUpdateOne) Mutation() *PageMutation {
	return puo.mutation
}

// RemoveEventIDs removes the events edge to Event by ids.
func (puo *PageUpdateOne) RemoveEventIDs(ids ...uuid.UUID) *PageUpdateOne {
	puo.mutation.RemoveEventIDs(ids...)
	return puo
}

// RemoveEvents removes events edges to Event.
func (puo *PageUpdateOne) RemoveEvents(e ...*Event) *PageUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return puo.RemoveEventIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (puo *PageUpdateOne) Save(ctx context.Context) (*Page, error) {

	var (
		err  error
		node *Page
	)
	if len(puo.hooks) == 0 {
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PageUpdateOne) SaveX(ctx context.Context) *Page {
	pa, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return pa
}

// Exec executes the query on the entity.
func (puo *PageUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PageUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PageUpdateOne) sqlSave(ctx context.Context) (pa *Page, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   page.Table,
			Columns: page.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: page.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Page.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := puo.mutation.Hostname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: page.FieldHostname,
		})
	}
	if value, ok := puo.mutation.Path(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: page.FieldPath,
		})
	}
	if value, ok := puo.mutation.Referrer(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: page.FieldReferrer,
		})
	}
	if puo.mutation.ReferrerCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: page.FieldReferrer,
		})
	}
	if value, ok := puo.mutation.Search(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: page.FieldSearch,
		})
	}
	if puo.mutation.SearchCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: page.FieldSearch,
		})
	}
	if value, ok := puo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: page.FieldTitle,
		})
	}
	if puo.mutation.TitleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: page.FieldTitle,
		})
	}
	if value, ok := puo.mutation.Hash(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: page.FieldHash,
		})
	}
	if puo.mutation.HashCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: page.FieldHash,
		})
	}
	if nodes := puo.mutation.RemovedEventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   page.EventsTable,
			Columns: []string{page.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   page.EventsTable,
			Columns: []string{page.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	pa = &Page{config: puo.config}
	_spec.Assign = pa.assignValues
	_spec.ScanValues = pa.scanValues()
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{page.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return pa, nil
}
