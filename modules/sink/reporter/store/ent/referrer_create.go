// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/blushft/strana/modules/sink/reporter/store/ent/event"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/referrer"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/google/uuid"
)

// ReferrerCreate is the builder for creating a Referrer entity.
type ReferrerCreate struct {
	config
	mutation *ReferrerMutation
	hooks    []Hook
}

// SetName sets the name field.
func (rc *ReferrerCreate) SetName(s string) *ReferrerCreate {
	rc.mutation.SetName(s)
	return rc
}

// SetType sets the type field.
func (rc *ReferrerCreate) SetType(s string) *ReferrerCreate {
	rc.mutation.SetType(s)
	return rc
}

// SetNillableType sets the type field if the given value is not nil.
func (rc *ReferrerCreate) SetNillableType(s *string) *ReferrerCreate {
	if s != nil {
		rc.SetType(*s)
	}
	return rc
}

// SetHostname sets the hostname field.
func (rc *ReferrerCreate) SetHostname(s string) *ReferrerCreate {
	rc.mutation.SetHostname(s)
	return rc
}

// SetNillableHostname sets the hostname field if the given value is not nil.
func (rc *ReferrerCreate) SetNillableHostname(s *string) *ReferrerCreate {
	if s != nil {
		rc.SetHostname(*s)
	}
	return rc
}

// SetLink sets the link field.
func (rc *ReferrerCreate) SetLink(s string) *ReferrerCreate {
	rc.mutation.SetLink(s)
	return rc
}

// SetNillableLink sets the link field if the given value is not nil.
func (rc *ReferrerCreate) SetNillableLink(s *string) *ReferrerCreate {
	if s != nil {
		rc.SetLink(*s)
	}
	return rc
}

// AddEventIDs adds the events edge to Event by ids.
func (rc *ReferrerCreate) AddEventIDs(ids ...uuid.UUID) *ReferrerCreate {
	rc.mutation.AddEventIDs(ids...)
	return rc
}

// AddEvents adds the events edges to Event.
func (rc *ReferrerCreate) AddEvents(e ...*Event) *ReferrerCreate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return rc.AddEventIDs(ids...)
}

// Mutation returns the ReferrerMutation object of the builder.
func (rc *ReferrerCreate) Mutation() *ReferrerMutation {
	return rc.mutation
}

// Save creates the Referrer in the database.
func (rc *ReferrerCreate) Save(ctx context.Context) (*Referrer, error) {
	if err := rc.preSave(); err != nil {
		return nil, err
	}
	var (
		err  error
		node *Referrer
	)
	if len(rc.hooks) == 0 {
		node, err = rc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReferrerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rc.mutation = mutation
			node, err = rc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rc.hooks) - 1; i >= 0; i-- {
			mut = rc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rc *ReferrerCreate) SaveX(ctx context.Context) *Referrer {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (rc *ReferrerCreate) preSave() error {
	if _, ok := rc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	return nil
}

func (rc *ReferrerCreate) sqlSave(ctx context.Context) (*Referrer, error) {
	r, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	r.ID = int(id)
	return r, nil
}

func (rc *ReferrerCreate) createSpec() (*Referrer, *sqlgraph.CreateSpec) {
	var (
		r     = &Referrer{config: rc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: referrer.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: referrer.FieldID,
			},
		}
	)
	if value, ok := rc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: referrer.FieldName,
		})
		r.Name = value
	}
	if value, ok := rc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: referrer.FieldType,
		})
		r.Type = value
	}
	if value, ok := rc.mutation.Hostname(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: referrer.FieldHostname,
		})
		r.Hostname = value
	}
	if value, ok := rc.mutation.Link(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: referrer.FieldLink,
		})
		r.Link = value
	}
	if nodes := rc.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   referrer.EventsTable,
			Columns: []string{referrer.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return r, _spec
}

// ReferrerCreateBulk is the builder for creating a bulk of Referrer entities.
type ReferrerCreateBulk struct {
	config
	builders []*ReferrerCreate
}

// Save creates the Referrer entities in the database.
func (rcb *ReferrerCreateBulk) Save(ctx context.Context) ([]*Referrer, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Referrer, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				if err := builder.preSave(); err != nil {
					return nil, err
				}
				mutation, ok := m.(*ReferrerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (rcb *ReferrerCreateBulk) SaveX(ctx context.Context) []*Referrer {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
