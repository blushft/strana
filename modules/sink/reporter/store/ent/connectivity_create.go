// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/blushft/strana/modules/sink/reporter/store/ent/connectivity"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/event"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/google/uuid"
)

// ConnectivityCreate is the builder for creating a Connectivity entity.
type ConnectivityCreate struct {
	config
	mutation *ConnectivityMutation
	hooks    []Hook
}

// SetBluetooth sets the bluetooth field.
func (cc *ConnectivityCreate) SetBluetooth(b bool) *ConnectivityCreate {
	cc.mutation.SetBluetooth(b)
	return cc
}

// SetCellular sets the cellular field.
func (cc *ConnectivityCreate) SetCellular(b bool) *ConnectivityCreate {
	cc.mutation.SetCellular(b)
	return cc
}

// SetWifi sets the wifi field.
func (cc *ConnectivityCreate) SetWifi(b bool) *ConnectivityCreate {
	cc.mutation.SetWifi(b)
	return cc
}

// SetEthernet sets the ethernet field.
func (cc *ConnectivityCreate) SetEthernet(b bool) *ConnectivityCreate {
	cc.mutation.SetEthernet(b)
	return cc
}

// SetCarrier sets the carrier field.
func (cc *ConnectivityCreate) SetCarrier(b bool) *ConnectivityCreate {
	cc.mutation.SetCarrier(b)
	return cc
}

// SetIsp sets the isp field.
func (cc *ConnectivityCreate) SetIsp(b bool) *ConnectivityCreate {
	cc.mutation.SetIsp(b)
	return cc
}

// SetEventID sets the event edge to Event by id.
func (cc *ConnectivityCreate) SetEventID(id uuid.UUID) *ConnectivityCreate {
	cc.mutation.SetEventID(id)
	return cc
}

// SetNillableEventID sets the event edge to Event by id if the given value is not nil.
func (cc *ConnectivityCreate) SetNillableEventID(id *uuid.UUID) *ConnectivityCreate {
	if id != nil {
		cc = cc.SetEventID(*id)
	}
	return cc
}

// SetEvent sets the event edge to Event.
func (cc *ConnectivityCreate) SetEvent(e *Event) *ConnectivityCreate {
	return cc.SetEventID(e.ID)
}

// Mutation returns the ConnectivityMutation object of the builder.
func (cc *ConnectivityCreate) Mutation() *ConnectivityMutation {
	return cc.mutation
}

// Save creates the Connectivity in the database.
func (cc *ConnectivityCreate) Save(ctx context.Context) (*Connectivity, error) {
	if err := cc.preSave(); err != nil {
		return nil, err
	}
	var (
		err  error
		node *Connectivity
	)
	if len(cc.hooks) == 0 {
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ConnectivityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cc.mutation = mutation
			node, err = cc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			mut = cc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ConnectivityCreate) SaveX(ctx context.Context) *Connectivity {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (cc *ConnectivityCreate) preSave() error {
	if _, ok := cc.mutation.Bluetooth(); !ok {
		return &ValidationError{Name: "bluetooth", err: errors.New("ent: missing required field \"bluetooth\"")}
	}
	if _, ok := cc.mutation.Cellular(); !ok {
		return &ValidationError{Name: "cellular", err: errors.New("ent: missing required field \"cellular\"")}
	}
	if _, ok := cc.mutation.Wifi(); !ok {
		return &ValidationError{Name: "wifi", err: errors.New("ent: missing required field \"wifi\"")}
	}
	if _, ok := cc.mutation.Ethernet(); !ok {
		return &ValidationError{Name: "ethernet", err: errors.New("ent: missing required field \"ethernet\"")}
	}
	if _, ok := cc.mutation.Carrier(); !ok {
		return &ValidationError{Name: "carrier", err: errors.New("ent: missing required field \"carrier\"")}
	}
	if _, ok := cc.mutation.Isp(); !ok {
		return &ValidationError{Name: "isp", err: errors.New("ent: missing required field \"isp\"")}
	}
	return nil
}

func (cc *ConnectivityCreate) sqlSave(ctx context.Context) (*Connectivity, error) {
	c, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	c.ID = int(id)
	return c, nil
}

func (cc *ConnectivityCreate) createSpec() (*Connectivity, *sqlgraph.CreateSpec) {
	var (
		c     = &Connectivity{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: connectivity.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: connectivity.FieldID,
			},
		}
	)
	if value, ok := cc.mutation.Bluetooth(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: connectivity.FieldBluetooth,
		})
		c.Bluetooth = value
	}
	if value, ok := cc.mutation.Cellular(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: connectivity.FieldCellular,
		})
		c.Cellular = value
	}
	if value, ok := cc.mutation.Wifi(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: connectivity.FieldWifi,
		})
		c.Wifi = value
	}
	if value, ok := cc.mutation.Ethernet(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: connectivity.FieldEthernet,
		})
		c.Ethernet = value
	}
	if value, ok := cc.mutation.Carrier(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: connectivity.FieldCarrier,
		})
		c.Carrier = value
	}
	if value, ok := cc.mutation.Isp(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: connectivity.FieldIsp,
		})
		c.Isp = value
	}
	if nodes := cc.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   connectivity.EventTable,
			Columns: []string{connectivity.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return c, _spec
}

// ConnectivityCreateBulk is the builder for creating a bulk of Connectivity entities.
type ConnectivityCreateBulk struct {
	config
	builders []*ConnectivityCreate
}

// Save creates the Connectivity entities in the database.
func (ccb *ConnectivityCreateBulk) Save(ctx context.Context) ([]*Connectivity, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Connectivity, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				if err := builder.preSave(); err != nil {
					return nil, err
				}
				mutation, ok := m.(*ConnectivityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (ccb *ConnectivityCreateBulk) SaveX(ctx context.Context) []*Connectivity {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
