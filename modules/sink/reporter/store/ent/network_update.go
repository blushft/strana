// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/blushft/strana/modules/sink/reporter/store/ent/event"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/network"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/predicate"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/google/uuid"
)

// NetworkUpdate is the builder for updating Network entities.
type NetworkUpdate struct {
	config
	hooks      []Hook
	mutation   *NetworkMutation
	predicates []predicate.Network
}

// Where adds a new predicate for the builder.
func (nu *NetworkUpdate) Where(ps ...predicate.Network) *NetworkUpdate {
	nu.predicates = append(nu.predicates, ps...)
	return nu
}

// SetIP sets the ip field.
func (nu *NetworkUpdate) SetIP(s string) *NetworkUpdate {
	nu.mutation.SetIP(s)
	return nu
}

// SetUseragent sets the useragent field.
func (nu *NetworkUpdate) SetUseragent(s string) *NetworkUpdate {
	nu.mutation.SetUseragent(s)
	return nu
}

// SetNillableUseragent sets the useragent field if the given value is not nil.
func (nu *NetworkUpdate) SetNillableUseragent(s *string) *NetworkUpdate {
	if s != nil {
		nu.SetUseragent(*s)
	}
	return nu
}

// ClearUseragent clears the value of useragent.
func (nu *NetworkUpdate) ClearUseragent() *NetworkUpdate {
	nu.mutation.ClearUseragent()
	return nu
}

// AddEventIDs adds the events edge to Event by ids.
func (nu *NetworkUpdate) AddEventIDs(ids ...uuid.UUID) *NetworkUpdate {
	nu.mutation.AddEventIDs(ids...)
	return nu
}

// AddEvents adds the events edges to Event.
func (nu *NetworkUpdate) AddEvents(e ...*Event) *NetworkUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return nu.AddEventIDs(ids...)
}

// Mutation returns the NetworkMutation object of the builder.
func (nu *NetworkUpdate) Mutation() *NetworkMutation {
	return nu.mutation
}

// RemoveEventIDs removes the events edge to Event by ids.
func (nu *NetworkUpdate) RemoveEventIDs(ids ...uuid.UUID) *NetworkUpdate {
	nu.mutation.RemoveEventIDs(ids...)
	return nu
}

// RemoveEvents removes events edges to Event.
func (nu *NetworkUpdate) RemoveEvents(e ...*Event) *NetworkUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return nu.RemoveEventIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (nu *NetworkUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(nu.hooks) == 0 {
		affected, err = nu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NetworkMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			nu.mutation = mutation
			affected, err = nu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(nu.hooks) - 1; i >= 0; i-- {
			mut = nu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, nu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (nu *NetworkUpdate) SaveX(ctx context.Context) int {
	affected, err := nu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nu *NetworkUpdate) Exec(ctx context.Context) error {
	_, err := nu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nu *NetworkUpdate) ExecX(ctx context.Context) {
	if err := nu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (nu *NetworkUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   network.Table,
			Columns: network.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: network.FieldID,
			},
		},
	}
	if ps := nu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nu.mutation.IP(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: network.FieldIP,
		})
	}
	if value, ok := nu.mutation.Useragent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: network.FieldUseragent,
		})
	}
	if nu.mutation.UseragentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: network.FieldUseragent,
		})
	}
	if nodes := nu.mutation.RemovedEventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   network.EventsTable,
			Columns: []string{network.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   network.EventsTable,
			Columns: []string{network.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{network.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// NetworkUpdateOne is the builder for updating a single Network entity.
type NetworkUpdateOne struct {
	config
	hooks    []Hook
	mutation *NetworkMutation
}

// SetIP sets the ip field.
func (nuo *NetworkUpdateOne) SetIP(s string) *NetworkUpdateOne {
	nuo.mutation.SetIP(s)
	return nuo
}

// SetUseragent sets the useragent field.
func (nuo *NetworkUpdateOne) SetUseragent(s string) *NetworkUpdateOne {
	nuo.mutation.SetUseragent(s)
	return nuo
}

// SetNillableUseragent sets the useragent field if the given value is not nil.
func (nuo *NetworkUpdateOne) SetNillableUseragent(s *string) *NetworkUpdateOne {
	if s != nil {
		nuo.SetUseragent(*s)
	}
	return nuo
}

// ClearUseragent clears the value of useragent.
func (nuo *NetworkUpdateOne) ClearUseragent() *NetworkUpdateOne {
	nuo.mutation.ClearUseragent()
	return nuo
}

// AddEventIDs adds the events edge to Event by ids.
func (nuo *NetworkUpdateOne) AddEventIDs(ids ...uuid.UUID) *NetworkUpdateOne {
	nuo.mutation.AddEventIDs(ids...)
	return nuo
}

// AddEvents adds the events edges to Event.
func (nuo *NetworkUpdateOne) AddEvents(e ...*Event) *NetworkUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return nuo.AddEventIDs(ids...)
}

// Mutation returns the NetworkMutation object of the builder.
func (nuo *NetworkUpdateOne) Mutation() *NetworkMutation {
	return nuo.mutation
}

// RemoveEventIDs removes the events edge to Event by ids.
func (nuo *NetworkUpdateOne) RemoveEventIDs(ids ...uuid.UUID) *NetworkUpdateOne {
	nuo.mutation.RemoveEventIDs(ids...)
	return nuo
}

// RemoveEvents removes events edges to Event.
func (nuo *NetworkUpdateOne) RemoveEvents(e ...*Event) *NetworkUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return nuo.RemoveEventIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (nuo *NetworkUpdateOne) Save(ctx context.Context) (*Network, error) {

	var (
		err  error
		node *Network
	)
	if len(nuo.hooks) == 0 {
		node, err = nuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NetworkMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			nuo.mutation = mutation
			node, err = nuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(nuo.hooks) - 1; i >= 0; i-- {
			mut = nuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, nuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (nuo *NetworkUpdateOne) SaveX(ctx context.Context) *Network {
	n, err := nuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

// Exec executes the query on the entity.
func (nuo *NetworkUpdateOne) Exec(ctx context.Context) error {
	_, err := nuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nuo *NetworkUpdateOne) ExecX(ctx context.Context) {
	if err := nuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (nuo *NetworkUpdateOne) sqlSave(ctx context.Context) (n *Network, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   network.Table,
			Columns: network.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: network.FieldID,
			},
		},
	}
	id, ok := nuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Network.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := nuo.mutation.IP(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: network.FieldIP,
		})
	}
	if value, ok := nuo.mutation.Useragent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: network.FieldUseragent,
		})
	}
	if nuo.mutation.UseragentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: network.FieldUseragent,
		})
	}
	if nodes := nuo.mutation.RemovedEventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   network.EventsTable,
			Columns: []string{network.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   network.EventsTable,
			Columns: []string{network.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	n = &Network{config: nuo.config}
	_spec.Assign = n.assignValues
	_spec.ScanValues = n.scanValues()
	if err = sqlgraph.UpdateNode(ctx, nuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{network.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return n, nil
}
