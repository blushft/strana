// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/blushft/strana/modules/sink/reporter/store/ent/event"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/predicate"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/viewport"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/google/uuid"
)

// ViewportUpdate is the builder for updating Viewport entities.
type ViewportUpdate struct {
	config
	hooks      []Hook
	mutation   *ViewportMutation
	predicates []predicate.Viewport
}

// Where adds a new predicate for the builder.
func (vu *ViewportUpdate) Where(ps ...predicate.Viewport) *ViewportUpdate {
	vu.predicates = append(vu.predicates, ps...)
	return vu
}

// SetDensity sets the density field.
func (vu *ViewportUpdate) SetDensity(i int) *ViewportUpdate {
	vu.mutation.ResetDensity()
	vu.mutation.SetDensity(i)
	return vu
}

// AddDensity adds i to density.
func (vu *ViewportUpdate) AddDensity(i int) *ViewportUpdate {
	vu.mutation.AddDensity(i)
	return vu
}

// SetWidth sets the width field.
func (vu *ViewportUpdate) SetWidth(i int) *ViewportUpdate {
	vu.mutation.ResetWidth()
	vu.mutation.SetWidth(i)
	return vu
}

// AddWidth adds i to width.
func (vu *ViewportUpdate) AddWidth(i int) *ViewportUpdate {
	vu.mutation.AddWidth(i)
	return vu
}

// SetHeight sets the height field.
func (vu *ViewportUpdate) SetHeight(i int) *ViewportUpdate {
	vu.mutation.ResetHeight()
	vu.mutation.SetHeight(i)
	return vu
}

// AddHeight adds i to height.
func (vu *ViewportUpdate) AddHeight(i int) *ViewportUpdate {
	vu.mutation.AddHeight(i)
	return vu
}

// AddEventIDs adds the events edge to Event by ids.
func (vu *ViewportUpdate) AddEventIDs(ids ...uuid.UUID) *ViewportUpdate {
	vu.mutation.AddEventIDs(ids...)
	return vu
}

// AddEvents adds the events edges to Event.
func (vu *ViewportUpdate) AddEvents(e ...*Event) *ViewportUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return vu.AddEventIDs(ids...)
}

// Mutation returns the ViewportMutation object of the builder.
func (vu *ViewportUpdate) Mutation() *ViewportMutation {
	return vu.mutation
}

// RemoveEventIDs removes the events edge to Event by ids.
func (vu *ViewportUpdate) RemoveEventIDs(ids ...uuid.UUID) *ViewportUpdate {
	vu.mutation.RemoveEventIDs(ids...)
	return vu
}

// RemoveEvents removes events edges to Event.
func (vu *ViewportUpdate) RemoveEvents(e ...*Event) *ViewportUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return vu.RemoveEventIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (vu *ViewportUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(vu.hooks) == 0 {
		affected, err = vu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ViewportMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			vu.mutation = mutation
			affected, err = vu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(vu.hooks) - 1; i >= 0; i-- {
			mut = vu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (vu *ViewportUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *ViewportUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *ViewportUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vu *ViewportUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   viewport.Table,
			Columns: viewport.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: viewport.FieldID,
			},
		},
	}
	if ps := vu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vu.mutation.Density(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: viewport.FieldDensity,
		})
	}
	if value, ok := vu.mutation.AddedDensity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: viewport.FieldDensity,
		})
	}
	if value, ok := vu.mutation.Width(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: viewport.FieldWidth,
		})
	}
	if value, ok := vu.mutation.AddedWidth(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: viewport.FieldWidth,
		})
	}
	if value, ok := vu.mutation.Height(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: viewport.FieldHeight,
		})
	}
	if value, ok := vu.mutation.AddedHeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: viewport.FieldHeight,
		})
	}
	if nodes := vu.mutation.RemovedEventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   viewport.EventsTable,
			Columns: []string{viewport.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   viewport.EventsTable,
			Columns: []string{viewport.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{viewport.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ViewportUpdateOne is the builder for updating a single Viewport entity.
type ViewportUpdateOne struct {
	config
	hooks    []Hook
	mutation *ViewportMutation
}

// SetDensity sets the density field.
func (vuo *ViewportUpdateOne) SetDensity(i int) *ViewportUpdateOne {
	vuo.mutation.ResetDensity()
	vuo.mutation.SetDensity(i)
	return vuo
}

// AddDensity adds i to density.
func (vuo *ViewportUpdateOne) AddDensity(i int) *ViewportUpdateOne {
	vuo.mutation.AddDensity(i)
	return vuo
}

// SetWidth sets the width field.
func (vuo *ViewportUpdateOne) SetWidth(i int) *ViewportUpdateOne {
	vuo.mutation.ResetWidth()
	vuo.mutation.SetWidth(i)
	return vuo
}

// AddWidth adds i to width.
func (vuo *ViewportUpdateOne) AddWidth(i int) *ViewportUpdateOne {
	vuo.mutation.AddWidth(i)
	return vuo
}

// SetHeight sets the height field.
func (vuo *ViewportUpdateOne) SetHeight(i int) *ViewportUpdateOne {
	vuo.mutation.ResetHeight()
	vuo.mutation.SetHeight(i)
	return vuo
}

// AddHeight adds i to height.
func (vuo *ViewportUpdateOne) AddHeight(i int) *ViewportUpdateOne {
	vuo.mutation.AddHeight(i)
	return vuo
}

// AddEventIDs adds the events edge to Event by ids.
func (vuo *ViewportUpdateOne) AddEventIDs(ids ...uuid.UUID) *ViewportUpdateOne {
	vuo.mutation.AddEventIDs(ids...)
	return vuo
}

// AddEvents adds the events edges to Event.
func (vuo *ViewportUpdateOne) AddEvents(e ...*Event) *ViewportUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return vuo.AddEventIDs(ids...)
}

// Mutation returns the ViewportMutation object of the builder.
func (vuo *ViewportUpdateOne) Mutation() *ViewportMutation {
	return vuo.mutation
}

// RemoveEventIDs removes the events edge to Event by ids.
func (vuo *ViewportUpdateOne) RemoveEventIDs(ids ...uuid.UUID) *ViewportUpdateOne {
	vuo.mutation.RemoveEventIDs(ids...)
	return vuo
}

// RemoveEvents removes events edges to Event.
func (vuo *ViewportUpdateOne) RemoveEvents(e ...*Event) *ViewportUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return vuo.RemoveEventIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (vuo *ViewportUpdateOne) Save(ctx context.Context) (*Viewport, error) {

	var (
		err  error
		node *Viewport
	)
	if len(vuo.hooks) == 0 {
		node, err = vuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ViewportMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			vuo.mutation = mutation
			node, err = vuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(vuo.hooks) - 1; i >= 0; i-- {
			mut = vuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *ViewportUpdateOne) SaveX(ctx context.Context) *Viewport {
	v, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query on the entity.
func (vuo *ViewportUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *ViewportUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vuo *ViewportUpdateOne) sqlSave(ctx context.Context) (v *Viewport, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   viewport.Table,
			Columns: viewport.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: viewport.FieldID,
			},
		},
	}
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Viewport.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := vuo.mutation.Density(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: viewport.FieldDensity,
		})
	}
	if value, ok := vuo.mutation.AddedDensity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: viewport.FieldDensity,
		})
	}
	if value, ok := vuo.mutation.Width(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: viewport.FieldWidth,
		})
	}
	if value, ok := vuo.mutation.AddedWidth(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: viewport.FieldWidth,
		})
	}
	if value, ok := vuo.mutation.Height(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: viewport.FieldHeight,
		})
	}
	if value, ok := vuo.mutation.AddedHeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: viewport.FieldHeight,
		})
	}
	if nodes := vuo.mutation.RemovedEventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   viewport.EventsTable,
			Columns: []string{viewport.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   viewport.EventsTable,
			Columns: []string{viewport.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	v = &Viewport{config: vuo.config}
	_spec.Assign = v.assignValues
	_spec.ScanValues = v.scanValues()
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{viewport.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return v, nil
}
