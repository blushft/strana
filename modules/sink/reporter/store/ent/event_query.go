// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"github.com/blushft/strana/modules/sink/reporter/store/ent/action"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/alias"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/app"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/browser"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/campaign"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/connectivity"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/device"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/event"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/extra"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/group"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/library"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/location"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/network"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/oscontext"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/page"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/predicate"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/referrer"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/screen"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/session"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/timing"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/user"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/viewport"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/google/uuid"
)

// EventQuery is the builder for querying Event entities.
type EventQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	unique     []string
	predicates []predicate.Event
	// eager-loading edges.
	withAction       *ActionQuery
	withAlias        *AliasQuery
	withApp          *AppQuery
	withBrowser      *BrowserQuery
	withCampaign     *CampaignQuery
	withConnectivity *ConnectivityQuery
	withDevice       *DeviceQuery
	withExtra        *ExtraQuery
	withGroup        *GroupQuery
	withLibrary      *LibraryQuery
	withLocation     *LocationQuery
	withNetwork      *NetworkQuery
	withOs           *OSContextQuery
	withPage         *PageQuery
	withReferrer     *ReferrerQuery
	withScreen       *ScreenQuery
	withSession      *SessionQuery
	withTiming       *TimingQuery
	withViewport     *ViewportQuery
	withUser         *UserQuery
	withFKs          bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the builder.
func (eq *EventQuery) Where(ps ...predicate.Event) *EventQuery {
	eq.predicates = append(eq.predicates, ps...)
	return eq
}

// Limit adds a limit step to the query.
func (eq *EventQuery) Limit(limit int) *EventQuery {
	eq.limit = &limit
	return eq
}

// Offset adds an offset step to the query.
func (eq *EventQuery) Offset(offset int) *EventQuery {
	eq.offset = &offset
	return eq
}

// Order adds an order step to the query.
func (eq *EventQuery) Order(o ...OrderFunc) *EventQuery {
	eq.order = append(eq.order, o...)
	return eq
}

// QueryAction chains the current query on the action edge.
func (eq *EventQuery) QueryAction() *ActionQuery {
	query := &ActionQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, eq.sqlQuery()),
			sqlgraph.To(action.Table, action.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, event.ActionTable, event.ActionColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAlias chains the current query on the alias edge.
func (eq *EventQuery) QueryAlias() *AliasQuery {
	query := &AliasQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, eq.sqlQuery()),
			sqlgraph.To(alias.Table, alias.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, event.AliasTable, event.AliasColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryApp chains the current query on the app edge.
func (eq *EventQuery) QueryApp() *AppQuery {
	query := &AppQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, eq.sqlQuery()),
			sqlgraph.To(app.Table, app.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, event.AppTable, event.AppColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBrowser chains the current query on the browser edge.
func (eq *EventQuery) QueryBrowser() *BrowserQuery {
	query := &BrowserQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, eq.sqlQuery()),
			sqlgraph.To(browser.Table, browser.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, event.BrowserTable, event.BrowserColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCampaign chains the current query on the campaign edge.
func (eq *EventQuery) QueryCampaign() *CampaignQuery {
	query := &CampaignQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, eq.sqlQuery()),
			sqlgraph.To(campaign.Table, campaign.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, event.CampaignTable, event.CampaignColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryConnectivity chains the current query on the connectivity edge.
func (eq *EventQuery) QueryConnectivity() *ConnectivityQuery {
	query := &ConnectivityQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, eq.sqlQuery()),
			sqlgraph.To(connectivity.Table, connectivity.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, event.ConnectivityTable, event.ConnectivityColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDevice chains the current query on the device edge.
func (eq *EventQuery) QueryDevice() *DeviceQuery {
	query := &DeviceQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, eq.sqlQuery()),
			sqlgraph.To(device.Table, device.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, event.DeviceTable, event.DeviceColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryExtra chains the current query on the extra edge.
func (eq *EventQuery) QueryExtra() *ExtraQuery {
	query := &ExtraQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, eq.sqlQuery()),
			sqlgraph.To(extra.Table, extra.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, event.ExtraTable, event.ExtraColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryGroup chains the current query on the group edge.
func (eq *EventQuery) QueryGroup() *GroupQuery {
	query := &GroupQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, eq.sqlQuery()),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, event.GroupTable, event.GroupColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLibrary chains the current query on the library edge.
func (eq *EventQuery) QueryLibrary() *LibraryQuery {
	query := &LibraryQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, eq.sqlQuery()),
			sqlgraph.To(library.Table, library.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, event.LibraryTable, event.LibraryColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLocation chains the current query on the location edge.
func (eq *EventQuery) QueryLocation() *LocationQuery {
	query := &LocationQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, eq.sqlQuery()),
			sqlgraph.To(location.Table, location.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, event.LocationTable, event.LocationColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNetwork chains the current query on the network edge.
func (eq *EventQuery) QueryNetwork() *NetworkQuery {
	query := &NetworkQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, eq.sqlQuery()),
			sqlgraph.To(network.Table, network.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, event.NetworkTable, event.NetworkColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOs chains the current query on the os edge.
func (eq *EventQuery) QueryOs() *OSContextQuery {
	query := &OSContextQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, eq.sqlQuery()),
			sqlgraph.To(oscontext.Table, oscontext.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, event.OsTable, event.OsColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPage chains the current query on the page edge.
func (eq *EventQuery) QueryPage() *PageQuery {
	query := &PageQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, eq.sqlQuery()),
			sqlgraph.To(page.Table, page.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, event.PageTable, event.PageColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReferrer chains the current query on the referrer edge.
func (eq *EventQuery) QueryReferrer() *ReferrerQuery {
	query := &ReferrerQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, eq.sqlQuery()),
			sqlgraph.To(referrer.Table, referrer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, event.ReferrerTable, event.ReferrerColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryScreen chains the current query on the screen edge.
func (eq *EventQuery) QueryScreen() *ScreenQuery {
	query := &ScreenQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, eq.sqlQuery()),
			sqlgraph.To(screen.Table, screen.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, event.ScreenTable, event.ScreenColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySession chains the current query on the session edge.
func (eq *EventQuery) QuerySession() *SessionQuery {
	query := &SessionQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, eq.sqlQuery()),
			sqlgraph.To(session.Table, session.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, event.SessionTable, event.SessionColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTiming chains the current query on the timing edge.
func (eq *EventQuery) QueryTiming() *TimingQuery {
	query := &TimingQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, eq.sqlQuery()),
			sqlgraph.To(timing.Table, timing.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, event.TimingTable, event.TimingColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryViewport chains the current query on the viewport edge.
func (eq *EventQuery) QueryViewport() *ViewportQuery {
	query := &ViewportQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, eq.sqlQuery()),
			sqlgraph.To(viewport.Table, viewport.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, event.ViewportTable, event.ViewportColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUser chains the current query on the user edge.
func (eq *EventQuery) QueryUser() *UserQuery {
	query := &UserQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, eq.sqlQuery()),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, event.UserTable, event.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Event entity in the query. Returns *NotFoundError when no event was found.
func (eq *EventQuery) First(ctx context.Context) (*Event, error) {
	es, err := eq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(es) == 0 {
		return nil, &NotFoundError{event.Label}
	}
	return es[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (eq *EventQuery) FirstX(ctx context.Context) *Event {
	e, err := eq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return e
}

// FirstID returns the first Event id in the query. Returns *NotFoundError when no id was found.
func (eq *EventQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = eq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{event.Label}
		return
	}
	return ids[0], nil
}

// FirstXID is like FirstID, but panics if an error occurs.
func (eq *EventQuery) FirstXID(ctx context.Context) uuid.UUID {
	id, err := eq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only Event entity in the query, returns an error if not exactly one entity was returned.
func (eq *EventQuery) Only(ctx context.Context) (*Event, error) {
	es, err := eq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(es) {
	case 1:
		return es[0], nil
	case 0:
		return nil, &NotFoundError{event.Label}
	default:
		return nil, &NotSingularError{event.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (eq *EventQuery) OnlyX(ctx context.Context) *Event {
	e, err := eq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return e
}

// OnlyID returns the only Event id in the query, returns an error if not exactly one id was returned.
func (eq *EventQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = eq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{event.Label}
	default:
		err = &NotSingularError{event.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (eq *EventQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := eq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Events.
func (eq *EventQuery) All(ctx context.Context) ([]*Event, error) {
	if err := eq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return eq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (eq *EventQuery) AllX(ctx context.Context) []*Event {
	es, err := eq.All(ctx)
	if err != nil {
		panic(err)
	}
	return es
}

// IDs executes the query and returns a list of Event ids.
func (eq *EventQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
	var ids []uuid.UUID
	if err := eq.Select(event.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (eq *EventQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := eq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (eq *EventQuery) Count(ctx context.Context) (int, error) {
	if err := eq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return eq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (eq *EventQuery) CountX(ctx context.Context) int {
	count, err := eq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (eq *EventQuery) Exist(ctx context.Context) (bool, error) {
	if err := eq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return eq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (eq *EventQuery) ExistX(ctx context.Context) bool {
	exist, err := eq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (eq *EventQuery) Clone() *EventQuery {
	return &EventQuery{
		config:     eq.config,
		limit:      eq.limit,
		offset:     eq.offset,
		order:      append([]OrderFunc{}, eq.order...),
		unique:     append([]string{}, eq.unique...),
		predicates: append([]predicate.Event{}, eq.predicates...),
		// clone intermediate query.
		sql:  eq.sql.Clone(),
		path: eq.path,
	}
}

//  WithAction tells the query-builder to eager-loads the nodes that are connected to
// the "action" edge. The optional arguments used to configure the query builder of the edge.
func (eq *EventQuery) WithAction(opts ...func(*ActionQuery)) *EventQuery {
	query := &ActionQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withAction = query
	return eq
}

//  WithAlias tells the query-builder to eager-loads the nodes that are connected to
// the "alias" edge. The optional arguments used to configure the query builder of the edge.
func (eq *EventQuery) WithAlias(opts ...func(*AliasQuery)) *EventQuery {
	query := &AliasQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withAlias = query
	return eq
}

//  WithApp tells the query-builder to eager-loads the nodes that are connected to
// the "app" edge. The optional arguments used to configure the query builder of the edge.
func (eq *EventQuery) WithApp(opts ...func(*AppQuery)) *EventQuery {
	query := &AppQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withApp = query
	return eq
}

//  WithBrowser tells the query-builder to eager-loads the nodes that are connected to
// the "browser" edge. The optional arguments used to configure the query builder of the edge.
func (eq *EventQuery) WithBrowser(opts ...func(*BrowserQuery)) *EventQuery {
	query := &BrowserQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withBrowser = query
	return eq
}

//  WithCampaign tells the query-builder to eager-loads the nodes that are connected to
// the "campaign" edge. The optional arguments used to configure the query builder of the edge.
func (eq *EventQuery) WithCampaign(opts ...func(*CampaignQuery)) *EventQuery {
	query := &CampaignQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withCampaign = query
	return eq
}

//  WithConnectivity tells the query-builder to eager-loads the nodes that are connected to
// the "connectivity" edge. The optional arguments used to configure the query builder of the edge.
func (eq *EventQuery) WithConnectivity(opts ...func(*ConnectivityQuery)) *EventQuery {
	query := &ConnectivityQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withConnectivity = query
	return eq
}

//  WithDevice tells the query-builder to eager-loads the nodes that are connected to
// the "device" edge. The optional arguments used to configure the query builder of the edge.
func (eq *EventQuery) WithDevice(opts ...func(*DeviceQuery)) *EventQuery {
	query := &DeviceQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withDevice = query
	return eq
}

//  WithExtra tells the query-builder to eager-loads the nodes that are connected to
// the "extra" edge. The optional arguments used to configure the query builder of the edge.
func (eq *EventQuery) WithExtra(opts ...func(*ExtraQuery)) *EventQuery {
	query := &ExtraQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withExtra = query
	return eq
}

//  WithGroup tells the query-builder to eager-loads the nodes that are connected to
// the "group" edge. The optional arguments used to configure the query builder of the edge.
func (eq *EventQuery) WithGroup(opts ...func(*GroupQuery)) *EventQuery {
	query := &GroupQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withGroup = query
	return eq
}

//  WithLibrary tells the query-builder to eager-loads the nodes that are connected to
// the "library" edge. The optional arguments used to configure the query builder of the edge.
func (eq *EventQuery) WithLibrary(opts ...func(*LibraryQuery)) *EventQuery {
	query := &LibraryQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withLibrary = query
	return eq
}

//  WithLocation tells the query-builder to eager-loads the nodes that are connected to
// the "location" edge. The optional arguments used to configure the query builder of the edge.
func (eq *EventQuery) WithLocation(opts ...func(*LocationQuery)) *EventQuery {
	query := &LocationQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withLocation = query
	return eq
}

//  WithNetwork tells the query-builder to eager-loads the nodes that are connected to
// the "network" edge. The optional arguments used to configure the query builder of the edge.
func (eq *EventQuery) WithNetwork(opts ...func(*NetworkQuery)) *EventQuery {
	query := &NetworkQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withNetwork = query
	return eq
}

//  WithOs tells the query-builder to eager-loads the nodes that are connected to
// the "os" edge. The optional arguments used to configure the query builder of the edge.
func (eq *EventQuery) WithOs(opts ...func(*OSContextQuery)) *EventQuery {
	query := &OSContextQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withOs = query
	return eq
}

//  WithPage tells the query-builder to eager-loads the nodes that are connected to
// the "page" edge. The optional arguments used to configure the query builder of the edge.
func (eq *EventQuery) WithPage(opts ...func(*PageQuery)) *EventQuery {
	query := &PageQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withPage = query
	return eq
}

//  WithReferrer tells the query-builder to eager-loads the nodes that are connected to
// the "referrer" edge. The optional arguments used to configure the query builder of the edge.
func (eq *EventQuery) WithReferrer(opts ...func(*ReferrerQuery)) *EventQuery {
	query := &ReferrerQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withReferrer = query
	return eq
}

//  WithScreen tells the query-builder to eager-loads the nodes that are connected to
// the "screen" edge. The optional arguments used to configure the query builder of the edge.
func (eq *EventQuery) WithScreen(opts ...func(*ScreenQuery)) *EventQuery {
	query := &ScreenQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withScreen = query
	return eq
}

//  WithSession tells the query-builder to eager-loads the nodes that are connected to
// the "session" edge. The optional arguments used to configure the query builder of the edge.
func (eq *EventQuery) WithSession(opts ...func(*SessionQuery)) *EventQuery {
	query := &SessionQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withSession = query
	return eq
}

//  WithTiming tells the query-builder to eager-loads the nodes that are connected to
// the "timing" edge. The optional arguments used to configure the query builder of the edge.
func (eq *EventQuery) WithTiming(opts ...func(*TimingQuery)) *EventQuery {
	query := &TimingQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withTiming = query
	return eq
}

//  WithViewport tells the query-builder to eager-loads the nodes that are connected to
// the "viewport" edge. The optional arguments used to configure the query builder of the edge.
func (eq *EventQuery) WithViewport(opts ...func(*ViewportQuery)) *EventQuery {
	query := &ViewportQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withViewport = query
	return eq
}

//  WithUser tells the query-builder to eager-loads the nodes that are connected to
// the "user" edge. The optional arguments used to configure the query builder of the edge.
func (eq *EventQuery) WithUser(opts ...func(*UserQuery)) *EventQuery {
	query := &UserQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withUser = query
	return eq
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TrackingID string `json:"tracking_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Event.Query().
//		GroupBy(event.FieldTrackingID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (eq *EventQuery) GroupBy(field string, fields ...string) *EventGroupBy {
	group := &EventGroupBy{config: eq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return eq.sqlQuery(), nil
	}
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		TrackingID string `json:"tracking_id,omitempty"`
//	}
//
//	client.Event.Query().
//		Select(event.FieldTrackingID).
//		Scan(ctx, &v)
//
func (eq *EventQuery) Select(field string, fields ...string) *EventSelect {
	selector := &EventSelect{config: eq.config}
	selector.fields = append([]string{field}, fields...)
	selector.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return eq.sqlQuery(), nil
	}
	return selector
}

func (eq *EventQuery) prepareQuery(ctx context.Context) error {
	if eq.path != nil {
		prev, err := eq.path(ctx)
		if err != nil {
			return err
		}
		eq.sql = prev
	}
	return nil
}

func (eq *EventQuery) sqlAll(ctx context.Context) ([]*Event, error) {
	var (
		nodes       = []*Event{}
		withFKs     = eq.withFKs
		_spec       = eq.querySpec()
		loadedTypes = [20]bool{
			eq.withAction != nil,
			eq.withAlias != nil,
			eq.withApp != nil,
			eq.withBrowser != nil,
			eq.withCampaign != nil,
			eq.withConnectivity != nil,
			eq.withDevice != nil,
			eq.withExtra != nil,
			eq.withGroup != nil,
			eq.withLibrary != nil,
			eq.withLocation != nil,
			eq.withNetwork != nil,
			eq.withOs != nil,
			eq.withPage != nil,
			eq.withReferrer != nil,
			eq.withScreen != nil,
			eq.withSession != nil,
			eq.withTiming != nil,
			eq.withViewport != nil,
			eq.withUser != nil,
		}
	)
	if eq.withApp != nil || eq.withCampaign != nil || eq.withDevice != nil || eq.withExtra != nil || eq.withGroup != nil || eq.withLibrary != nil || eq.withLocation != nil || eq.withNetwork != nil || eq.withOs != nil || eq.withPage != nil || eq.withReferrer != nil || eq.withScreen != nil || eq.withSession != nil || eq.withTiming != nil || eq.withViewport != nil || eq.withUser != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, event.ForeignKeys...)
	}
	_spec.ScanValues = func() []interface{} {
		node := &Event{config: eq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		if withFKs {
			values = append(values, node.fkValues()...)
		}
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, eq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := eq.withAction; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[uuid.UUID]*Event)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
		}
		query.withFKs = true
		query.Where(predicate.Action(func(s *sql.Selector) {
			s.Where(sql.InValues(event.ActionColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.event_action
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "event_action" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "event_action" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Action = n
		}
	}

	if query := eq.withAlias; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[uuid.UUID]*Event)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
		}
		query.withFKs = true
		query.Where(predicate.Alias(func(s *sql.Selector) {
			s.Where(sql.InValues(event.AliasColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.event_alias
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "event_alias" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "event_alias" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Alias = n
		}
	}

	if query := eq.withApp; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*Event)
		for i := range nodes {
			if fk := nodes[i].event_app; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(app.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "event_app" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.App = n
			}
		}
	}

	if query := eq.withBrowser; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[uuid.UUID]*Event)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
		}
		query.withFKs = true
		query.Where(predicate.Browser(func(s *sql.Selector) {
			s.Where(sql.InValues(event.BrowserColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.event_browser
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "event_browser" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "event_browser" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Browser = n
		}
	}

	if query := eq.withCampaign; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*Event)
		for i := range nodes {
			if fk := nodes[i].event_campaign; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(campaign.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "event_campaign" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Campaign = n
			}
		}
	}

	if query := eq.withConnectivity; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[uuid.UUID]*Event)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
		}
		query.withFKs = true
		query.Where(predicate.Connectivity(func(s *sql.Selector) {
			s.Where(sql.InValues(event.ConnectivityColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.event_connectivity
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "event_connectivity" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "event_connectivity" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Connectivity = n
		}
	}

	if query := eq.withDevice; query != nil {
		ids := make([]string, 0, len(nodes))
		nodeids := make(map[string][]*Event)
		for i := range nodes {
			if fk := nodes[i].event_device; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(device.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "event_device" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Device = n
			}
		}
	}

	if query := eq.withExtra; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*Event)
		for i := range nodes {
			if fk := nodes[i].event_extra; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(extra.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "event_extra" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Extra = n
			}
		}
	}

	if query := eq.withGroup; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*Event)
		for i := range nodes {
			if fk := nodes[i].event_group; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(group.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "event_group" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Group = n
			}
		}
	}

	if query := eq.withLibrary; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*Event)
		for i := range nodes {
			if fk := nodes[i].event_library; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(library.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "event_library" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Library = n
			}
		}
	}

	if query := eq.withLocation; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*Event)
		for i := range nodes {
			if fk := nodes[i].event_location; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(location.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "event_location" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Location = n
			}
		}
	}

	if query := eq.withNetwork; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*Event)
		for i := range nodes {
			if fk := nodes[i].event_network; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(network.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "event_network" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Network = n
			}
		}
	}

	if query := eq.withOs; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*Event)
		for i := range nodes {
			if fk := nodes[i].event_os; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(oscontext.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "event_os" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Os = n
			}
		}
	}

	if query := eq.withPage; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*Event)
		for i := range nodes {
			if fk := nodes[i].event_page; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(page.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "event_page" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Page = n
			}
		}
	}

	if query := eq.withReferrer; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*Event)
		for i := range nodes {
			if fk := nodes[i].event_referrer; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(referrer.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "event_referrer" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Referrer = n
			}
		}
	}

	if query := eq.withScreen; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*Event)
		for i := range nodes {
			if fk := nodes[i].event_screen; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(screen.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "event_screen" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Screen = n
			}
		}
	}

	if query := eq.withSession; query != nil {
		ids := make([]uuid.UUID, 0, len(nodes))
		nodeids := make(map[uuid.UUID][]*Event)
		for i := range nodes {
			if fk := nodes[i].event_session; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(session.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "event_session" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Session = n
			}
		}
	}

	if query := eq.withTiming; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*Event)
		for i := range nodes {
			if fk := nodes[i].event_timing; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(timing.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "event_timing" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Timing = n
			}
		}
	}

	if query := eq.withViewport; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*Event)
		for i := range nodes {
			if fk := nodes[i].event_viewport; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(viewport.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "event_viewport" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Viewport = n
			}
		}
	}

	if query := eq.withUser; query != nil {
		ids := make([]string, 0, len(nodes))
		nodeids := make(map[string][]*Event)
		for i := range nodes {
			if fk := nodes[i].event_user; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(user.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "event_user" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.User = n
			}
		}
	}

	return nodes, nil
}

func (eq *EventQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := eq.querySpec()
	return sqlgraph.CountNodes(ctx, eq.driver, _spec)
}

func (eq *EventQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := eq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (eq *EventQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   event.Table,
			Columns: event.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: event.FieldID,
			},
		},
		From:   eq.sql,
		Unique: true,
	}
	if ps := eq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := eq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := eq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := eq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (eq *EventQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(eq.driver.Dialect())
	t1 := builder.Table(event.Table)
	selector := builder.Select(t1.Columns(event.Columns...)...).From(t1)
	if eq.sql != nil {
		selector = eq.sql
		selector.Select(selector.Columns(event.Columns...)...)
	}
	for _, p := range eq.predicates {
		p(selector)
	}
	for _, p := range eq.order {
		p(selector)
	}
	if offset := eq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := eq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// EventGroupBy is the builder for group-by Event entities.
type EventGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (egb *EventGroupBy) Aggregate(fns ...AggregateFunc) *EventGroupBy {
	egb.fns = append(egb.fns, fns...)
	return egb
}

// Scan applies the group-by query and scan the result into the given value.
func (egb *EventGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := egb.path(ctx)
	if err != nil {
		return err
	}
	egb.sql = query
	return egb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (egb *EventGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := egb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (egb *EventGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(egb.fields) > 1 {
		return nil, errors.New("ent: EventGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := egb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (egb *EventGroupBy) StringsX(ctx context.Context) []string {
	v, err := egb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from group-by. It is only allowed when querying group-by with one field.
func (egb *EventGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = egb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{event.Label}
	default:
		err = fmt.Errorf("ent: EventGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (egb *EventGroupBy) StringX(ctx context.Context) string {
	v, err := egb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (egb *EventGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(egb.fields) > 1 {
		return nil, errors.New("ent: EventGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := egb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (egb *EventGroupBy) IntsX(ctx context.Context) []int {
	v, err := egb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from group-by. It is only allowed when querying group-by with one field.
func (egb *EventGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = egb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{event.Label}
	default:
		err = fmt.Errorf("ent: EventGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (egb *EventGroupBy) IntX(ctx context.Context) int {
	v, err := egb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (egb *EventGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(egb.fields) > 1 {
		return nil, errors.New("ent: EventGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := egb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (egb *EventGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := egb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from group-by. It is only allowed when querying group-by with one field.
func (egb *EventGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = egb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{event.Label}
	default:
		err = fmt.Errorf("ent: EventGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (egb *EventGroupBy) Float64X(ctx context.Context) float64 {
	v, err := egb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (egb *EventGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(egb.fields) > 1 {
		return nil, errors.New("ent: EventGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := egb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (egb *EventGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := egb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from group-by. It is only allowed when querying group-by with one field.
func (egb *EventGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = egb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{event.Label}
	default:
		err = fmt.Errorf("ent: EventGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (egb *EventGroupBy) BoolX(ctx context.Context) bool {
	v, err := egb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (egb *EventGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := egb.sqlQuery().Query()
	if err := egb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (egb *EventGroupBy) sqlQuery() *sql.Selector {
	selector := egb.sql
	columns := make([]string, 0, len(egb.fields)+len(egb.fns))
	columns = append(columns, egb.fields...)
	for _, fn := range egb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(egb.fields...)
}

// EventSelect is the builder for select fields of Event entities.
type EventSelect struct {
	config
	fields []string
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Scan applies the selector query and scan the result into the given value.
func (es *EventSelect) Scan(ctx context.Context, v interface{}) error {
	query, err := es.path(ctx)
	if err != nil {
		return err
	}
	es.sql = query
	return es.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (es *EventSelect) ScanX(ctx context.Context, v interface{}) {
	if err := es.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (es *EventSelect) Strings(ctx context.Context) ([]string, error) {
	if len(es.fields) > 1 {
		return nil, errors.New("ent: EventSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := es.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (es *EventSelect) StringsX(ctx context.Context) []string {
	v, err := es.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from selector. It is only allowed when selecting one field.
func (es *EventSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = es.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{event.Label}
	default:
		err = fmt.Errorf("ent: EventSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (es *EventSelect) StringX(ctx context.Context) string {
	v, err := es.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (es *EventSelect) Ints(ctx context.Context) ([]int, error) {
	if len(es.fields) > 1 {
		return nil, errors.New("ent: EventSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := es.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (es *EventSelect) IntsX(ctx context.Context) []int {
	v, err := es.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from selector. It is only allowed when selecting one field.
func (es *EventSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = es.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{event.Label}
	default:
		err = fmt.Errorf("ent: EventSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (es *EventSelect) IntX(ctx context.Context) int {
	v, err := es.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (es *EventSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(es.fields) > 1 {
		return nil, errors.New("ent: EventSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := es.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (es *EventSelect) Float64sX(ctx context.Context) []float64 {
	v, err := es.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from selector. It is only allowed when selecting one field.
func (es *EventSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = es.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{event.Label}
	default:
		err = fmt.Errorf("ent: EventSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (es *EventSelect) Float64X(ctx context.Context) float64 {
	v, err := es.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (es *EventSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(es.fields) > 1 {
		return nil, errors.New("ent: EventSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := es.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (es *EventSelect) BoolsX(ctx context.Context) []bool {
	v, err := es.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from selector. It is only allowed when selecting one field.
func (es *EventSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = es.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{event.Label}
	default:
		err = fmt.Errorf("ent: EventSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (es *EventSelect) BoolX(ctx context.Context) bool {
	v, err := es.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (es *EventSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := es.sqlQuery().Query()
	if err := es.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (es *EventSelect) sqlQuery() sql.Querier {
	selector := es.sql
	selector.Select(selector.Columns(es.fields...)...)
	return selector
}
