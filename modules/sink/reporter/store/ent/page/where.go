// Code generated by entc, DO NOT EDIT.

package page

import (
	"github.com/blushft/strana/modules/sink/reporter/store/ent/predicate"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Hostname applies equality check predicate on the "hostname" field. It's identical to HostnameEQ.
func Hostname(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHostname), v))
	})
}

// Path applies equality check predicate on the "path" field. It's identical to PathEQ.
func Path(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPath), v))
	})
}

// Referrer applies equality check predicate on the "referrer" field. It's identical to ReferrerEQ.
func Referrer(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReferrer), v))
	})
}

// Search applies equality check predicate on the "search" field. It's identical to SearchEQ.
func Search(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSearch), v))
	})
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// Hash applies equality check predicate on the "hash" field. It's identical to HashEQ.
func Hash(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHash), v))
	})
}

// HostnameEQ applies the EQ predicate on the "hostname" field.
func HostnameEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHostname), v))
	})
}

// HostnameNEQ applies the NEQ predicate on the "hostname" field.
func HostnameNEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHostname), v))
	})
}

// HostnameIn applies the In predicate on the "hostname" field.
func HostnameIn(vs ...string) predicate.Page {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldHostname), v...))
	})
}

// HostnameNotIn applies the NotIn predicate on the "hostname" field.
func HostnameNotIn(vs ...string) predicate.Page {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldHostname), v...))
	})
}

// HostnameGT applies the GT predicate on the "hostname" field.
func HostnameGT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHostname), v))
	})
}

// HostnameGTE applies the GTE predicate on the "hostname" field.
func HostnameGTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHostname), v))
	})
}

// HostnameLT applies the LT predicate on the "hostname" field.
func HostnameLT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHostname), v))
	})
}

// HostnameLTE applies the LTE predicate on the "hostname" field.
func HostnameLTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHostname), v))
	})
}

// HostnameContains applies the Contains predicate on the "hostname" field.
func HostnameContains(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldHostname), v))
	})
}

// HostnameHasPrefix applies the HasPrefix predicate on the "hostname" field.
func HostnameHasPrefix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldHostname), v))
	})
}

// HostnameHasSuffix applies the HasSuffix predicate on the "hostname" field.
func HostnameHasSuffix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldHostname), v))
	})
}

// HostnameEqualFold applies the EqualFold predicate on the "hostname" field.
func HostnameEqualFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldHostname), v))
	})
}

// HostnameContainsFold applies the ContainsFold predicate on the "hostname" field.
func HostnameContainsFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldHostname), v))
	})
}

// PathEQ applies the EQ predicate on the "path" field.
func PathEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPath), v))
	})
}

// PathNEQ applies the NEQ predicate on the "path" field.
func PathNEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPath), v))
	})
}

// PathIn applies the In predicate on the "path" field.
func PathIn(vs ...string) predicate.Page {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPath), v...))
	})
}

// PathNotIn applies the NotIn predicate on the "path" field.
func PathNotIn(vs ...string) predicate.Page {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPath), v...))
	})
}

// PathGT applies the GT predicate on the "path" field.
func PathGT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPath), v))
	})
}

// PathGTE applies the GTE predicate on the "path" field.
func PathGTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPath), v))
	})
}

// PathLT applies the LT predicate on the "path" field.
func PathLT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPath), v))
	})
}

// PathLTE applies the LTE predicate on the "path" field.
func PathLTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPath), v))
	})
}

// PathContains applies the Contains predicate on the "path" field.
func PathContains(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPath), v))
	})
}

// PathHasPrefix applies the HasPrefix predicate on the "path" field.
func PathHasPrefix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPath), v))
	})
}

// PathHasSuffix applies the HasSuffix predicate on the "path" field.
func PathHasSuffix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPath), v))
	})
}

// PathEqualFold applies the EqualFold predicate on the "path" field.
func PathEqualFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPath), v))
	})
}

// PathContainsFold applies the ContainsFold predicate on the "path" field.
func PathContainsFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPath), v))
	})
}

// ReferrerEQ applies the EQ predicate on the "referrer" field.
func ReferrerEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReferrer), v))
	})
}

// ReferrerNEQ applies the NEQ predicate on the "referrer" field.
func ReferrerNEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReferrer), v))
	})
}

// ReferrerIn applies the In predicate on the "referrer" field.
func ReferrerIn(vs ...string) predicate.Page {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReferrer), v...))
	})
}

// ReferrerNotIn applies the NotIn predicate on the "referrer" field.
func ReferrerNotIn(vs ...string) predicate.Page {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReferrer), v...))
	})
}

// ReferrerGT applies the GT predicate on the "referrer" field.
func ReferrerGT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReferrer), v))
	})
}

// ReferrerGTE applies the GTE predicate on the "referrer" field.
func ReferrerGTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReferrer), v))
	})
}

// ReferrerLT applies the LT predicate on the "referrer" field.
func ReferrerLT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReferrer), v))
	})
}

// ReferrerLTE applies the LTE predicate on the "referrer" field.
func ReferrerLTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReferrer), v))
	})
}

// ReferrerContains applies the Contains predicate on the "referrer" field.
func ReferrerContains(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldReferrer), v))
	})
}

// ReferrerHasPrefix applies the HasPrefix predicate on the "referrer" field.
func ReferrerHasPrefix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldReferrer), v))
	})
}

// ReferrerHasSuffix applies the HasSuffix predicate on the "referrer" field.
func ReferrerHasSuffix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldReferrer), v))
	})
}

// ReferrerIsNil applies the IsNil predicate on the "referrer" field.
func ReferrerIsNil() predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldReferrer)))
	})
}

// ReferrerNotNil applies the NotNil predicate on the "referrer" field.
func ReferrerNotNil() predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldReferrer)))
	})
}

// ReferrerEqualFold applies the EqualFold predicate on the "referrer" field.
func ReferrerEqualFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldReferrer), v))
	})
}

// ReferrerContainsFold applies the ContainsFold predicate on the "referrer" field.
func ReferrerContainsFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldReferrer), v))
	})
}

// SearchEQ applies the EQ predicate on the "search" field.
func SearchEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSearch), v))
	})
}

// SearchNEQ applies the NEQ predicate on the "search" field.
func SearchNEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSearch), v))
	})
}

// SearchIn applies the In predicate on the "search" field.
func SearchIn(vs ...string) predicate.Page {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSearch), v...))
	})
}

// SearchNotIn applies the NotIn predicate on the "search" field.
func SearchNotIn(vs ...string) predicate.Page {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSearch), v...))
	})
}

// SearchGT applies the GT predicate on the "search" field.
func SearchGT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSearch), v))
	})
}

// SearchGTE applies the GTE predicate on the "search" field.
func SearchGTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSearch), v))
	})
}

// SearchLT applies the LT predicate on the "search" field.
func SearchLT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSearch), v))
	})
}

// SearchLTE applies the LTE predicate on the "search" field.
func SearchLTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSearch), v))
	})
}

// SearchContains applies the Contains predicate on the "search" field.
func SearchContains(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSearch), v))
	})
}

// SearchHasPrefix applies the HasPrefix predicate on the "search" field.
func SearchHasPrefix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSearch), v))
	})
}

// SearchHasSuffix applies the HasSuffix predicate on the "search" field.
func SearchHasSuffix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSearch), v))
	})
}

// SearchIsNil applies the IsNil predicate on the "search" field.
func SearchIsNil() predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSearch)))
	})
}

// SearchNotNil applies the NotNil predicate on the "search" field.
func SearchNotNil() predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSearch)))
	})
}

// SearchEqualFold applies the EqualFold predicate on the "search" field.
func SearchEqualFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSearch), v))
	})
}

// SearchContainsFold applies the ContainsFold predicate on the "search" field.
func SearchContainsFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSearch), v))
	})
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTitle), v))
	})
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Page {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTitle), v...))
	})
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Page {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTitle), v...))
	})
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTitle), v))
	})
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTitle), v))
	})
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTitle), v))
	})
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTitle), v))
	})
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTitle), v))
	})
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTitle), v))
	})
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTitle), v))
	})
}

// TitleIsNil applies the IsNil predicate on the "title" field.
func TitleIsNil() predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTitle)))
	})
}

// TitleNotNil applies the NotNil predicate on the "title" field.
func TitleNotNil() predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTitle)))
	})
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTitle), v))
	})
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTitle), v))
	})
}

// HashEQ applies the EQ predicate on the "hash" field.
func HashEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHash), v))
	})
}

// HashNEQ applies the NEQ predicate on the "hash" field.
func HashNEQ(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHash), v))
	})
}

// HashIn applies the In predicate on the "hash" field.
func HashIn(vs ...string) predicate.Page {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldHash), v...))
	})
}

// HashNotIn applies the NotIn predicate on the "hash" field.
func HashNotIn(vs ...string) predicate.Page {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Page(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldHash), v...))
	})
}

// HashGT applies the GT predicate on the "hash" field.
func HashGT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHash), v))
	})
}

// HashGTE applies the GTE predicate on the "hash" field.
func HashGTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHash), v))
	})
}

// HashLT applies the LT predicate on the "hash" field.
func HashLT(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHash), v))
	})
}

// HashLTE applies the LTE predicate on the "hash" field.
func HashLTE(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHash), v))
	})
}

// HashContains applies the Contains predicate on the "hash" field.
func HashContains(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldHash), v))
	})
}

// HashHasPrefix applies the HasPrefix predicate on the "hash" field.
func HashHasPrefix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldHash), v))
	})
}

// HashHasSuffix applies the HasSuffix predicate on the "hash" field.
func HashHasSuffix(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldHash), v))
	})
}

// HashIsNil applies the IsNil predicate on the "hash" field.
func HashIsNil() predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldHash)))
	})
}

// HashNotNil applies the NotNil predicate on the "hash" field.
func HashNotNil() predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldHash)))
	})
}

// HashEqualFold applies the EqualFold predicate on the "hash" field.
func HashEqualFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldHash), v))
	})
}

// HashContainsFold applies the ContainsFold predicate on the "hash" field.
func HashContainsFold(v string) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldHash), v))
	})
}

// HasEvents applies the HasEdge predicate on the "events" edge.
func HasEvents() predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EventsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, EventsTable, EventsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEventsWith applies the HasEdge predicate on the "events" edge with a given conditions (other predicates).
func HasEventsWith(preds ...predicate.Event) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EventsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, EventsTable, EventsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Page) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Page) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Page) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		p(s.Not())
	})
}
