// Code generated by entc, DO NOT EDIT.

package hook

import (
	"context"
	"fmt"

	"github.com/blushft/strana/modules/sink/reporter/store/ent"
)

// The ActionFunc type is an adapter to allow the use of ordinary
// function as Action mutator.
type ActionFunc func(context.Context, *ent.ActionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ActionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ActionMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ActionMutation", m)
	}
	return f(ctx, mv)
}

// The AliasFunc type is an adapter to allow the use of ordinary
// function as Alias mutator.
type AliasFunc func(context.Context, *ent.AliasMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AliasFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.AliasMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AliasMutation", m)
	}
	return f(ctx, mv)
}

// The AppFunc type is an adapter to allow the use of ordinary
// function as App mutator.
type AppFunc func(context.Context, *ent.AppMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AppFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.AppMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AppMutation", m)
	}
	return f(ctx, mv)
}

// The BrowserFunc type is an adapter to allow the use of ordinary
// function as Browser mutator.
type BrowserFunc func(context.Context, *ent.BrowserMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BrowserFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.BrowserMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BrowserMutation", m)
	}
	return f(ctx, mv)
}

// The CampaignFunc type is an adapter to allow the use of ordinary
// function as Campaign mutator.
type CampaignFunc func(context.Context, *ent.CampaignMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CampaignFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.CampaignMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CampaignMutation", m)
	}
	return f(ctx, mv)
}

// The ConnectivityFunc type is an adapter to allow the use of ordinary
// function as Connectivity mutator.
type ConnectivityFunc func(context.Context, *ent.ConnectivityMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ConnectivityFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ConnectivityMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ConnectivityMutation", m)
	}
	return f(ctx, mv)
}

// The DeviceFunc type is an adapter to allow the use of ordinary
// function as Device mutator.
type DeviceFunc func(context.Context, *ent.DeviceMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f DeviceFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.DeviceMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.DeviceMutation", m)
	}
	return f(ctx, mv)
}

// The EventFunc type is an adapter to allow the use of ordinary
// function as Event mutator.
type EventFunc func(context.Context, *ent.EventMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f EventFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.EventMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.EventMutation", m)
	}
	return f(ctx, mv)
}

// The ExtraFunc type is an adapter to allow the use of ordinary
// function as Extra mutator.
type ExtraFunc func(context.Context, *ent.ExtraMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ExtraFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ExtraMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ExtraMutation", m)
	}
	return f(ctx, mv)
}

// The GroupFunc type is an adapter to allow the use of ordinary
// function as Group mutator.
type GroupFunc func(context.Context, *ent.GroupMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f GroupFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.GroupMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.GroupMutation", m)
	}
	return f(ctx, mv)
}

// The LibraryFunc type is an adapter to allow the use of ordinary
// function as Library mutator.
type LibraryFunc func(context.Context, *ent.LibraryMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f LibraryFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.LibraryMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.LibraryMutation", m)
	}
	return f(ctx, mv)
}

// The LocationFunc type is an adapter to allow the use of ordinary
// function as Location mutator.
type LocationFunc func(context.Context, *ent.LocationMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f LocationFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.LocationMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.LocationMutation", m)
	}
	return f(ctx, mv)
}

// The NetworkFunc type is an adapter to allow the use of ordinary
// function as Network mutator.
type NetworkFunc func(context.Context, *ent.NetworkMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f NetworkFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.NetworkMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.NetworkMutation", m)
	}
	return f(ctx, mv)
}

// The OSContextFunc type is an adapter to allow the use of ordinary
// function as OSContext mutator.
type OSContextFunc func(context.Context, *ent.OSContextMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f OSContextFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.OSContextMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.OSContextMutation", m)
	}
	return f(ctx, mv)
}

// The PageFunc type is an adapter to allow the use of ordinary
// function as Page mutator.
type PageFunc func(context.Context, *ent.PageMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PageFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.PageMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PageMutation", m)
	}
	return f(ctx, mv)
}

// The ReferrerFunc type is an adapter to allow the use of ordinary
// function as Referrer mutator.
type ReferrerFunc func(context.Context, *ent.ReferrerMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ReferrerFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ReferrerMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ReferrerMutation", m)
	}
	return f(ctx, mv)
}

// The ScreenFunc type is an adapter to allow the use of ordinary
// function as Screen mutator.
type ScreenFunc func(context.Context, *ent.ScreenMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ScreenFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ScreenMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ScreenMutation", m)
	}
	return f(ctx, mv)
}

// The SessionFunc type is an adapter to allow the use of ordinary
// function as Session mutator.
type SessionFunc func(context.Context, *ent.SessionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SessionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.SessionMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SessionMutation", m)
	}
	return f(ctx, mv)
}

// The TimingFunc type is an adapter to allow the use of ordinary
// function as Timing mutator.
type TimingFunc func(context.Context, *ent.TimingMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f TimingFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.TimingMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.TimingMutation", m)
	}
	return f(ctx, mv)
}

// The UserFunc type is an adapter to allow the use of ordinary
// function as User mutator.
type UserFunc func(context.Context, *ent.UserMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UserFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.UserMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UserMutation", m)
	}
	return f(ctx, mv)
}

// The ViewportFunc type is an adapter to allow the use of ordinary
// function as Viewport mutator.
type ViewportFunc func(context.Context, *ent.ViewportMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ViewportFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ViewportMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ViewportMutation", m)
	}
	return f(ctx, mv)
}

// Condition is a hook condition function.
type Condition func(context.Context, ent.Mutation) bool

// And groups conditions with the AND operator.
func And(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		if !first(ctx, m) || !second(ctx, m) {
			return false
		}
		for _, cond := range rest {
			if !cond(ctx, m) {
				return false
			}
		}
		return true
	}
}

// Or groups conditions with the OR operator.
func Or(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		if first(ctx, m) || second(ctx, m) {
			return true
		}
		for _, cond := range rest {
			if cond(ctx, m) {
				return true
			}
		}
		return false
	}
}

// Not negates a given condition.
func Not(cond Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		return !cond(ctx, m)
	}
}

// HasOp is a condition testing mutation operation.
func HasOp(op ent.Op) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		return m.Op().Is(op)
	}
}

// HasAddedFields is a condition validating `.AddedField` on fields.
func HasAddedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if _, exists := m.AddedField(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.AddedField(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasClearedFields is a condition validating `.FieldCleared` on fields.
func HasClearedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if exists := m.FieldCleared(field); !exists {
			return false
		}
		for _, field := range fields {
			if exists := m.FieldCleared(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasFields is a condition validating `.Field` on fields.
func HasFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if _, exists := m.Field(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.Field(field); !exists {
				return false
			}
		}
		return true
	}
}

// If executes the given hook under condition.
//
//	Hook.If(ComputeAverage, And(HasFields(...), HasAddedFields(...)))
//
func If(hk ent.Hook, cond Condition) ent.Hook {
	return func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if cond(ctx, m) {
				return hk(next).Mutate(ctx, m)
			}
			return next.Mutate(ctx, m)
		})
	}
}

// On executes the given hook only for the given operation.
//
//	hook.On(Log, ent.Delete|ent.Create)
//
func On(hk ent.Hook, op ent.Op) ent.Hook {
	return If(hk, HasOp(op))
}

// Unless skips the given hook only for the given operation.
//
//	hook.Unless(Log, ent.Update|ent.UpdateOne)
//
func Unless(hk ent.Hook, op ent.Op) ent.Hook {
	return If(hk, Not(HasOp(op)))
}

// Reject returns a hook that rejects all operations that match op.
//
//	func (T) Hooks() []ent.Hook {
//		return []ent.Hook{
//			Reject(ent.Delete|ent.Update),
//		}
//	}
//
func Reject(op ent.Op) ent.Hook {
	hk := func(ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(_ context.Context, m ent.Mutation) (ent.Value, error) {
			return nil, fmt.Errorf("%s operation is not allowed", m.Op())
		})
	}
	return On(hk, op)
}

// Chain acts as a list of hooks and is effectively immutable.
// Once created, it will always hold the same set of hooks in the same order.
type Chain struct {
	hooks []ent.Hook
}

// NewChain creates a new chain of hooks.
func NewChain(hooks ...ent.Hook) Chain {
	return Chain{append([]ent.Hook(nil), hooks...)}
}

// Hook chains the list of hooks and returns the final hook.
func (c Chain) Hook() ent.Hook {
	return func(mutator ent.Mutator) ent.Mutator {
		for i := len(c.hooks) - 1; i >= 0; i-- {
			mutator = c.hooks[i](mutator)
		}
		return mutator
	}
}

// Append extends a chain, adding the specified hook
// as the last ones in the mutation flow.
func (c Chain) Append(hooks ...ent.Hook) Chain {
	newHooks := make([]ent.Hook, 0, len(c.hooks)+len(hooks))
	newHooks = append(newHooks, c.hooks...)
	newHooks = append(newHooks, hooks...)
	return Chain{newHooks}
}

// Extend extends a chain, adding the specified chain
// as the last ones in the mutation flow.
func (c Chain) Extend(chain Chain) Chain {
	return c.Append(chain.hooks...)
}
