// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/blushft/strana/modules/sink/reporter/store/ent/action"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/event"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/google/uuid"
)

// ActionCreate is the builder for creating a Action entity.
type ActionCreate struct {
	config
	mutation *ActionMutation
	hooks    []Hook
}

// SetAction sets the action field.
func (ac *ActionCreate) SetAction(s string) *ActionCreate {
	ac.mutation.SetAction(s)
	return ac
}

// SetActionLabel sets the action_label field.
func (ac *ActionCreate) SetActionLabel(s string) *ActionCreate {
	ac.mutation.SetActionLabel(s)
	return ac
}

// SetProperty sets the property field.
func (ac *ActionCreate) SetProperty(s string) *ActionCreate {
	ac.mutation.SetProperty(s)
	return ac
}

// SetValue sets the value field.
func (ac *ActionCreate) SetValue(b []byte) *ActionCreate {
	ac.mutation.SetValue(b)
	return ac
}

// SetEventID sets the event edge to Event by id.
func (ac *ActionCreate) SetEventID(id uuid.UUID) *ActionCreate {
	ac.mutation.SetEventID(id)
	return ac
}

// SetNillableEventID sets the event edge to Event by id if the given value is not nil.
func (ac *ActionCreate) SetNillableEventID(id *uuid.UUID) *ActionCreate {
	if id != nil {
		ac = ac.SetEventID(*id)
	}
	return ac
}

// SetEvent sets the event edge to Event.
func (ac *ActionCreate) SetEvent(e *Event) *ActionCreate {
	return ac.SetEventID(e.ID)
}

// Mutation returns the ActionMutation object of the builder.
func (ac *ActionCreate) Mutation() *ActionMutation {
	return ac.mutation
}

// Save creates the Action in the database.
func (ac *ActionCreate) Save(ctx context.Context) (*Action, error) {
	if err := ac.preSave(); err != nil {
		return nil, err
	}
	var (
		err  error
		node *Action
	)
	if len(ac.hooks) == 0 {
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ActionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ac.mutation = mutation
			node, err = ac.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			mut = ac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *ActionCreate) SaveX(ctx context.Context) *Action {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ac *ActionCreate) preSave() error {
	if _, ok := ac.mutation.Action(); !ok {
		return &ValidationError{Name: "action", err: errors.New("ent: missing required field \"action\"")}
	}
	if _, ok := ac.mutation.ActionLabel(); !ok {
		return &ValidationError{Name: "action_label", err: errors.New("ent: missing required field \"action_label\"")}
	}
	if _, ok := ac.mutation.Property(); !ok {
		return &ValidationError{Name: "property", err: errors.New("ent: missing required field \"property\"")}
	}
	if _, ok := ac.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New("ent: missing required field \"value\"")}
	}
	return nil
}

func (ac *ActionCreate) sqlSave(ctx context.Context) (*Action, error) {
	a, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	a.ID = int(id)
	return a, nil
}

func (ac *ActionCreate) createSpec() (*Action, *sqlgraph.CreateSpec) {
	var (
		a     = &Action{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: action.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: action.FieldID,
			},
		}
	)
	if value, ok := ac.mutation.Action(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: action.FieldAction,
		})
		a.Action = value
	}
	if value, ok := ac.mutation.ActionLabel(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: action.FieldActionLabel,
		})
		a.ActionLabel = value
	}
	if value, ok := ac.mutation.Property(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: action.FieldProperty,
		})
		a.Property = value
	}
	if value, ok := ac.mutation.Value(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: action.FieldValue,
		})
		a.Value = value
	}
	if nodes := ac.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   action.EventTable,
			Columns: []string{action.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return a, _spec
}

// ActionCreateBulk is the builder for creating a bulk of Action entities.
type ActionCreateBulk struct {
	config
	builders []*ActionCreate
}

// Save creates the Action entities in the database.
func (acb *ActionCreateBulk) Save(ctx context.Context) ([]*Action, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Action, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				if err := builder.preSave(); err != nil {
					return nil, err
				}
				mutation, ok := m.(*ActionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (acb *ActionCreateBulk) SaveX(ctx context.Context) []*Action {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
