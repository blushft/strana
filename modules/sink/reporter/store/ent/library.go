// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/blushft/strana/modules/sink/reporter/store/ent/library"
	"github.com/facebook/ent/dialect/sql"
)

// Library is the model entity for the Library schema.
type Library struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Version holds the value of the "version" field.
	Version string `json:"version,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LibraryQuery when eager-loading is set.
	Edges LibraryEdges `json:"edges"`
}

// LibraryEdges holds the relations/edges for other nodes in the graph.
type LibraryEdges struct {
	// Events holds the value of the events edge.
	Events []*Event
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EventsOrErr returns the Events value or an error if the edge
// was not loaded in eager-loading.
func (e LibraryEdges) EventsOrErr() ([]*Event, error) {
	if e.loadedTypes[0] {
		return e.Events, nil
	}
	return nil, &NotLoadedError{edge: "events"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Library) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // name
		&sql.NullString{}, // version
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Library fields.
func (l *Library) assignValues(values ...interface{}) error {
	if m, n := len(values), len(library.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	l.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		l.Name = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field version", values[1])
	} else if value.Valid {
		l.Version = value.String
	}
	return nil
}

// QueryEvents queries the events edge of the Library.
func (l *Library) QueryEvents() *EventQuery {
	return (&LibraryClient{config: l.config}).QueryEvents(l)
}

// Update returns a builder for updating this Library.
// Note that, you need to call Library.Unwrap() before calling this method, if this Library
// was returned from a transaction, and the transaction was committed or rolled back.
func (l *Library) Update() *LibraryUpdateOne {
	return (&LibraryClient{config: l.config}).UpdateOne(l)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (l *Library) Unwrap() *Library {
	tx, ok := l.config.driver.(*txDriver)
	if !ok {
		panic("ent: Library is not a transactional entity")
	}
	l.config.driver = tx.drv
	return l
}

// String implements the fmt.Stringer.
func (l *Library) String() string {
	var builder strings.Builder
	builder.WriteString("Library(")
	builder.WriteString(fmt.Sprintf("id=%v", l.ID))
	builder.WriteString(", name=")
	builder.WriteString(l.Name)
	builder.WriteString(", version=")
	builder.WriteString(l.Version)
	builder.WriteByte(')')
	return builder.String()
}

// Libraries is a parsable slice of Library.
type Libraries []*Library

func (l Libraries) config(cfg config) {
	for _i := range l {
		l[_i].config = cfg
	}
}
