// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/blushft/strana/modules/sink/reporter/store/ent/app"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/appstat"
	"github.com/facebook/ent/dialect/sql"
)

// AppStat is the model entity for the AppStat schema.
type AppStat struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Pageviews holds the value of the "pageviews" field.
	Pageviews int `json:"pageviews,omitempty"`
	// Visitors holds the value of the "visitors" field.
	Visitors int `json:"visitors,omitempty"`
	// Sessions holds the value of the "sessions" field.
	Sessions int `json:"sessions,omitempty"`
	// BouceRate holds the value of the "bouce_rate" field.
	BouceRate float64 `json:"bouce_rate,omitempty"`
	// KnownDurations holds the value of the "known_durations" field.
	KnownDurations int `json:"known_durations,omitempty"`
	// AvgDuration holds the value of the "avg_duration" field.
	AvgDuration float64 `json:"avg_duration,omitempty"`
	// Date holds the value of the "date" field.
	Date time.Time `json:"date,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AppStatQuery when eager-loading is set.
	Edges     AppStatEdges `json:"edges"`
	app_stats *int
}

// AppStatEdges holds the relations/edges for other nodes in the graph.
type AppStatEdges struct {
	// App holds the value of the app edge.
	App *App
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AppOrErr returns the App value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AppStatEdges) AppOrErr() (*App, error) {
	if e.loadedTypes[0] {
		if e.App == nil {
			// The edge app was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: app.Label}
		}
		return e.App, nil
	}
	return nil, &NotLoadedError{edge: "app"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppStat) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},   // id
		&sql.NullInt64{},   // pageviews
		&sql.NullInt64{},   // visitors
		&sql.NullInt64{},   // sessions
		&sql.NullFloat64{}, // bouce_rate
		&sql.NullInt64{},   // known_durations
		&sql.NullFloat64{}, // avg_duration
		&sql.NullTime{},    // date
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*AppStat) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // app_stats
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppStat fields.
func (as *AppStat) assignValues(values ...interface{}) error {
	if m, n := len(values), len(appstat.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	as.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field pageviews", values[0])
	} else if value.Valid {
		as.Pageviews = int(value.Int64)
	}
	if value, ok := values[1].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field visitors", values[1])
	} else if value.Valid {
		as.Visitors = int(value.Int64)
	}
	if value, ok := values[2].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field sessions", values[2])
	} else if value.Valid {
		as.Sessions = int(value.Int64)
	}
	if value, ok := values[3].(*sql.NullFloat64); !ok {
		return fmt.Errorf("unexpected type %T for field bouce_rate", values[3])
	} else if value.Valid {
		as.BouceRate = value.Float64
	}
	if value, ok := values[4].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field known_durations", values[4])
	} else if value.Valid {
		as.KnownDurations = int(value.Int64)
	}
	if value, ok := values[5].(*sql.NullFloat64); !ok {
		return fmt.Errorf("unexpected type %T for field avg_duration", values[5])
	} else if value.Valid {
		as.AvgDuration = value.Float64
	}
	if value, ok := values[6].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field date", values[6])
	} else if value.Valid {
		as.Date = value.Time
	}
	values = values[7:]
	if len(values) == len(appstat.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field app_stats", value)
		} else if value.Valid {
			as.app_stats = new(int)
			*as.app_stats = int(value.Int64)
		}
	}
	return nil
}

// QueryApp queries the app edge of the AppStat.
func (as *AppStat) QueryApp() *AppQuery {
	return (&AppStatClient{config: as.config}).QueryApp(as)
}

// Update returns a builder for updating this AppStat.
// Note that, you need to call AppStat.Unwrap() before calling this method, if this AppStat
// was returned from a transaction, and the transaction was committed or rolled back.
func (as *AppStat) Update() *AppStatUpdateOne {
	return (&AppStatClient{config: as.config}).UpdateOne(as)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (as *AppStat) Unwrap() *AppStat {
	tx, ok := as.config.driver.(*txDriver)
	if !ok {
		panic("ent: AppStat is not a transactional entity")
	}
	as.config.driver = tx.drv
	return as
}

// String implements the fmt.Stringer.
func (as *AppStat) String() string {
	var builder strings.Builder
	builder.WriteString("AppStat(")
	builder.WriteString(fmt.Sprintf("id=%v", as.ID))
	builder.WriteString(", pageviews=")
	builder.WriteString(fmt.Sprintf("%v", as.Pageviews))
	builder.WriteString(", visitors=")
	builder.WriteString(fmt.Sprintf("%v", as.Visitors))
	builder.WriteString(", sessions=")
	builder.WriteString(fmt.Sprintf("%v", as.Sessions))
	builder.WriteString(", bouce_rate=")
	builder.WriteString(fmt.Sprintf("%v", as.BouceRate))
	builder.WriteString(", known_durations=")
	builder.WriteString(fmt.Sprintf("%v", as.KnownDurations))
	builder.WriteString(", avg_duration=")
	builder.WriteString(fmt.Sprintf("%v", as.AvgDuration))
	builder.WriteString(", date=")
	builder.WriteString(as.Date.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AppStats is a parsable slice of AppStat.
type AppStats []*AppStat

func (as AppStats) config(cfg config) {
	for _i := range as {
		as[_i].config = cfg
	}
}
