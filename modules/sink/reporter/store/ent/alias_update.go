// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/blushft/strana/modules/sink/reporter/store/ent/alias"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/event"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/predicate"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/user"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/google/uuid"
)

// AliasUpdate is the builder for updating Alias entities.
type AliasUpdate struct {
	config
	hooks      []Hook
	mutation   *AliasMutation
	predicates []predicate.Alias
}

// Where adds a new predicate for the builder.
func (au *AliasUpdate) Where(ps ...predicate.Alias) *AliasUpdate {
	au.predicates = append(au.predicates, ps...)
	return au
}

// SetFrom sets the from field.
func (au *AliasUpdate) SetFrom(s string) *AliasUpdate {
	au.mutation.SetFrom(s)
	return au
}

// SetTo sets the to field.
func (au *AliasUpdate) SetTo(s string) *AliasUpdate {
	au.mutation.SetTo(s)
	return au
}

// SetEventID sets the event edge to Event by id.
func (au *AliasUpdate) SetEventID(id uuid.UUID) *AliasUpdate {
	au.mutation.SetEventID(id)
	return au
}

// SetNillableEventID sets the event edge to Event by id if the given value is not nil.
func (au *AliasUpdate) SetNillableEventID(id *uuid.UUID) *AliasUpdate {
	if id != nil {
		au = au.SetEventID(*id)
	}
	return au
}

// SetEvent sets the event edge to Event.
func (au *AliasUpdate) SetEvent(e *Event) *AliasUpdate {
	return au.SetEventID(e.ID)
}

// SetUserID sets the user edge to User by id.
func (au *AliasUpdate) SetUserID(id string) *AliasUpdate {
	au.mutation.SetUserID(id)
	return au
}

// SetNillableUserID sets the user edge to User by id if the given value is not nil.
func (au *AliasUpdate) SetNillableUserID(id *string) *AliasUpdate {
	if id != nil {
		au = au.SetUserID(*id)
	}
	return au
}

// SetUser sets the user edge to User.
func (au *AliasUpdate) SetUser(u *User) *AliasUpdate {
	return au.SetUserID(u.ID)
}

// Mutation returns the AliasMutation object of the builder.
func (au *AliasUpdate) Mutation() *AliasMutation {
	return au.mutation
}

// ClearEvent clears the event edge to Event.
func (au *AliasUpdate) ClearEvent() *AliasUpdate {
	au.mutation.ClearEvent()
	return au
}

// ClearUser clears the user edge to User.
func (au *AliasUpdate) ClearUser() *AliasUpdate {
	au.mutation.ClearUser()
	return au
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (au *AliasUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(au.hooks) == 0 {
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AliasMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *AliasUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AliasUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AliasUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

func (au *AliasUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   alias.Table,
			Columns: alias.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: alias.FieldID,
			},
		},
	}
	if ps := au.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.From(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: alias.FieldFrom,
		})
	}
	if value, ok := au.mutation.To(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: alias.FieldTo,
		})
	}
	if au.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   alias.EventTable,
			Columns: []string{alias.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   alias.EventTable,
			Columns: []string{alias.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   alias.UserTable,
			Columns: []string{alias.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   alias.UserTable,
			Columns: []string{alias.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{alias.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// AliasUpdateOne is the builder for updating a single Alias entity.
type AliasUpdateOne struct {
	config
	hooks    []Hook
	mutation *AliasMutation
}

// SetFrom sets the from field.
func (auo *AliasUpdateOne) SetFrom(s string) *AliasUpdateOne {
	auo.mutation.SetFrom(s)
	return auo
}

// SetTo sets the to field.
func (auo *AliasUpdateOne) SetTo(s string) *AliasUpdateOne {
	auo.mutation.SetTo(s)
	return auo
}

// SetEventID sets the event edge to Event by id.
func (auo *AliasUpdateOne) SetEventID(id uuid.UUID) *AliasUpdateOne {
	auo.mutation.SetEventID(id)
	return auo
}

// SetNillableEventID sets the event edge to Event by id if the given value is not nil.
func (auo *AliasUpdateOne) SetNillableEventID(id *uuid.UUID) *AliasUpdateOne {
	if id != nil {
		auo = auo.SetEventID(*id)
	}
	return auo
}

// SetEvent sets the event edge to Event.
func (auo *AliasUpdateOne) SetEvent(e *Event) *AliasUpdateOne {
	return auo.SetEventID(e.ID)
}

// SetUserID sets the user edge to User by id.
func (auo *AliasUpdateOne) SetUserID(id string) *AliasUpdateOne {
	auo.mutation.SetUserID(id)
	return auo
}

// SetNillableUserID sets the user edge to User by id if the given value is not nil.
func (auo *AliasUpdateOne) SetNillableUserID(id *string) *AliasUpdateOne {
	if id != nil {
		auo = auo.SetUserID(*id)
	}
	return auo
}

// SetUser sets the user edge to User.
func (auo *AliasUpdateOne) SetUser(u *User) *AliasUpdateOne {
	return auo.SetUserID(u.ID)
}

// Mutation returns the AliasMutation object of the builder.
func (auo *AliasUpdateOne) Mutation() *AliasMutation {
	return auo.mutation
}

// ClearEvent clears the event edge to Event.
func (auo *AliasUpdateOne) ClearEvent() *AliasUpdateOne {
	auo.mutation.ClearEvent()
	return auo
}

// ClearUser clears the user edge to User.
func (auo *AliasUpdateOne) ClearUser() *AliasUpdateOne {
	auo.mutation.ClearUser()
	return auo
}

// Save executes the query and returns the updated entity.
func (auo *AliasUpdateOne) Save(ctx context.Context) (*Alias, error) {

	var (
		err  error
		node *Alias
	)
	if len(auo.hooks) == 0 {
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AliasMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			mut = auo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AliasUpdateOne) SaveX(ctx context.Context) *Alias {
	a, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return a
}

// Exec executes the query on the entity.
func (auo *AliasUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AliasUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (auo *AliasUpdateOne) sqlSave(ctx context.Context) (a *Alias, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   alias.Table,
			Columns: alias.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: alias.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Alias.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := auo.mutation.From(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: alias.FieldFrom,
		})
	}
	if value, ok := auo.mutation.To(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: alias.FieldTo,
		})
	}
	if auo.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   alias.EventTable,
			Columns: []string{alias.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   alias.EventTable,
			Columns: []string{alias.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   alias.UserTable,
			Columns: []string{alias.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   alias.UserTable,
			Columns: []string{alias.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	a = &Alias{config: auo.config}
	_spec.Assign = a.assignValues
	_spec.ScanValues = a.scanValues()
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{alias.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return a, nil
}
