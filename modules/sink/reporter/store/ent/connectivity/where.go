// Code generated by entc, DO NOT EDIT.

package connectivity

import (
	"github.com/blushft/strana/modules/sink/reporter/store/ent/predicate"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Connectivity {
	return predicate.Connectivity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Connectivity {
	return predicate.Connectivity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Connectivity {
	return predicate.Connectivity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Connectivity {
	return predicate.Connectivity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Connectivity {
	return predicate.Connectivity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Connectivity {
	return predicate.Connectivity(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Connectivity {
	return predicate.Connectivity(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Connectivity {
	return predicate.Connectivity(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Connectivity {
	return predicate.Connectivity(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Bluetooth applies equality check predicate on the "bluetooth" field. It's identical to BluetoothEQ.
func Bluetooth(v bool) predicate.Connectivity {
	return predicate.Connectivity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBluetooth), v))
	})
}

// Cellular applies equality check predicate on the "cellular" field. It's identical to CellularEQ.
func Cellular(v bool) predicate.Connectivity {
	return predicate.Connectivity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCellular), v))
	})
}

// Wifi applies equality check predicate on the "wifi" field. It's identical to WifiEQ.
func Wifi(v bool) predicate.Connectivity {
	return predicate.Connectivity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWifi), v))
	})
}

// Ethernet applies equality check predicate on the "ethernet" field. It's identical to EthernetEQ.
func Ethernet(v bool) predicate.Connectivity {
	return predicate.Connectivity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEthernet), v))
	})
}

// Carrier applies equality check predicate on the "carrier" field. It's identical to CarrierEQ.
func Carrier(v bool) predicate.Connectivity {
	return predicate.Connectivity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCarrier), v))
	})
}

// Isp applies equality check predicate on the "isp" field. It's identical to IspEQ.
func Isp(v bool) predicate.Connectivity {
	return predicate.Connectivity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsp), v))
	})
}

// BluetoothEQ applies the EQ predicate on the "bluetooth" field.
func BluetoothEQ(v bool) predicate.Connectivity {
	return predicate.Connectivity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBluetooth), v))
	})
}

// BluetoothNEQ applies the NEQ predicate on the "bluetooth" field.
func BluetoothNEQ(v bool) predicate.Connectivity {
	return predicate.Connectivity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBluetooth), v))
	})
}

// CellularEQ applies the EQ predicate on the "cellular" field.
func CellularEQ(v bool) predicate.Connectivity {
	return predicate.Connectivity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCellular), v))
	})
}

// CellularNEQ applies the NEQ predicate on the "cellular" field.
func CellularNEQ(v bool) predicate.Connectivity {
	return predicate.Connectivity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCellular), v))
	})
}

// WifiEQ applies the EQ predicate on the "wifi" field.
func WifiEQ(v bool) predicate.Connectivity {
	return predicate.Connectivity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWifi), v))
	})
}

// WifiNEQ applies the NEQ predicate on the "wifi" field.
func WifiNEQ(v bool) predicate.Connectivity {
	return predicate.Connectivity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWifi), v))
	})
}

// EthernetEQ applies the EQ predicate on the "ethernet" field.
func EthernetEQ(v bool) predicate.Connectivity {
	return predicate.Connectivity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEthernet), v))
	})
}

// EthernetNEQ applies the NEQ predicate on the "ethernet" field.
func EthernetNEQ(v bool) predicate.Connectivity {
	return predicate.Connectivity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEthernet), v))
	})
}

// CarrierEQ applies the EQ predicate on the "carrier" field.
func CarrierEQ(v bool) predicate.Connectivity {
	return predicate.Connectivity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCarrier), v))
	})
}

// CarrierNEQ applies the NEQ predicate on the "carrier" field.
func CarrierNEQ(v bool) predicate.Connectivity {
	return predicate.Connectivity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCarrier), v))
	})
}

// IspEQ applies the EQ predicate on the "isp" field.
func IspEQ(v bool) predicate.Connectivity {
	return predicate.Connectivity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsp), v))
	})
}

// IspNEQ applies the NEQ predicate on the "isp" field.
func IspNEQ(v bool) predicate.Connectivity {
	return predicate.Connectivity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsp), v))
	})
}

// HasEvents applies the HasEdge predicate on the "events" edge.
func HasEvents() predicate.Connectivity {
	return predicate.Connectivity(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EventsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, EventsTable, EventsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEventsWith applies the HasEdge predicate on the "events" edge with a given conditions (other predicates).
func HasEventsWith(preds ...predicate.Event) predicate.Connectivity {
	return predicate.Connectivity(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EventsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, EventsTable, EventsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Connectivity) predicate.Connectivity {
	return predicate.Connectivity(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Connectivity) predicate.Connectivity {
	return predicate.Connectivity(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Connectivity) predicate.Connectivity {
	return predicate.Connectivity(func(s *sql.Selector) {
		p(s.Not())
	})
}
