// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/blushft/strana/modules/sink/reporter/store/ent/event"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/oscontext"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/google/uuid"
)

// OSContextCreate is the builder for creating a OSContext entity.
type OSContextCreate struct {
	config
	mutation *OSContextMutation
	hooks    []Hook
}

// SetName sets the name field.
func (occ *OSContextCreate) SetName(s string) *OSContextCreate {
	occ.mutation.SetName(s)
	return occ
}

// SetFamily sets the family field.
func (occ *OSContextCreate) SetFamily(s string) *OSContextCreate {
	occ.mutation.SetFamily(s)
	return occ
}

// SetPlatform sets the platform field.
func (occ *OSContextCreate) SetPlatform(s string) *OSContextCreate {
	occ.mutation.SetPlatform(s)
	return occ
}

// SetNillablePlatform sets the platform field if the given value is not nil.
func (occ *OSContextCreate) SetNillablePlatform(s *string) *OSContextCreate {
	if s != nil {
		occ.SetPlatform(*s)
	}
	return occ
}

// SetVersion sets the version field.
func (occ *OSContextCreate) SetVersion(s string) *OSContextCreate {
	occ.mutation.SetVersion(s)
	return occ
}

// AddEventIDs adds the events edge to Event by ids.
func (occ *OSContextCreate) AddEventIDs(ids ...uuid.UUID) *OSContextCreate {
	occ.mutation.AddEventIDs(ids...)
	return occ
}

// AddEvents adds the events edges to Event.
func (occ *OSContextCreate) AddEvents(e ...*Event) *OSContextCreate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return occ.AddEventIDs(ids...)
}

// Mutation returns the OSContextMutation object of the builder.
func (occ *OSContextCreate) Mutation() *OSContextMutation {
	return occ.mutation
}

// Save creates the OSContext in the database.
func (occ *OSContextCreate) Save(ctx context.Context) (*OSContext, error) {
	if err := occ.preSave(); err != nil {
		return nil, err
	}
	var (
		err  error
		node *OSContext
	)
	if len(occ.hooks) == 0 {
		node, err = occ.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OSContextMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			occ.mutation = mutation
			node, err = occ.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(occ.hooks) - 1; i >= 0; i-- {
			mut = occ.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, occ.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (occ *OSContextCreate) SaveX(ctx context.Context) *OSContext {
	v, err := occ.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (occ *OSContextCreate) preSave() error {
	if _, ok := occ.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if _, ok := occ.mutation.Family(); !ok {
		return &ValidationError{Name: "family", err: errors.New("ent: missing required field \"family\"")}
	}
	if _, ok := occ.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New("ent: missing required field \"version\"")}
	}
	return nil
}

func (occ *OSContextCreate) sqlSave(ctx context.Context) (*OSContext, error) {
	oc, _spec := occ.createSpec()
	if err := sqlgraph.CreateNode(ctx, occ.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	oc.ID = int(id)
	return oc, nil
}

func (occ *OSContextCreate) createSpec() (*OSContext, *sqlgraph.CreateSpec) {
	var (
		oc    = &OSContext{config: occ.config}
		_spec = &sqlgraph.CreateSpec{
			Table: oscontext.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: oscontext.FieldID,
			},
		}
	)
	if value, ok := occ.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oscontext.FieldName,
		})
		oc.Name = value
	}
	if value, ok := occ.mutation.Family(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oscontext.FieldFamily,
		})
		oc.Family = value
	}
	if value, ok := occ.mutation.Platform(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oscontext.FieldPlatform,
		})
		oc.Platform = value
	}
	if value, ok := occ.mutation.Version(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oscontext.FieldVersion,
		})
		oc.Version = value
	}
	if nodes := occ.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   oscontext.EventsTable,
			Columns: []string{oscontext.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return oc, _spec
}

// OSContextCreateBulk is the builder for creating a bulk of OSContext entities.
type OSContextCreateBulk struct {
	config
	builders []*OSContextCreate
}

// Save creates the OSContext entities in the database.
func (occb *OSContextCreateBulk) Save(ctx context.Context) ([]*OSContext, error) {
	specs := make([]*sqlgraph.CreateSpec, len(occb.builders))
	nodes := make([]*OSContext, len(occb.builders))
	mutators := make([]Mutator, len(occb.builders))
	for i := range occb.builders {
		func(i int, root context.Context) {
			builder := occb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				if err := builder.preSave(); err != nil {
					return nil, err
				}
				mutation, ok := m.(*OSContextMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, occb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, occb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, occb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (occb *OSContextCreateBulk) SaveX(ctx context.Context) []*OSContext {
	v, err := occb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
