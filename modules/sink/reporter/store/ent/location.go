// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/blushft/strana/modules/sink/reporter/store/ent/location"
	"github.com/facebook/ent/dialect/sql"
)

// Location is the model entity for the Location schema.
type Location struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Street holds the value of the "street" field.
	Street string `json:"street,omitempty"`
	// City holds the value of the "city" field.
	City string `json:"city,omitempty"`
	// State holds the value of the "state" field.
	State string `json:"state,omitempty"`
	// Postalcode holds the value of the "postalcode" field.
	Postalcode string `json:"postalcode,omitempty"`
	// Region holds the value of the "region" field.
	Region string `json:"region,omitempty"`
	// Locale holds the value of the "locale" field.
	Locale string `json:"locale,omitempty"`
	// Country holds the value of the "country" field.
	Country string `json:"country,omitempty"`
	// Longitude holds the value of the "longitude" field.
	Longitude float64 `json:"longitude,omitempty"`
	// Latitude holds the value of the "latitude" field.
	Latitude float64 `json:"latitude,omitempty"`
	// Timezone holds the value of the "timezone" field.
	Timezone string `json:"timezone,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LocationQuery when eager-loading is set.
	Edges LocationEdges `json:"edges"`
}

// LocationEdges holds the relations/edges for other nodes in the graph.
type LocationEdges struct {
	// Events holds the value of the events edge.
	Events []*Event
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EventsOrErr returns the Events value or an error if the edge
// was not loaded in eager-loading.
func (e LocationEdges) EventsOrErr() ([]*Event, error) {
	if e.loadedTypes[0] {
		return e.Events, nil
	}
	return nil, &NotLoadedError{edge: "events"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Location) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},   // id
		&sql.NullString{},  // street
		&sql.NullString{},  // city
		&sql.NullString{},  // state
		&sql.NullString{},  // postalcode
		&sql.NullString{},  // region
		&sql.NullString{},  // locale
		&sql.NullString{},  // country
		&sql.NullFloat64{}, // longitude
		&sql.NullFloat64{}, // latitude
		&sql.NullString{},  // timezone
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Location fields.
func (l *Location) assignValues(values ...interface{}) error {
	if m, n := len(values), len(location.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	l.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field street", values[0])
	} else if value.Valid {
		l.Street = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field city", values[1])
	} else if value.Valid {
		l.City = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field state", values[2])
	} else if value.Valid {
		l.State = value.String
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field postalcode", values[3])
	} else if value.Valid {
		l.Postalcode = value.String
	}
	if value, ok := values[4].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field region", values[4])
	} else if value.Valid {
		l.Region = value.String
	}
	if value, ok := values[5].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field locale", values[5])
	} else if value.Valid {
		l.Locale = value.String
	}
	if value, ok := values[6].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field country", values[6])
	} else if value.Valid {
		l.Country = value.String
	}
	if value, ok := values[7].(*sql.NullFloat64); !ok {
		return fmt.Errorf("unexpected type %T for field longitude", values[7])
	} else if value.Valid {
		l.Longitude = value.Float64
	}
	if value, ok := values[8].(*sql.NullFloat64); !ok {
		return fmt.Errorf("unexpected type %T for field latitude", values[8])
	} else if value.Valid {
		l.Latitude = value.Float64
	}
	if value, ok := values[9].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field timezone", values[9])
	} else if value.Valid {
		l.Timezone = value.String
	}
	return nil
}

// QueryEvents queries the events edge of the Location.
func (l *Location) QueryEvents() *EventQuery {
	return (&LocationClient{config: l.config}).QueryEvents(l)
}

// Update returns a builder for updating this Location.
// Note that, you need to call Location.Unwrap() before calling this method, if this Location
// was returned from a transaction, and the transaction was committed or rolled back.
func (l *Location) Update() *LocationUpdateOne {
	return (&LocationClient{config: l.config}).UpdateOne(l)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (l *Location) Unwrap() *Location {
	tx, ok := l.config.driver.(*txDriver)
	if !ok {
		panic("ent: Location is not a transactional entity")
	}
	l.config.driver = tx.drv
	return l
}

// String implements the fmt.Stringer.
func (l *Location) String() string {
	var builder strings.Builder
	builder.WriteString("Location(")
	builder.WriteString(fmt.Sprintf("id=%v", l.ID))
	builder.WriteString(", street=")
	builder.WriteString(l.Street)
	builder.WriteString(", city=")
	builder.WriteString(l.City)
	builder.WriteString(", state=")
	builder.WriteString(l.State)
	builder.WriteString(", postalcode=")
	builder.WriteString(l.Postalcode)
	builder.WriteString(", region=")
	builder.WriteString(l.Region)
	builder.WriteString(", locale=")
	builder.WriteString(l.Locale)
	builder.WriteString(", country=")
	builder.WriteString(l.Country)
	builder.WriteString(", longitude=")
	builder.WriteString(fmt.Sprintf("%v", l.Longitude))
	builder.WriteString(", latitude=")
	builder.WriteString(fmt.Sprintf("%v", l.Latitude))
	builder.WriteString(", timezone=")
	builder.WriteString(l.Timezone)
	builder.WriteByte(')')
	return builder.String()
}

// Locations is a parsable slice of Location.
type Locations []*Location

func (l Locations) config(cfg config) {
	for _i := range l {
		l[_i].config = cfg
	}
}
