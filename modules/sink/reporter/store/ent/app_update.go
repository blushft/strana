// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/blushft/strana/modules/sink/reporter/store/ent/app"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/event"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/predicate"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/google/uuid"
)

// AppUpdate is the builder for updating App entities.
type AppUpdate struct {
	config
	hooks      []Hook
	mutation   *AppMutation
	predicates []predicate.App
}

// Where adds a new predicate for the builder.
func (au *AppUpdate) Where(ps ...predicate.App) *AppUpdate {
	au.predicates = append(au.predicates, ps...)
	return au
}

// SetName sets the name field.
func (au *AppUpdate) SetName(s string) *AppUpdate {
	au.mutation.SetName(s)
	return au
}

// SetVersion sets the version field.
func (au *AppUpdate) SetVersion(s string) *AppUpdate {
	au.mutation.SetVersion(s)
	return au
}

// SetNillableVersion sets the version field if the given value is not nil.
func (au *AppUpdate) SetNillableVersion(s *string) *AppUpdate {
	if s != nil {
		au.SetVersion(*s)
	}
	return au
}

// ClearVersion clears the value of version.
func (au *AppUpdate) ClearVersion() *AppUpdate {
	au.mutation.ClearVersion()
	return au
}

// SetBuild sets the build field.
func (au *AppUpdate) SetBuild(s string) *AppUpdate {
	au.mutation.SetBuild(s)
	return au
}

// SetNillableBuild sets the build field if the given value is not nil.
func (au *AppUpdate) SetNillableBuild(s *string) *AppUpdate {
	if s != nil {
		au.SetBuild(*s)
	}
	return au
}

// ClearBuild clears the value of build.
func (au *AppUpdate) ClearBuild() *AppUpdate {
	au.mutation.ClearBuild()
	return au
}

// SetNamespace sets the namespace field.
func (au *AppUpdate) SetNamespace(s string) *AppUpdate {
	au.mutation.SetNamespace(s)
	return au
}

// SetNillableNamespace sets the namespace field if the given value is not nil.
func (au *AppUpdate) SetNillableNamespace(s *string) *AppUpdate {
	if s != nil {
		au.SetNamespace(*s)
	}
	return au
}

// ClearNamespace clears the value of namespace.
func (au *AppUpdate) ClearNamespace() *AppUpdate {
	au.mutation.ClearNamespace()
	return au
}

// SetProperties sets the properties field.
func (au *AppUpdate) SetProperties(m map[string]interface{}) *AppUpdate {
	au.mutation.SetProperties(m)
	return au
}

// ClearProperties clears the value of properties.
func (au *AppUpdate) ClearProperties() *AppUpdate {
	au.mutation.ClearProperties()
	return au
}

// AddEventIDs adds the events edge to Event by ids.
func (au *AppUpdate) AddEventIDs(ids ...uuid.UUID) *AppUpdate {
	au.mutation.AddEventIDs(ids...)
	return au
}

// AddEvents adds the events edges to Event.
func (au *AppUpdate) AddEvents(e ...*Event) *AppUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return au.AddEventIDs(ids...)
}

// Mutation returns the AppMutation object of the builder.
func (au *AppUpdate) Mutation() *AppMutation {
	return au.mutation
}

// RemoveEventIDs removes the events edge to Event by ids.
func (au *AppUpdate) RemoveEventIDs(ids ...uuid.UUID) *AppUpdate {
	au.mutation.RemoveEventIDs(ids...)
	return au
}

// RemoveEvents removes events edges to Event.
func (au *AppUpdate) RemoveEvents(e ...*Event) *AppUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return au.RemoveEventIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (au *AppUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(au.hooks) == 0 {
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *AppUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AppUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AppUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

func (au *AppUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   app.Table,
			Columns: app.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: app.FieldID,
			},
		},
	}
	if ps := au.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: app.FieldName,
		})
	}
	if value, ok := au.mutation.Version(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: app.FieldVersion,
		})
	}
	if au.mutation.VersionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: app.FieldVersion,
		})
	}
	if value, ok := au.mutation.Build(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: app.FieldBuild,
		})
	}
	if au.mutation.BuildCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: app.FieldBuild,
		})
	}
	if value, ok := au.mutation.Namespace(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: app.FieldNamespace,
		})
	}
	if au.mutation.NamespaceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: app.FieldNamespace,
		})
	}
	if value, ok := au.mutation.Properties(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: app.FieldProperties,
		})
	}
	if au.mutation.PropertiesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: app.FieldProperties,
		})
	}
	if nodes := au.mutation.RemovedEventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   app.EventsTable,
			Columns: []string{app.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   app.EventsTable,
			Columns: []string{app.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{app.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// AppUpdateOne is the builder for updating a single App entity.
type AppUpdateOne struct {
	config
	hooks    []Hook
	mutation *AppMutation
}

// SetName sets the name field.
func (auo *AppUpdateOne) SetName(s string) *AppUpdateOne {
	auo.mutation.SetName(s)
	return auo
}

// SetVersion sets the version field.
func (auo *AppUpdateOne) SetVersion(s string) *AppUpdateOne {
	auo.mutation.SetVersion(s)
	return auo
}

// SetNillableVersion sets the version field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableVersion(s *string) *AppUpdateOne {
	if s != nil {
		auo.SetVersion(*s)
	}
	return auo
}

// ClearVersion clears the value of version.
func (auo *AppUpdateOne) ClearVersion() *AppUpdateOne {
	auo.mutation.ClearVersion()
	return auo
}

// SetBuild sets the build field.
func (auo *AppUpdateOne) SetBuild(s string) *AppUpdateOne {
	auo.mutation.SetBuild(s)
	return auo
}

// SetNillableBuild sets the build field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableBuild(s *string) *AppUpdateOne {
	if s != nil {
		auo.SetBuild(*s)
	}
	return auo
}

// ClearBuild clears the value of build.
func (auo *AppUpdateOne) ClearBuild() *AppUpdateOne {
	auo.mutation.ClearBuild()
	return auo
}

// SetNamespace sets the namespace field.
func (auo *AppUpdateOne) SetNamespace(s string) *AppUpdateOne {
	auo.mutation.SetNamespace(s)
	return auo
}

// SetNillableNamespace sets the namespace field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableNamespace(s *string) *AppUpdateOne {
	if s != nil {
		auo.SetNamespace(*s)
	}
	return auo
}

// ClearNamespace clears the value of namespace.
func (auo *AppUpdateOne) ClearNamespace() *AppUpdateOne {
	auo.mutation.ClearNamespace()
	return auo
}

// SetProperties sets the properties field.
func (auo *AppUpdateOne) SetProperties(m map[string]interface{}) *AppUpdateOne {
	auo.mutation.SetProperties(m)
	return auo
}

// ClearProperties clears the value of properties.
func (auo *AppUpdateOne) ClearProperties() *AppUpdateOne {
	auo.mutation.ClearProperties()
	return auo
}

// AddEventIDs adds the events edge to Event by ids.
func (auo *AppUpdateOne) AddEventIDs(ids ...uuid.UUID) *AppUpdateOne {
	auo.mutation.AddEventIDs(ids...)
	return auo
}

// AddEvents adds the events edges to Event.
func (auo *AppUpdateOne) AddEvents(e ...*Event) *AppUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auo.AddEventIDs(ids...)
}

// Mutation returns the AppMutation object of the builder.
func (auo *AppUpdateOne) Mutation() *AppMutation {
	return auo.mutation
}

// RemoveEventIDs removes the events edge to Event by ids.
func (auo *AppUpdateOne) RemoveEventIDs(ids ...uuid.UUID) *AppUpdateOne {
	auo.mutation.RemoveEventIDs(ids...)
	return auo
}

// RemoveEvents removes events edges to Event.
func (auo *AppUpdateOne) RemoveEvents(e ...*Event) *AppUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auo.RemoveEventIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (auo *AppUpdateOne) Save(ctx context.Context) (*App, error) {

	var (
		err  error
		node *App
	)
	if len(auo.hooks) == 0 {
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			mut = auo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AppUpdateOne) SaveX(ctx context.Context) *App {
	a, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return a
}

// Exec executes the query on the entity.
func (auo *AppUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AppUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (auo *AppUpdateOne) sqlSave(ctx context.Context) (a *App, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   app.Table,
			Columns: app.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: app.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing App.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := auo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: app.FieldName,
		})
	}
	if value, ok := auo.mutation.Version(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: app.FieldVersion,
		})
	}
	if auo.mutation.VersionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: app.FieldVersion,
		})
	}
	if value, ok := auo.mutation.Build(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: app.FieldBuild,
		})
	}
	if auo.mutation.BuildCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: app.FieldBuild,
		})
	}
	if value, ok := auo.mutation.Namespace(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: app.FieldNamespace,
		})
	}
	if auo.mutation.NamespaceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: app.FieldNamespace,
		})
	}
	if value, ok := auo.mutation.Properties(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: app.FieldProperties,
		})
	}
	if auo.mutation.PropertiesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: app.FieldProperties,
		})
	}
	if nodes := auo.mutation.RemovedEventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   app.EventsTable,
			Columns: []string{app.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   app.EventsTable,
			Columns: []string{app.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	a = &App{config: auo.config}
	_spec.Assign = a.assignValues
	_spec.ScanValues = a.scanValues()
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{app.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return a, nil
}
