// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/blushft/strana/modules/sink/reporter/store/ent/app"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/appstat"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/pagestat"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/pageview"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/predicate"
	"github.com/blushft/strana/modules/sink/reporter/store/ent/session"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/google/uuid"
)

// AppUpdate is the builder for updating App entities.
type AppUpdate struct {
	config
	hooks      []Hook
	mutation   *AppMutation
	predicates []predicate.App
}

// Where adds a new predicate for the builder.
func (au *AppUpdate) Where(ps ...predicate.App) *AppUpdate {
	au.predicates = append(au.predicates, ps...)
	return au
}

// SetName sets the name field.
func (au *AppUpdate) SetName(s string) *AppUpdate {
	au.mutation.SetName(s)
	return au
}

// SetTrackingID sets the tracking_id field.
func (au *AppUpdate) SetTrackingID(s string) *AppUpdate {
	au.mutation.SetTrackingID(s)
	return au
}

// AddSessionIDs adds the sessions edge to Session by ids.
func (au *AppUpdate) AddSessionIDs(ids ...uuid.UUID) *AppUpdate {
	au.mutation.AddSessionIDs(ids...)
	return au
}

// AddSessions adds the sessions edges to Session.
func (au *AppUpdate) AddSessions(s ...*Session) *AppUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return au.AddSessionIDs(ids...)
}

// AddPageviewIDs adds the pageviews edge to PageView by ids.
func (au *AppUpdate) AddPageviewIDs(ids ...uuid.UUID) *AppUpdate {
	au.mutation.AddPageviewIDs(ids...)
	return au
}

// AddPageviews adds the pageviews edges to PageView.
func (au *AppUpdate) AddPageviews(p ...*PageView) *AppUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return au.AddPageviewIDs(ids...)
}

// AddStatIDs adds the stats edge to AppStat by ids.
func (au *AppUpdate) AddStatIDs(ids ...int) *AppUpdate {
	au.mutation.AddStatIDs(ids...)
	return au
}

// AddStats adds the stats edges to AppStat.
func (au *AppUpdate) AddStats(a ...*AppStat) *AppUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddStatIDs(ids...)
}

// AddPageStatIDs adds the page_stats edge to PageStat by ids.
func (au *AppUpdate) AddPageStatIDs(ids ...int) *AppUpdate {
	au.mutation.AddPageStatIDs(ids...)
	return au
}

// AddPageStats adds the page_stats edges to PageStat.
func (au *AppUpdate) AddPageStats(p ...*PageStat) *AppUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return au.AddPageStatIDs(ids...)
}

// Mutation returns the AppMutation object of the builder.
func (au *AppUpdate) Mutation() *AppMutation {
	return au.mutation
}

// RemoveSessionIDs removes the sessions edge to Session by ids.
func (au *AppUpdate) RemoveSessionIDs(ids ...uuid.UUID) *AppUpdate {
	au.mutation.RemoveSessionIDs(ids...)
	return au
}

// RemoveSessions removes sessions edges to Session.
func (au *AppUpdate) RemoveSessions(s ...*Session) *AppUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return au.RemoveSessionIDs(ids...)
}

// RemovePageviewIDs removes the pageviews edge to PageView by ids.
func (au *AppUpdate) RemovePageviewIDs(ids ...uuid.UUID) *AppUpdate {
	au.mutation.RemovePageviewIDs(ids...)
	return au
}

// RemovePageviews removes pageviews edges to PageView.
func (au *AppUpdate) RemovePageviews(p ...*PageView) *AppUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return au.RemovePageviewIDs(ids...)
}

// RemoveStatIDs removes the stats edge to AppStat by ids.
func (au *AppUpdate) RemoveStatIDs(ids ...int) *AppUpdate {
	au.mutation.RemoveStatIDs(ids...)
	return au
}

// RemoveStats removes stats edges to AppStat.
func (au *AppUpdate) RemoveStats(a ...*AppStat) *AppUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveStatIDs(ids...)
}

// RemovePageStatIDs removes the page_stats edge to PageStat by ids.
func (au *AppUpdate) RemovePageStatIDs(ids ...int) *AppUpdate {
	au.mutation.RemovePageStatIDs(ids...)
	return au
}

// RemovePageStats removes page_stats edges to PageStat.
func (au *AppUpdate) RemovePageStats(p ...*PageStat) *AppUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return au.RemovePageStatIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (au *AppUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := au.mutation.TrackingID(); ok {
		if err := app.TrackingIDValidator(v); err != nil {
			return 0, &ValidationError{Name: "tracking_id", err: fmt.Errorf("ent: validator failed for field \"tracking_id\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(au.hooks) == 0 {
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *AppUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AppUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AppUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

func (au *AppUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   app.Table,
			Columns: app.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: app.FieldID,
			},
		},
	}
	if ps := au.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: app.FieldName,
		})
	}
	if value, ok := au.mutation.TrackingID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: app.FieldTrackingID,
		})
	}
	if nodes := au.mutation.RemovedSessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   app.SessionsTable,
			Columns: []string{app.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: session.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   app.SessionsTable,
			Columns: []string{app.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: session.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := au.mutation.RemovedPageviewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   app.PageviewsTable,
			Columns: []string{app.PageviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: pageview.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.PageviewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   app.PageviewsTable,
			Columns: []string{app.PageviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: pageview.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := au.mutation.RemovedStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.StatsTable,
			Columns: []string{app.StatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: appstat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.StatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.StatsTable,
			Columns: []string{app.StatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: appstat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := au.mutation.RemovedPageStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.PageStatsTable,
			Columns: []string{app.PageStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pagestat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.PageStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.PageStatsTable,
			Columns: []string{app.PageStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pagestat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{app.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// AppUpdateOne is the builder for updating a single App entity.
type AppUpdateOne struct {
	config
	hooks    []Hook
	mutation *AppMutation
}

// SetName sets the name field.
func (auo *AppUpdateOne) SetName(s string) *AppUpdateOne {
	auo.mutation.SetName(s)
	return auo
}

// SetTrackingID sets the tracking_id field.
func (auo *AppUpdateOne) SetTrackingID(s string) *AppUpdateOne {
	auo.mutation.SetTrackingID(s)
	return auo
}

// AddSessionIDs adds the sessions edge to Session by ids.
func (auo *AppUpdateOne) AddSessionIDs(ids ...uuid.UUID) *AppUpdateOne {
	auo.mutation.AddSessionIDs(ids...)
	return auo
}

// AddSessions adds the sessions edges to Session.
func (auo *AppUpdateOne) AddSessions(s ...*Session) *AppUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return auo.AddSessionIDs(ids...)
}

// AddPageviewIDs adds the pageviews edge to PageView by ids.
func (auo *AppUpdateOne) AddPageviewIDs(ids ...uuid.UUID) *AppUpdateOne {
	auo.mutation.AddPageviewIDs(ids...)
	return auo
}

// AddPageviews adds the pageviews edges to PageView.
func (auo *AppUpdateOne) AddPageviews(p ...*PageView) *AppUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return auo.AddPageviewIDs(ids...)
}

// AddStatIDs adds the stats edge to AppStat by ids.
func (auo *AppUpdateOne) AddStatIDs(ids ...int) *AppUpdateOne {
	auo.mutation.AddStatIDs(ids...)
	return auo
}

// AddStats adds the stats edges to AppStat.
func (auo *AppUpdateOne) AddStats(a ...*AppStat) *AppUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddStatIDs(ids...)
}

// AddPageStatIDs adds the page_stats edge to PageStat by ids.
func (auo *AppUpdateOne) AddPageStatIDs(ids ...int) *AppUpdateOne {
	auo.mutation.AddPageStatIDs(ids...)
	return auo
}

// AddPageStats adds the page_stats edges to PageStat.
func (auo *AppUpdateOne) AddPageStats(p ...*PageStat) *AppUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return auo.AddPageStatIDs(ids...)
}

// Mutation returns the AppMutation object of the builder.
func (auo *AppUpdateOne) Mutation() *AppMutation {
	return auo.mutation
}

// RemoveSessionIDs removes the sessions edge to Session by ids.
func (auo *AppUpdateOne) RemoveSessionIDs(ids ...uuid.UUID) *AppUpdateOne {
	auo.mutation.RemoveSessionIDs(ids...)
	return auo
}

// RemoveSessions removes sessions edges to Session.
func (auo *AppUpdateOne) RemoveSessions(s ...*Session) *AppUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return auo.RemoveSessionIDs(ids...)
}

// RemovePageviewIDs removes the pageviews edge to PageView by ids.
func (auo *AppUpdateOne) RemovePageviewIDs(ids ...uuid.UUID) *AppUpdateOne {
	auo.mutation.RemovePageviewIDs(ids...)
	return auo
}

// RemovePageviews removes pageviews edges to PageView.
func (auo *AppUpdateOne) RemovePageviews(p ...*PageView) *AppUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return auo.RemovePageviewIDs(ids...)
}

// RemoveStatIDs removes the stats edge to AppStat by ids.
func (auo *AppUpdateOne) RemoveStatIDs(ids ...int) *AppUpdateOne {
	auo.mutation.RemoveStatIDs(ids...)
	return auo
}

// RemoveStats removes stats edges to AppStat.
func (auo *AppUpdateOne) RemoveStats(a ...*AppStat) *AppUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveStatIDs(ids...)
}

// RemovePageStatIDs removes the page_stats edge to PageStat by ids.
func (auo *AppUpdateOne) RemovePageStatIDs(ids ...int) *AppUpdateOne {
	auo.mutation.RemovePageStatIDs(ids...)
	return auo
}

// RemovePageStats removes page_stats edges to PageStat.
func (auo *AppUpdateOne) RemovePageStats(p ...*PageStat) *AppUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return auo.RemovePageStatIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (auo *AppUpdateOne) Save(ctx context.Context) (*App, error) {
	if v, ok := auo.mutation.TrackingID(); ok {
		if err := app.TrackingIDValidator(v); err != nil {
			return nil, &ValidationError{Name: "tracking_id", err: fmt.Errorf("ent: validator failed for field \"tracking_id\": %w", err)}
		}
	}

	var (
		err  error
		node *App
	)
	if len(auo.hooks) == 0 {
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			mut = auo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AppUpdateOne) SaveX(ctx context.Context) *App {
	a, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return a
}

// Exec executes the query on the entity.
func (auo *AppUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AppUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (auo *AppUpdateOne) sqlSave(ctx context.Context) (a *App, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   app.Table,
			Columns: app.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: app.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing App.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := auo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: app.FieldName,
		})
	}
	if value, ok := auo.mutation.TrackingID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: app.FieldTrackingID,
		})
	}
	if nodes := auo.mutation.RemovedSessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   app.SessionsTable,
			Columns: []string{app.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: session.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   app.SessionsTable,
			Columns: []string{app.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: session.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := auo.mutation.RemovedPageviewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   app.PageviewsTable,
			Columns: []string{app.PageviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: pageview.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.PageviewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   app.PageviewsTable,
			Columns: []string{app.PageviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: pageview.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := auo.mutation.RemovedStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.StatsTable,
			Columns: []string{app.StatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: appstat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.StatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.StatsTable,
			Columns: []string{app.StatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: appstat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := auo.mutation.RemovedPageStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.PageStatsTable,
			Columns: []string{app.PageStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pagestat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.PageStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.PageStatsTable,
			Columns: []string{app.PageStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pagestat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	a = &App{config: auo.config}
	_spec.Assign = a.assignValues
	_spec.ScanValues = a.scanValues()
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{app.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return a, nil
}
